
package vulkan_bindings
import "core:strings"
import "core:c"

VK_MAKE_VERSION :: proc(major, minor, patch: u32) -> u32 {
    return major << 22 | minor << 12 | patch;
}

VK_MAX_PHYSICAL_DEVICE_NAME_SIZE :: 256;

VK_UUID_SIZE :: 16;

VK_LUID_SIZE :: 8;

VK_LUID_SIZE_KHR :: VK_LUID_SIZE;

VK_MAX_EXTENSION_NAME_SIZE :: 256;

VK_MAX_DESCRIPTION_SIZE :: 256;

VK_MAX_MEMORY_TYPES :: 32;

VK_MAX_MEMORY_HEAPS :: 16;

VK_LOD_CLAMP_NONE :: 1000.0;

VK_REMAINING_MIP_LEVELS :: 0;

VK_REMAINING_ARRAY_LAYERS :: 0;

VK_WHOLE_SIZE :: 0;

VK_ATTACHMENT_UNUSED :: 0;

VK_TRUE :: 1;

VK_FALSE :: 0;

VK_QUEUE_FAMILY_IGNORED :: 0;

VK_QUEUE_FAMILY_EXTERNAL :: 0;

VK_QUEUE_FAMILY_EXTERNAL_KHR :: VK_QUEUE_FAMILY_EXTERNAL;

VK_QUEUE_FAMILY_FOREIGN_EXT :: 0;

VK_SUBPASS_EXTERNAL :: 0;

VK_MAX_DEVICE_GROUP_SIZE :: 32;

VK_MAX_DEVICE_GROUP_SIZE_KHR :: VK_MAX_DEVICE_GROUP_SIZE;

VK_MAX_DRIVER_NAME_SIZE :: 256;

VK_MAX_DRIVER_NAME_SIZE_KHR :: VK_MAX_DRIVER_NAME_SIZE;

VK_MAX_DRIVER_INFO_SIZE :: 256;

VK_MAX_DRIVER_INFO_SIZE_KHR :: VK_MAX_DRIVER_INFO_SIZE;

VK_SHADER_UNUSED_KHR :: 0;

VK_SHADER_UNUSED_NV :: VK_SHADER_UNUSED_KHR;

VK_KHR_SURFACE_SPEC_VERSION :: 25;

VK_KHR_SURFACE_EXTENSION_NAME :: "VK_KHR_surface";

VK_KHR_SWAPCHAIN_SPEC_VERSION :: 70;

VK_KHR_SWAPCHAIN_EXTENSION_NAME :: "VK_KHR_swapchain";

VK_KHR_DISPLAY_SPEC_VERSION :: 23;

VK_KHR_DISPLAY_EXTENSION_NAME :: "VK_KHR_display";

VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION :: 10;

VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME :: "VK_KHR_display_swapchain";

VK_KHR_XLIB_SURFACE_SPEC_VERSION :: 6;

VK_KHR_XLIB_SURFACE_EXTENSION_NAME :: "VK_KHR_xlib_surface";

VK_KHR_XCB_SURFACE_SPEC_VERSION :: 6;

VK_KHR_XCB_SURFACE_EXTENSION_NAME :: "VK_KHR_xcb_surface";

VK_KHR_WAYLAND_SURFACE_SPEC_VERSION :: 6;

VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME :: "VK_KHR_wayland_surface";

VK_KHR_MIR_SURFACE_SPEC_VERSION :: 4;

VK_KHR_MIR_SURFACE_EXTENSION_NAME :: "VK_KHR_mir_surface";

VK_KHR_ANDROID_SURFACE_SPEC_VERSION :: 6;

VK_KHR_ANDROID_SURFACE_EXTENSION_NAME :: "VK_KHR_android_surface";

VK_KHR_WIN32_SURFACE_SPEC_VERSION :: 6;

VK_KHR_WIN32_SURFACE_EXTENSION_NAME :: "VK_KHR_win32_surface";

VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION :: 8;

VK_ANDROID_NATIVE_BUFFER_NUMBER :: 11;

VK_ANDROID_NATIVE_BUFFER_NAME :: "VK_ANDROID_native_buffer";

VK_EXT_DEBUG_REPORT_SPEC_VERSION :: 9;

VK_EXT_DEBUG_REPORT_EXTENSION_NAME :: "VK_EXT_debug_report";

VK_NV_GLSL_SHADER_SPEC_VERSION :: 1;

VK_NV_GLSL_SHADER_EXTENSION_NAME :: "VK_NV_glsl_shader";

VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION :: 1;

VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME :: "VK_EXT_depth_range_unrestricted";

VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION :: 3;

VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME :: "VK_KHR_sampler_mirror_clamp_to_edge";

VK_IMG_FILTER_CUBIC_SPEC_VERSION :: 1;

VK_IMG_FILTER_CUBIC_EXTENSION_NAME :: "VK_IMG_filter_cubic";

VK_AMD_EXTENSION_17_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_17_EXTENSION_NAME :: "VK_AMD_extension_17";

VK_AMD_EXTENSION_18_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_18_EXTENSION_NAME :: "VK_AMD_extension_18";

VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION :: 1;

VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME :: "VK_AMD_rasterization_order";

VK_AMD_EXTENSION_20_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_20_EXTENSION_NAME :: "VK_AMD_extension_20";

VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION :: 1;

VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME :: "VK_AMD_shader_trinary_minmax";

VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION :: 1;

VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME :: "VK_AMD_shader_explicit_vertex_parameter";

VK_EXT_DEBUG_MARKER_SPEC_VERSION :: 4;

VK_EXT_DEBUG_MARKER_EXTENSION_NAME :: "VK_EXT_debug_marker";

VK_AMD_EXTENSION_24_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_24_EXTENSION_NAME :: "VK_AMD_extension_24";

VK_AMD_EXTENSION_25_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_25_EXTENSION_NAME :: "VK_AMD_extension_25";

VK_AMD_GCN_SHADER_SPEC_VERSION :: 1;

VK_AMD_GCN_SHADER_EXTENSION_NAME :: "VK_AMD_gcn_shader";

VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION :: 1;

VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME :: "VK_NV_dedicated_allocation";

VK_EXT_EXTENSION_28_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_28_EXTENSION_NAME :: "VK_NV_extension_28";

VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION :: 1;

VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME :: "VK_EXT_transform_feedback";

VK_NVX_EXTENSION_30_SPEC_VERSION :: 0;

VK_NVX_EXTENSION_30_EXTENSION_NAME :: "VK_NVX_extension_30";

VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION :: 2;

VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME :: "VK_NVX_image_view_handle";

VK_AMD_EXTENSION_32_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_32_EXTENSION_NAME :: "VK_AMD_extension_32";

VK_AMD_EXTENSION_33_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_33_EXTENSION_NAME :: "VK_AMD_extension_33";

VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION :: 2;

VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME :: "VK_AMD_draw_indirect_count";

VK_AMD_EXTENSION_35_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_35_EXTENSION_NAME :: "VK_AMD_extension_35";

VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION :: 1;

VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME :: "VK_AMD_negative_viewport_height";

VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION :: 2;

VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME :: "VK_AMD_gpu_shader_half_float";

VK_AMD_SHADER_BALLOT_SPEC_VERSION :: 1;

VK_AMD_SHADER_BALLOT_EXTENSION_NAME :: "VK_AMD_shader_ballot";

VK_AMD_EXTENSION_39_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_39_EXTENSION_NAME :: "VK_AMD_extension_39";

VK_AMD_EXTENSION_40_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_40_EXTENSION_NAME :: "VK_AMD_extension_40";

VK_AMD_EXTENSION_41_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_41_EXTENSION_NAME :: "VK_AMD_extension_41";

VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION :: 1;

VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME :: "VK_AMD_texture_gather_bias_lod";

VK_AMD_SHADER_INFO_SPEC_VERSION :: 1;

VK_AMD_SHADER_INFO_EXTENSION_NAME :: "VK_AMD_shader_info";

VK_AMD_EXTENSION_44_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_44_EXTENSION_NAME :: "VK_AMD_extension_44";

VK_AMD_EXTENSION_45_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_45_EXTENSION_NAME :: "VK_AMD_extension_45";

VK_AMD_EXTENSION_46_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_46_EXTENSION_NAME :: "VK_AMD_extension_46";

VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION :: 1;

VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME :: "VK_AMD_shader_image_load_store_lod";

VK_NVX_EXTENSION_48_SPEC_VERSION :: 0;

VK_NVX_EXTENSION_48_EXTENSION_NAME :: "VK_NVX_extension_48";

VK_GOOGLE_EXTENSION_49_SPEC_VERSION :: 0;

VK_GOOGLE_EXTENSION_49_EXTENSION_NAME :: "VK_GOOGLE_extension_49";

VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION :: 1;

VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME :: "VK_GGP_stream_descriptor_surface";

VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION :: 2;

VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME :: "VK_NV_corner_sampled_image";

VK_NV_EXTENSION_52_SPEC_VERSION :: 0;

VK_NV_EXTENSION_52_EXTENSION_NAME :: "VK_NV_extension_52";

VK_NV_EXTENSION_53_SPEC_VERSION :: 0;

VK_NV_EXTENSION_53_EXTENSION_NAME :: "VK_NV_extension_53";

VK_KHR_MULTIVIEW_SPEC_VERSION :: 1;

VK_KHR_MULTIVIEW_EXTENSION_NAME :: "VK_KHR_multiview";

VK_IMG_FORMAT_PVRTC_SPEC_VERSION :: 1;

VK_IMG_FORMAT_PVRTC_EXTENSION_NAME :: "VK_IMG_format_pvrtc";

VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION :: 1;

VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME :: "VK_NV_external_memory_capabilities";

VK_NV_EXTERNAL_MEMORY_SPEC_VERSION :: 1;

VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME :: "VK_NV_external_memory";

VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION :: 1;

VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME :: "VK_NV_external_memory_win32";

VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION :: 2;

VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME :: "VK_NV_win32_keyed_mutex";

VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION :: 2;

VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME :: "VK_KHR_get_physical_device_properties2";

VK_KHR_DEVICE_GROUP_SPEC_VERSION :: 4;

VK_KHR_DEVICE_GROUP_EXTENSION_NAME :: "VK_KHR_device_group";

VK_EXT_VALIDATION_FLAGS_SPEC_VERSION :: 2;

VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME :: "VK_EXT_validation_flags";

VK_NN_VI_SURFACE_SPEC_VERSION :: 1;

VK_NN_VI_SURFACE_EXTENSION_NAME :: "VK_NN_vi_surface";

VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION :: 1;

VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME :: "VK_KHR_shader_draw_parameters";

VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION :: 1;

VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME :: "VK_EXT_shader_subgroup_ballot";

VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION :: 1;

VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME :: "VK_EXT_shader_subgroup_vote";

VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION :: 1;

VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME :: "VK_EXT_texture_compression_astc_hdr";

VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION :: 1;

VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME :: "VK_EXT_astc_decode_mode";

VK_IMG_EXTENSION_69_SPEC_VERSION :: 0;

VK_IMG_EXTENSION_69_EXTENSION_NAME :: "VK_IMG_extension_69";

VK_KHR_MAINTENANCE1_SPEC_VERSION :: 2;

VK_KHR_MAINTENANCE1_EXTENSION_NAME :: "VK_KHR_maintenance1";

VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION :: 1;

VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME :: "VK_KHR_device_group_creation";

VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME :: "VK_KHR_external_memory_capabilities";

VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME :: "VK_KHR_external_memory";

VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME :: "VK_KHR_external_memory_win32";

VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME :: "VK_KHR_external_memory_fd";

VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION :: 1;

VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME :: "VK_KHR_win32_keyed_mutex";

VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME :: "VK_KHR_external_semaphore_capabilities";

VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME :: "VK_KHR_external_semaphore";

VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME :: "VK_KHR_external_semaphore_win32";

VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME :: "VK_KHR_external_semaphore_fd";

VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION :: 2;

VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME :: "VK_KHR_push_descriptor";

VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION :: 2;

VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME :: "VK_EXT_conditional_rendering";

VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION :: 1;

VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME :: "VK_KHR_shader_float16_int8";

VK_KHR_16BIT_STORAGE_SPEC_VERSION :: 1;

VK_KHR_16BIT_STORAGE_EXTENSION_NAME :: "VK_KHR_16bit_storage";

VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION :: 1;

VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME :: "VK_KHR_incremental_present";

VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION :: 1;

VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME :: "VK_KHR_descriptor_update_template";

VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION :: 3;

VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME :: "VK_NVX_device_generated_commands";

VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION :: 1;

VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME :: "VK_NV_clip_space_w_scaling";

VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION :: 1;

VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME :: "VK_EXT_direct_mode_display";

VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION :: 1;

VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME :: "VK_EXT_acquire_xlib_display";

VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION :: 1;

VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME :: "VK_EXT_display_surface_counter";

VK_EXT_DISPLAY_CONTROL_SPEC_VERSION :: 1;

VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME :: "VK_EXT_display_control";

VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION :: 1;

VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME :: "VK_GOOGLE_display_timing";

VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION :: 1;

VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME :: "VK_NV_sample_mask_override_coverage";

VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION :: 1;

VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME :: "VK_NV_geometry_shader_passthrough";

VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION :: 1;

VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME :: "VK_NV_viewport_array2";

VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION :: 1;

VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME :: "VK_NVX_multiview_per_view_attributes";

VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION :: 1;

VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME :: "VK_NV_viewport_swizzle";

VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION :: 1;

VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME :: "VK_EXT_discard_rectangles";

VK_NV_EXTENSION_101_SPEC_VERSION :: 0;

VK_NV_EXTENSION_101_EXTENSION_NAME :: "VK_NV_extension_101";

VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION :: 1;

VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME :: "VK_EXT_conservative_rasterization";

VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION :: 1;

VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME :: "VK_EXT_depth_clip_enable";

VK_NV_EXTENSION_104_SPEC_VERSION :: 0;

VK_NV_EXTENSION_104_EXTENSION_NAME :: "VK_NV_extension_104";

VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION :: 4;

VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME :: "VK_EXT_swapchain_colorspace";

VK_EXT_HDR_METADATA_SPEC_VERSION :: 2;

VK_EXT_HDR_METADATA_EXTENSION_NAME :: "VK_EXT_hdr_metadata";

VK_IMG_EXTENSION_107_SPEC_VERSION :: 0;

VK_IMG_EXTENSION_107_EXTENSION_NAME :: "VK_IMG_extension_107";

VK_IMG_EXTENSION_108_SPEC_VERSION :: 0;

VK_IMG_EXTENSION_108_EXTENSION_NAME :: "VK_IMG_extension_108";

VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION :: 1;

VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME :: "VK_KHR_imageless_framebuffer";

VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION :: 1;

VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME :: "VK_KHR_create_renderpass2";

VK_IMG_EXTENSION_111_SPEC_VERSION :: 0;

VK_IMG_EXTENSION_111_EXTENSION_NAME :: "VK_IMG_extension_111";

VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION :: 1;

VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME :: "VK_KHR_shared_presentable_image";

VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME :: "VK_KHR_external_fence_capabilities";

VK_KHR_EXTERNAL_FENCE_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME :: "VK_KHR_external_fence";

VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME :: "VK_KHR_external_fence_win32";

VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION :: 1;

VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME :: "VK_KHR_external_fence_fd";

VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION :: 1;

VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME :: "VK_KHR_performance_query";

VK_KHR_MAINTENANCE2_SPEC_VERSION :: 1;

VK_KHR_MAINTENANCE2_EXTENSION_NAME :: "VK_KHR_maintenance2";

VK_KHR_EXTENSION_119_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_119_EXTENSION_NAME :: "VK_KHR_extension_119";

VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION :: 1;

VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME :: "VK_KHR_get_surface_capabilities2";

VK_KHR_VARIABLE_POINTERS_SPEC_VERSION :: 1;

VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME :: "VK_KHR_variable_pointers";

VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION :: 1;

VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME :: "VK_KHR_get_display_properties2";

VK_MVK_IOS_SURFACE_SPEC_VERSION :: 2;

VK_MVK_IOS_SURFACE_EXTENSION_NAME :: "VK_MVK_ios_surface";

VK_MVK_MACOS_SURFACE_SPEC_VERSION :: 2;

VK_MVK_MACOS_SURFACE_EXTENSION_NAME :: "VK_MVK_macos_surface";

VK_MVK_MOLTENVK_SPEC_VERSION :: 0;

VK_MVK_MOLTENVK_EXTENSION_NAME :: "VK_MVK_moltenvk";

VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION :: 1;

VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME :: "VK_EXT_external_memory_dma_buf";

VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION :: 1;

VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME :: "VK_EXT_queue_family_foreign";

VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION :: 3;

VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME :: "VK_KHR_dedicated_allocation";

VK_EXT_DEBUG_UTILS_SPEC_VERSION :: 2;

VK_EXT_DEBUG_UTILS_EXTENSION_NAME :: "VK_EXT_debug_utils";

VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION :: 3;

VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME :: "VK_ANDROID_external_memory_android_hardware_buffer";

VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION :: 2;

VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME :: "VK_EXT_sampler_filter_minmax";

VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION :: 1;

VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME :: "VK_KHR_storage_buffer_storage_class";

VK_AMD_GPU_SHADER_INT16_SPEC_VERSION :: 2;

VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME :: "VK_AMD_gpu_shader_int16";

VK_AMD_EXTENSION_134_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_134_EXTENSION_NAME :: "VK_AMD_extension_134";

VK_AMD_EXTENSION_135_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_135_EXTENSION_NAME :: "VK_AMD_extension_135";

VK_AMD_EXTENSION_136_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_136_EXTENSION_NAME :: "VK_AMD_extension_136";

VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION :: 1;

VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME :: "VK_AMD_mixed_attachment_samples";

VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION :: 1;

VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME :: "VK_AMD_shader_fragment_mask";

VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION :: 1;

VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME :: "VK_EXT_inline_uniform_block";

VK_AMD_EXTENSION_140_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_140_EXTENSION_NAME :: "VK_AMD_extension_140";

VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION :: 1;

VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME :: "VK_EXT_shader_stencil_export";

VK_AMD_EXTENSION_142_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_142_EXTENSION_NAME :: "VK_AMD_extension_142";

VK_AMD_EXTENSION_143_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_143_EXTENSION_NAME :: "VK_AMD_extension_143";

VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION :: 1;

VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME :: "VK_EXT_sample_locations";

VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION :: 1;

VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME :: "VK_KHR_relaxed_block_layout";

VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION :: 1;

VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME :: "VK_KHR_get_memory_requirements2";

VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION :: 1;

VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME :: "VK_KHR_image_format_list";

VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION :: 2;

VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME :: "VK_EXT_blend_operation_advanced";

VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION :: 1;

VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME :: "VK_NV_fragment_coverage_to_color";

VK_KHR_RAY_TRACING_SPEC_VERSION :: 8;

VK_KHR_RAY_TRACING_EXTENSION_NAME :: "VK_KHR_ray_tracing";

VK_NV_EXTENSION_152_SPEC_VERSION :: 0;

VK_NV_EXTENSION_152_EXTENSION_NAME :: "VK_NV_extension_152";

VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION :: 1;

VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME :: "VK_NV_framebuffer_mixed_samples";

VK_NV_FILL_RECTANGLE_SPEC_VERSION :: 1;

VK_NV_FILL_RECTANGLE_EXTENSION_NAME :: "VK_NV_fill_rectangle";

VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION :: 1;

VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME :: "VK_NV_shader_sm_builtins";

VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION :: 1;

VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME :: "VK_EXT_post_depth_coverage";

VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION :: 14;

VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME :: "VK_KHR_sampler_ycbcr_conversion";

VK_KHR_BIND_MEMORY_2_SPEC_VERSION :: 1;

VK_KHR_BIND_MEMORY_2_EXTENSION_NAME :: "VK_KHR_bind_memory2";

VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION :: 1;

VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME :: "VK_EXT_image_drm_format_modifier";

VK_EXT_EXTENSION_160_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_160_EXTENSION_NAME :: "VK_EXT_extension_160";

VK_EXT_VALIDATION_CACHE_SPEC_VERSION :: 1;

VK_EXT_VALIDATION_CACHE_EXTENSION_NAME :: "VK_EXT_validation_cache";

VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION :: 2;

VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME :: "VK_EXT_descriptor_indexing";

VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION :: 1;

VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME :: "VK_EXT_shader_viewport_index_layer";

VK_EXT_EXTENSION_164_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_164_EXTENSION_NAME :: "VK_NV_extension_164";

VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION :: 3;

VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME :: "VK_NV_shading_rate_image";

VK_NV_RAY_TRACING_SPEC_VERSION :: 3;

VK_NV_RAY_TRACING_EXTENSION_NAME :: "VK_NV_ray_tracing";

VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION :: 2;

VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME :: "VK_NV_representative_fragment_test";

VK_EXT_EXTENSION_168_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_168_EXTENSION_NAME :: "VK_NV_extension_168";

VK_KHR_MAINTENANCE3_SPEC_VERSION :: 1;

VK_KHR_MAINTENANCE3_EXTENSION_NAME :: "VK_KHR_maintenance3";

VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION :: 1;

VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME :: "VK_KHR_draw_indirect_count";

VK_EXT_FILTER_CUBIC_SPEC_VERSION :: 3;

VK_EXT_FILTER_CUBIC_EXTENSION_NAME :: "VK_EXT_filter_cubic";

VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION :: 4;

VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME :: "VK_QCOM_render_pass_shader_resolve";

VK_QCOM_extension_173_SPEC_VERSION :: 0;

VK_QCOM_extension_173_EXTENSION_NAME :: "VK_QCOM_extension_173";

VK_QCOM_extension_174_SPEC_VERSION :: 0;

VK_QCOM_extension_174_EXTENSION_NAME :: "VK_QCOM_extension_174";

VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION :: 2;

VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME :: "VK_EXT_global_priority";

VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION :: 1;

VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME :: "VK_KHR_shader_subgroup_extended_types";

VK_KHR_EXTENSION_177_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_177_EXTENSION_NAME :: "VK_KHR_extension_177";

VK_KHR_8BIT_STORAGE_SPEC_VERSION :: 1;

VK_KHR_8BIT_STORAGE_EXTENSION_NAME :: "VK_KHR_8bit_storage";

VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION :: 1;

VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME :: "VK_EXT_external_memory_host";

VK_AMD_BUFFER_MARKER_SPEC_VERSION :: 1;

VK_AMD_BUFFER_MARKER_EXTENSION_NAME :: "VK_AMD_buffer_marker";

VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION :: 1;

VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME :: "VK_KHR_shader_atomic_int64";

VK_KHR_SHADER_CLOCK_SPEC_VERSION :: 1;

VK_KHR_SHADER_CLOCK_EXTENSION_NAME :: "VK_KHR_shader_clock";

VK_KHR_EXTENSION_183_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_183_EXTENSION_NAME :: "VK_AMD_extension_183";

VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION :: 1;

VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME :: "VK_AMD_pipeline_compiler_control";

VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION :: 1;

VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME :: "VK_EXT_calibrated_timestamps";

VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION :: 2;

VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME :: "VK_AMD_shader_core_properties";

VK_KHR_EXTENSION_187_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_187_EXTENSION_NAME :: "VK_AMD_extension_187";

VK_KHR_EXTENSION_188_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_188_EXTENSION_NAME :: "VK_AMD_extension_188";

VK_KHR_EXTENSION_189_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_189_EXTENSION_NAME :: "VK_AMD_extension_189";

VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION :: 1;

VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME :: "VK_AMD_memory_overallocation_behavior";

VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION :: 3;

VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME :: "VK_EXT_vertex_attribute_divisor";

VK_GGP_FRAME_TOKEN_SPEC_VERSION :: 1;

VK_GGP_FRAME_TOKEN_EXTENSION_NAME :: "VK_GGP_frame_token";

VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION :: 1;

VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME :: "VK_EXT_pipeline_creation_feedback";

VK_GOOGLE_EXTENSION_194_SPEC_VERSION :: 0;

VK_GOOGLE_EXTENSION_194_EXTENSION_NAME :: "VK_GOOGLE_extension_194";

VK_GOOGLE_EXTENSION_195_SPEC_VERSION :: 0;

VK_GOOGLE_EXTENSION_195_EXTENSION_NAME :: "VK_GOOGLE_extension_195";

VK_GOOGLE_EXTENSION_196_SPEC_VERSION :: 0;

VK_GOOGLE_EXTENSION_196_EXTENSION_NAME :: "VK_GOOGLE_extension_196";

VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION :: 1;

VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME :: "VK_KHR_driver_properties";

VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION :: 4;

VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME :: "VK_KHR_shader_float_controls";

VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION :: 1;

VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME :: "VK_NV_shader_subgroup_partitioned";

VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION :: 1;

VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME :: "VK_KHR_depth_stencil_resolve";

VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION :: 1;

VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME :: "VK_KHR_swapchain_mutable_format";

VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION :: 1;

VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME :: "VK_NV_compute_shader_derivatives";

VK_NV_MESH_SHADER_SPEC_VERSION :: 1;

VK_NV_MESH_SHADER_EXTENSION_NAME :: "VK_NV_mesh_shader";

VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION :: 1;

VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME :: "VK_NV_fragment_shader_barycentric";

VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION :: 2;

VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME :: "VK_NV_shader_image_footprint";

VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION :: 1;

VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME :: "VK_NV_scissor_exclusive";

VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION :: 2;

VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME :: "VK_NV_device_diagnostic_checkpoints";

VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION :: 2;

VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME :: "VK_KHR_timeline_semaphore";

VK_KHR_EXTENSION_209_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_209_EXTENSION_NAME :: "VK_KHR_extension_209";

VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION :: 1;

VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME :: "VK_INTEL_shader_integer_functions2";

VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION :: 2;

VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME :: "VK_INTEL_performance_query";

VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION :: 3;

VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME :: "VK_KHR_vulkan_memory_model";

VK_EXT_PCI_BUS_INFO_SPEC_VERSION :: 2;

VK_EXT_PCI_BUS_INFO_EXTENSION_NAME :: "VK_EXT_pci_bus_info";

VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION :: 1;

VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME :: "VK_AMD_display_native_hdr";

VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION :: 1;

VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME :: "VK_FUCHSIA_imagepipe_surface";

VK_KHR_EXTENSION_216_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_216_EXTENSION_NAME :: "VK_KHR_extension_216";

VK_KHR_EXTENSION_217_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_217_EXTENSION_NAME :: "VK_KHR_extension_217";

VK_EXT_METAL_SURFACE_SPEC_VERSION :: 1;

VK_EXT_METAL_SURFACE_EXTENSION_NAME :: "VK_EXT_metal_surface";

VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION :: 1;

VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME :: "VK_EXT_fragment_density_map";

VK_EXT_EXTENSION_220_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_220_EXTENSION_NAME :: "VK_EXT_extension_220";

VK_KHR_EXTENSION_221_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_221_EXTENSION_NAME :: "VK_KHR_extension_221";

VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION :: 1;

VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME :: "VK_EXT_scalar_block_layout";

VK_EXT_EXTENSION_223_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_223_EXTENSION_NAME :: "VK_EXT_extension_223";

VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION :: 1;

VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME :: "VK_GOOGLE_hlsl_functionality1";

VK_GOOGLE_DECORATE_STRING_SPEC_VERSION :: 1;

VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME :: "VK_GOOGLE_decorate_string";

VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION :: 2;

VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME :: "VK_EXT_subgroup_size_control";

VK_AMD_EXTENSION_227_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_227_EXTENSION_NAME :: "VK_AMD_extension_227";

VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION :: 1;

VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME :: "VK_AMD_shader_core_properties2";

VK_AMD_EXTENSION_229_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_229_EXTENSION_NAME :: "VK_AMD_extension_229";

VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION :: 1;

VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME :: "VK_AMD_device_coherent_memory";

VK_AMD_EXTENSION_231_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_231_EXTENSION_NAME :: "VK_AMD_extension_231";

VK_AMD_EXTENSION_232_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_232_EXTENSION_NAME :: "VK_AMD_extension_232";

VK_AMD_EXTENSION_233_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_233_EXTENSION_NAME :: "VK_AMD_extension_233";

VK_AMD_EXTENSION_234_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_234_EXTENSION_NAME :: "VK_AMD_extension_234";

VK_AMD_EXTENSION_235_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_235_EXTENSION_NAME :: "VK_AMD_extension_235";

VK_AMD_EXTENSION_236_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_236_EXTENSION_NAME :: "VK_AMD_extension_236";

VK_KHR_SPIRV_1_4_SPEC_VERSION :: 1;

VK_KHR_SPIRV_1_4_EXTENSION_NAME :: "VK_KHR_spirv_1_4";

VK_EXT_MEMORY_BUDGET_SPEC_VERSION :: 1;

VK_EXT_MEMORY_BUDGET_EXTENSION_NAME :: "VK_EXT_memory_budget";

VK_EXT_MEMORY_PRIORITY_SPEC_VERSION :: 1;

VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME :: "VK_EXT_memory_priority";

VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION :: 1;

VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME :: "VK_KHR_surface_protected_capabilities";

VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION :: 1;

VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME :: "VK_NV_dedicated_allocation_image_aliasing";

VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION :: 1;

VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME :: "VK_KHR_separate_depth_stencil_layouts";

VK_INTEL_EXTENSION_243_SPEC_VERSION :: 0;

VK_INTEL_EXTENSION_243_EXTENSION_NAME :: "VK_INTEL_extension_243";

VK_MESA_EXTENSION_244_SPEC_VERSION :: 0;

VK_MESA_EXTENSION_244_EXTENSION_NAME :: "VK_MESA_extension_244";

VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION :: 2;

VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME :: "VK_EXT_buffer_device_address";

VK_EXT_TOOLING_INFO_SPEC_VERSION :: 1;

VK_EXT_TOOLING_INFO_EXTENSION_NAME :: "VK_EXT_tooling_info";

VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION :: 1;

VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME :: "VK_EXT_separate_stencil_usage";

VK_EXT_VALIDATION_FEATURES_SPEC_VERSION :: 3;

VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME :: "VK_EXT_validation_features";

VK_KHR_EXTENSION_249_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_249_EXTENSION_NAME :: "VK_KHR_extension_249";

VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION :: 1;

VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME :: "VK_NV_cooperative_matrix";

VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION :: 1;

VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME :: "VK_NV_coverage_reduction_mode";

VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION :: 1;

VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME :: "VK_EXT_fragment_shader_interlock";

VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION :: 1;

VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME :: "VK_EXT_ycbcr_image_arrays";

VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION :: 1;

VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME :: "VK_KHR_uniform_buffer_standard_layout";

VK_EXT_EXTENSION_255_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_255_EXTENSION_NAME :: "VK_EXT_extension_255";

VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION :: 4;

VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME :: "VK_EXT_full_screen_exclusive";

VK_EXT_HEADLESS_SURFACE_SPEC_VERSION :: 1;

VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME :: "VK_EXT_headless_surface";

VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION :: 1;

VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME :: "VK_KHR_buffer_device_address";

VK_EXT_EXTENSION_259_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_259_EXTENSION_NAME :: "VK_EXT_extension_259";

VK_EXT_LINE_RASTERIZATION_SPEC_VERSION :: 1;

VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME :: "VK_EXT_line_rasterization";

VK_NV_EXTENSION_261_SPEC_VERSION :: 0;

VK_NV_EXTENSION_261_EXTENSION_NAME :: "VK_NV_extension_261";

VK_EXT_HOST_QUERY_RESET_SPEC_VERSION :: 1;

VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME :: "VK_EXT_host_query_reset";

VK_GOOGLE_EXTENSION_263_SPEC_VERSION :: 0;

VK_GOOGLE_EXTENSION_263_EXTENSION_NAME :: "VK_GGP_extension_263";

VK_BRCM_EXTENSION_264_SPEC_VERSION :: 0;

VK_BRCM_EXTENSION_264_EXTENSION_NAME :: "VK_BRCM_extension_264";

VK_BRCM_EXTENSION_265_SPEC_VERSION :: 0;

VK_BRCM_EXTENSION_265_EXTENSION_NAME :: "VK_BRCM_extension_265";

VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION :: 1;

VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME :: "VK_EXT_index_type_uint8";

VK_EXT_EXTENSION_267_SPEC_VERSION :: 0;

VK_EXT_extension_267 :: "VK_EXT_extension_267";

VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION :: 1;

VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME :: "VK_EXT_extended_dynamic_state";

VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION :: 3;

VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME :: "VK_KHR_deferred_host_operations";

VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION :: 1;

VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME :: "VK_KHR_pipeline_executable_properties";

VK_INTEL_EXTENSION_271_SPEC_VERSION :: 0;

VK_INTEL_extension_271 :: "VK_KHR_extension_271";

VK_INTEL_EXTENSION_272_SPEC_VERSION :: 0;

VK_INTEL_extension_272 :: "VK_KHR_extension_272";

VK_INTEL_EXTENSION_273_SPEC_VERSION :: 0;

VK_INTEL_extension_273 :: "VK_KHR_extension_273";

VK_INTEL_EXTENSION_274_SPEC_VERSION :: 0;

VK_INTEL_extension_274 :: "VK_KHR_extension_274";

VK_KHR_EXTENSION_275_SPEC_VERSION :: 0;

VK_KHR_extension_275 :: "VK_KHR_extension_275";

VK_KHR_EXTENSION_276_SPEC_VERSION :: 0;

VK_KHR_extension_276 :: "VK_KHR_extension_276";

VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION :: 1;

VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME :: "VK_EXT_shader_demote_to_helper_invocation";

VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION :: 3;

VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME :: "VK_NV_device_generated_commands";

VK_NV_EXTENSION_279_SPEC_VERSION :: 0;

VK_NV_extension_279 :: "VK_NV_extension_279";

VK_KHR_EXTENSION_280_SPEC_VERSION :: 0;

VK_KHR_extension_280 :: "VK_KHR_extension_280";

VK_ARM_EXTENSION_281_SPEC_VERSION :: 0;

VK_ARM_extension_281 :: "VK_ARM_extension_281";

VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION :: 1;

VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME :: "VK_EXT_texel_buffer_alignment";

VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION :: 1;

VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME :: "VK_QCOM_render_pass_transform";

VK_EXT_EXTENSION_284_SPEC_VERSION :: 0;

VK_EXT_extension_284 :: "VK_EXT_extension_284";

VK_EXT_EXTENSION_285_SPEC_VERSION :: 0;

VK_EXT_extension_285 :: "VK_EXT_extension_285";

VK_EXT_EXTENSION_286_SPEC_VERSION :: 0;

VK_EXT_extension_286 :: "VK_EXT_extension_286";

VK_EXT_ROBUSTNESS_2_SPEC_VERSION :: 1;

VK_EXT_ROBUSTNESS_2_EXTENSION_NAME :: "VK_EXT_robustness2";

VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION :: 12;

VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME :: "VK_EXT_custom_border_color";

VK_EXT_EXTENSION_289_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_289_EXTENSION_NAME :: "VK_EXT_extension_289";

VK_GOOGLE_USER_TYPE_SPEC_VERSION :: 1;

VK_GOOGLE_USER_TYPE_EXTENSION_NAME :: "VK_GOOGLE_user_type";

VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION :: 1;

VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME :: "VK_KHR_pipeline_library";

VK_NV_EXTENSION_292_SPEC_VERSION :: 0;

VK_NV_EXTENSION_292_EXTENSION_NAME :: "VK_NV_extension_292";

VK_NV_EXTENSION_293_SPEC_VERSION :: 0;

VK_NV_EXTENSION_293_EXTENSION_NAME :: "VK_NV_extension_293";

VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION :: 1;

VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME :: "VK_KHR_shader_non_semantic_info";

VK_KHR_EXTENSION_295_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_295_EXTENSION_NAME :: "VK_KHR_extension_295";

VK_EXT_PRIVATE_DATA_SPEC_VERSION :: 1;

VK_EXT_PRIVATE_DATA_EXTENSION_NAME :: "VK_EXT_private_data";

VK_KHR_EXTENSION_297_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_297_EXTENSION_NAME :: "VK_KHR_extension_297";

VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION :: 3;

VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME :: "VK_EXT_pipeline_creation_cache_control";

VK_KHR_EXTENSION_299_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_299_EXTENSION_NAME :: "VK_KHR_extension_299";

VK_KHR_EXTENSION_300_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_300_EXTENSION_NAME :: "VK_KHR_extension_300";

VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION :: 1;

VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME :: "VK_NV_device_diagnostics_config";

VK_QCOM_render_pass_store_ops_SPEC_VERSION :: 2;

VK_QCOM_render_pass_store_ops_EXTENSION_NAME :: "VK_QCOM_render_pass_store_ops";

VK_QCOM_extension_303_SPEC_VERSION :: 0;

VK_QCOM_extension_303_EXTENSION_NAME :: "VK_QCOM_extension_303";

VK_QCOM_extension_304_SPEC_VERSION :: 0;

VK_QCOM_extension_304_EXTENSION_NAME :: "VK_QCOM_extension_304";

VK_QCOM_extension_305_SPEC_VERSION :: 0;

VK_QCOM_extension_305_EXTENSION_NAME :: "VK_QCOM_extension_305";

VK_QCOM_extension_306_SPEC_VERSION :: 0;

VK_QCOM_extension_306_EXTENSION_NAME :: "VK_QCOM_extension_306";

VK_QCOM_extension_307_SPEC_VERSION :: 0;

VK_QCOM_extension_307_EXTENSION_NAME :: "VK_QCOM_extension_307";

VK_NV_EXTENSION_308_SPEC_VERSION :: 0;

VK_NV_EXTENSION_308_EXTENSION_NAME :: "VK_NV_extension_308";

VK_KHR_EXTENSION_309_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_309_EXTENSION_NAME :: "VK_KHR_extension_309";

VK_QCOM_extension_310_SPEC_VERSION :: 0;

VK_QCOM_extension_310_EXTENSION_NAME :: "VK_QCOM_extension_310";

VK_NV_EXTENSION_311_SPEC_VERSION :: 0;

VK_NV_EXTENSION_311_EXTENSION_NAME :: "VK_NV_extension_311";

VK_EXT_EXTENSION_312_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_312_EXTENSION_NAME :: "VK_EXT_extension_312";

VK_EXT_EXTENSION_313_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_313_EXTENSION_NAME :: "VK_EXT_extension_313";

VK_AMD_EXTENSION_314_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_314_EXTENSION_NAME :: "VK_AMD_extension_314";

VK_AMD_EXTENSION_315_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_315_EXTENSION_NAME :: "VK_AMD_extension_315";

VK_AMD_EXTENSION_316_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_316_EXTENSION_NAME :: "VK_AMD_extension_316";

VK_AMD_EXTENSION_317_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_317_EXTENSION_NAME :: "VK_AMD_extension_317";

VK_AMD_EXTENSION_318_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_318_EXTENSION_NAME :: "VK_AMD_extension_318";

VK_AMD_EXTENSION_319_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_319_EXTENSION_NAME :: "VK_AMD_extension_319";

VK_AMD_EXTENSION_320_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_320_EXTENSION_NAME :: "VK_AMD_extension_320";

VK_AMD_EXTENSION_321_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_321_EXTENSION_NAME :: "VK_AMD_extension_321";

VK_AMD_EXTENSION_322_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_322_EXTENSION_NAME :: "VK_AMD_extension_322";

VK_AMD_EXTENSION_323_SPEC_VERSION :: 0;

VK_AMD_EXTENSION_323_EXTENSION_NAME :: "VK_AMD_extension_323";

VK_KHR_EXTENSION_324_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_324_EXTENSION_NAME :: "VK_KHR_extension_324";

VK_KHR_EXTENSION_325_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_325_EXTENSION_NAME :: "VK_KHR_extension_325";

VK_KHR_EXTENSION_326_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_326_EXTENSION_NAME :: "VK_KHR_extension_326";

VK_NV_EXTENSION_327_SPEC_VERSION :: 0;

VK_NV_EXTENSION_327_EXTENSION_NAME :: "VK_NV_extension_327";

VK_NV_EXTENSION_328_SPEC_VERSION :: 0;

VK_NV_EXTENSION_328_EXTENSION_NAME :: "VK_NV_extension_328";

VK_NV_EXTENSION_329_SPEC_VERSION :: 0;

VK_NV_EXTENSION_329_EXTENSION_NAME :: "VK_NV_extension_329";

VK_NV_EXTENSION_330_SPEC_VERSION :: 0;

VK_NV_EXTENSION_330_EXTENSION_NAME :: "VK_NV_extension_330";

VK_NV_EXTENSION_331_SPEC_VERSION :: 0;

VK_NV_EXTENSION_331_EXTENSION_NAME :: "VK_NV_extension_331";

VK_NV_EXTENSION_332_SPEC_VERSION :: 0;

VK_NV_EXTENSION_332_EXTENSION_NAME :: "VK_NV_extension_332";

VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION :: 1;

VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME :: "VK_EXT_fragment_density_map2";

VK_EXT_EXTENSION_334_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_334_EXTENSION_NAME :: "VK_EXT_extension_334";

VK_KHR_EXTENSION_335_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_335_EXTENSION_NAME :: "VK_KHR_extension_335";

VK_EXT_EXTENSION_336_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_336_EXTENSION_NAME :: "VK_EXT_extension_336";

VK_KHR_EXTENSION_337_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_337_EXTENSION_NAME :: "VK_KHR_extension_337";

VK_KHR_EXTENSION_338_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_338_EXTENSION_NAME :: "VK_KHR_extension_338";

VK_ARM_EXTENSION_339_SPEC_VERSION :: 0;

VK_ARM_EXTENSION_339_EXTENSION_NAME :: "VK_ARM_extension_339";

VK_EXT_EXTENSION_340_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_340_EXTENSION_NAME :: "VK_EXT_extension_340";

VK_EXT_EXTENSION_341_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_341_EXTENSION_NAME :: "VK_EXT_extension_341";

VK_EXT_EXTENSION_342_SPEC_VERSION :: 0;

VK_EXT_EXTENSION_342_EXTENSION_NAME :: "VK_EXT_extension_342";

VK_ARM_EXTENSION_343_SPEC_VERSION :: 0;

VK_ARM_EXTENSION_343_EXTENSION_NAME :: "VK_ARM_extension_343";

VK_ARM_EXTENSION_344_SPEC_VERSION :: 0;

VK_ARM_EXTENSION_344_EXTENSION_NAME :: "VK_ARM_extension_344";

VK_ARM_EXTENSION_345_SPEC_VERSION :: 0;

VK_ARM_EXTENSION_345_EXTENSION_NAME :: "VK_ARM_extension_345";

VK_NV_EXTENSION_346_SPEC_VERSION :: 0;

VK_NV_EXTENSION_346_EXTENSION_NAME :: "VK_NV_extension_346";

VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION :: 1;

VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME :: "VK_EXT_directfb_surface";

VK_KHR_EXTENSION_348_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_348_EXTENSION_NAME :: "VK_KHR_extension_348";

VK_KHR_EXTENSION_349_SPEC_VERSION :: 0;

VK_KHR_EXTENSION_349_EXTENSION_NAME :: "VK_KHR_extension_349";

VkImageLayout :: enum c.int {
VK_IMAGE_LAYOUT_UNDEFINED = 0,
VK_IMAGE_LAYOUT_GENERAL = 1,
VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
}

VkAttachmentLoadOp :: enum c.int {
VK_ATTACHMENT_LOAD_OP_LOAD = 0,
VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
}

VkAttachmentStoreOp :: enum c.int {
VK_ATTACHMENT_STORE_OP_STORE = 0,
VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000,
}

VkImageType :: enum c.int {
VK_IMAGE_TYPE_1D = 0,
VK_IMAGE_TYPE_2D = 1,
VK_IMAGE_TYPE_3D = 2,
}

VkImageTiling :: enum c.int {
VK_IMAGE_TILING_OPTIMAL = 0,
VK_IMAGE_TILING_LINEAR = 1,
VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
}

VkImageViewType :: enum c.int {
VK_IMAGE_VIEW_TYPE_1D = 0,
VK_IMAGE_VIEW_TYPE_2D = 1,
VK_IMAGE_VIEW_TYPE_3D = 2,
VK_IMAGE_VIEW_TYPE_CUBE = 3,
VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
}

VkCommandBufferLevel :: enum c.int {
VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
}

VkComponentSwizzle :: enum c.int {
VK_COMPONENT_SWIZZLE_IDENTITY = 0,
VK_COMPONENT_SWIZZLE_ZERO = 1,
VK_COMPONENT_SWIZZLE_ONE = 2,
VK_COMPONENT_SWIZZLE_R = 3,
VK_COMPONENT_SWIZZLE_G = 4,
VK_COMPONENT_SWIZZLE_B = 5,
VK_COMPONENT_SWIZZLE_A = 6,
}

VkDescriptorType :: enum c.int {
VK_DESCRIPTOR_TYPE_SAMPLER = 0,
VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000,
VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR,
}

VkQueryType :: enum c.int {
VK_QUERY_TYPE_OCCLUSION = 0,
VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
VK_QUERY_TYPE_TIMESTAMP = 2,
VK_QUERY_TYPE_RESERVED_8 = 1000023008,
VK_QUERY_TYPE_RESERVED_4 = 1000024004,
VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000165000,
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150000,
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR,
VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
}

VkBorderColor :: enum c.int {
VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
}

VkPipelineBindPoint :: enum c.int {
VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
VK_PIPELINE_BIND_POINT_COMPUTE = 1,
VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
}

VkPipelineCacheHeaderVersion :: enum c.int {
VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
}

VkPipelineCacheCreateFlagBits :: enum c.int {
VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1<<0,
}

VkPrimitiveTopology :: enum c.int {
VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
}

VkSharingMode :: enum c.int {
VK_SHARING_MODE_EXCLUSIVE = 0,
VK_SHARING_MODE_CONCURRENT = 1,
}

VkIndexType :: enum c.int {
VK_INDEX_TYPE_UINT16 = 0,
VK_INDEX_TYPE_UINT32 = 1,
VK_INDEX_TYPE_NONE_KHR = 1000165000,
VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR,
VK_INDEX_TYPE_UINT8_EXT = 1000265000,
}

VkFilter :: enum c.int {
VK_FILTER_NEAREST = 0,
VK_FILTER_LINEAR = 1,
VK_FILTER_CUBIC_IMG = 1000015000,
VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG,
}

VkSamplerMipmapMode :: enum c.int {
VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
}

VkSamplerAddressMode :: enum c.int {
VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
}

VkCompareOp :: enum c.int {
VK_COMPARE_OP_NEVER = 0,
VK_COMPARE_OP_LESS = 1,
VK_COMPARE_OP_EQUAL = 2,
VK_COMPARE_OP_LESS_OR_EQUAL = 3,
VK_COMPARE_OP_GREATER = 4,
VK_COMPARE_OP_NOT_EQUAL = 5,
VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
VK_COMPARE_OP_ALWAYS = 7,
}

VkPolygonMode :: enum c.int {
VK_POLYGON_MODE_FILL = 0,
VK_POLYGON_MODE_LINE = 1,
VK_POLYGON_MODE_POINT = 2,
VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
}

VkCullModeFlagBits :: enum c.int {
VK_CULL_MODE_NONE = 0,
VK_CULL_MODE_FRONT_BIT = 1<<0,
VK_CULL_MODE_BACK_BIT = 1<<1,
VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
}

VkFrontFace :: enum c.int {
VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
VK_FRONT_FACE_CLOCKWISE = 1,
}

VkBlendFactor :: enum c.int {
VK_BLEND_FACTOR_ZERO = 0,
VK_BLEND_FACTOR_ONE = 1,
VK_BLEND_FACTOR_SRC_COLOR = 2,
VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
VK_BLEND_FACTOR_DST_COLOR = 4,
VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
VK_BLEND_FACTOR_SRC_ALPHA = 6,
VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
VK_BLEND_FACTOR_DST_ALPHA = 8,
VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
VK_BLEND_FACTOR_SRC1_COLOR = 15,
VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
VK_BLEND_FACTOR_SRC1_ALPHA = 17,
VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
}

VkBlendOp :: enum c.int {
VK_BLEND_OP_ADD = 0,
VK_BLEND_OP_SUBTRACT = 1,
VK_BLEND_OP_REVERSE_SUBTRACT = 2,
VK_BLEND_OP_MIN = 3,
VK_BLEND_OP_MAX = 4,
VK_BLEND_OP_ZERO_EXT = 1000148000,
VK_BLEND_OP_SRC_EXT = 1000148001,
VK_BLEND_OP_DST_EXT = 1000148002,
VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
VK_BLEND_OP_DST_OVER_EXT = 1000148004,
VK_BLEND_OP_SRC_IN_EXT = 1000148005,
VK_BLEND_OP_DST_IN_EXT = 1000148006,
VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
VK_BLEND_OP_DST_OUT_EXT = 1000148008,
VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
VK_BLEND_OP_XOR_EXT = 1000148011,
VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
VK_BLEND_OP_SCREEN_EXT = 1000148013,
VK_BLEND_OP_OVERLAY_EXT = 1000148014,
VK_BLEND_OP_DARKEN_EXT = 1000148015,
VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
VK_BLEND_OP_COLORBURN_EXT = 1000148018,
VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
VK_BLEND_OP_INVERT_EXT = 1000148023,
VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
VK_BLEND_OP_HARDMIX_EXT = 1000148030,
VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
VK_BLEND_OP_PLUS_EXT = 1000148035,
VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
VK_BLEND_OP_MINUS_EXT = 1000148039,
VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
VK_BLEND_OP_CONTRAST_EXT = 1000148041,
VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
VK_BLEND_OP_RED_EXT = 1000148043,
VK_BLEND_OP_GREEN_EXT = 1000148044,
VK_BLEND_OP_BLUE_EXT = 1000148045,
}

VkStencilOp :: enum c.int {
VK_STENCIL_OP_KEEP = 0,
VK_STENCIL_OP_ZERO = 1,
VK_STENCIL_OP_REPLACE = 2,
VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
VK_STENCIL_OP_INVERT = 5,
VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
}

VkLogicOp :: enum c.int {
VK_LOGIC_OP_CLEAR = 0,
VK_LOGIC_OP_AND = 1,
VK_LOGIC_OP_AND_REVERSE = 2,
VK_LOGIC_OP_COPY = 3,
VK_LOGIC_OP_AND_INVERTED = 4,
VK_LOGIC_OP_NO_OP = 5,
VK_LOGIC_OP_XOR = 6,
VK_LOGIC_OP_OR = 7,
VK_LOGIC_OP_NOR = 8,
VK_LOGIC_OP_EQUIVALENT = 9,
VK_LOGIC_OP_INVERT = 10,
VK_LOGIC_OP_OR_REVERSE = 11,
VK_LOGIC_OP_COPY_INVERTED = 12,
VK_LOGIC_OP_OR_INVERTED = 13,
VK_LOGIC_OP_NAND = 14,
VK_LOGIC_OP_SET = 15,
}

VkInternalAllocationType :: enum c.int {
VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
}

VkSystemAllocationScope :: enum c.int {
VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
}

VkPhysicalDeviceType :: enum c.int {
VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
}

VkVertexInputRate :: enum c.int {
VK_VERTEX_INPUT_RATE_VERTEX = 0,
VK_VERTEX_INPUT_RATE_INSTANCE = 1,
}

VkFormat :: enum c.int {
VK_FORMAT_UNDEFINED = 0,
VK_FORMAT_R4G4_UNORM_PACK8 = 1,
VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
VK_FORMAT_R8_UNORM = 9,
VK_FORMAT_R8_SNORM = 10,
VK_FORMAT_R8_USCALED = 11,
VK_FORMAT_R8_SSCALED = 12,
VK_FORMAT_R8_UINT = 13,
VK_FORMAT_R8_SINT = 14,
VK_FORMAT_R8_SRGB = 15,
VK_FORMAT_R8G8_UNORM = 16,
VK_FORMAT_R8G8_SNORM = 17,
VK_FORMAT_R8G8_USCALED = 18,
VK_FORMAT_R8G8_SSCALED = 19,
VK_FORMAT_R8G8_UINT = 20,
VK_FORMAT_R8G8_SINT = 21,
VK_FORMAT_R8G8_SRGB = 22,
VK_FORMAT_R8G8B8_UNORM = 23,
VK_FORMAT_R8G8B8_SNORM = 24,
VK_FORMAT_R8G8B8_USCALED = 25,
VK_FORMAT_R8G8B8_SSCALED = 26,
VK_FORMAT_R8G8B8_UINT = 27,
VK_FORMAT_R8G8B8_SINT = 28,
VK_FORMAT_R8G8B8_SRGB = 29,
VK_FORMAT_B8G8R8_UNORM = 30,
VK_FORMAT_B8G8R8_SNORM = 31,
VK_FORMAT_B8G8R8_USCALED = 32,
VK_FORMAT_B8G8R8_SSCALED = 33,
VK_FORMAT_B8G8R8_UINT = 34,
VK_FORMAT_B8G8R8_SINT = 35,
VK_FORMAT_B8G8R8_SRGB = 36,
VK_FORMAT_R8G8B8A8_UNORM = 37,
VK_FORMAT_R8G8B8A8_SNORM = 38,
VK_FORMAT_R8G8B8A8_USCALED = 39,
VK_FORMAT_R8G8B8A8_SSCALED = 40,
VK_FORMAT_R8G8B8A8_UINT = 41,
VK_FORMAT_R8G8B8A8_SINT = 42,
VK_FORMAT_R8G8B8A8_SRGB = 43,
VK_FORMAT_B8G8R8A8_UNORM = 44,
VK_FORMAT_B8G8R8A8_SNORM = 45,
VK_FORMAT_B8G8R8A8_USCALED = 46,
VK_FORMAT_B8G8R8A8_SSCALED = 47,
VK_FORMAT_B8G8R8A8_UINT = 48,
VK_FORMAT_B8G8R8A8_SINT = 49,
VK_FORMAT_B8G8R8A8_SRGB = 50,
VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
VK_FORMAT_R16_UNORM = 70,
VK_FORMAT_R16_SNORM = 71,
VK_FORMAT_R16_USCALED = 72,
VK_FORMAT_R16_SSCALED = 73,
VK_FORMAT_R16_UINT = 74,
VK_FORMAT_R16_SINT = 75,
VK_FORMAT_R16_SFLOAT = 76,
VK_FORMAT_R16G16_UNORM = 77,
VK_FORMAT_R16G16_SNORM = 78,
VK_FORMAT_R16G16_USCALED = 79,
VK_FORMAT_R16G16_SSCALED = 80,
VK_FORMAT_R16G16_UINT = 81,
VK_FORMAT_R16G16_SINT = 82,
VK_FORMAT_R16G16_SFLOAT = 83,
VK_FORMAT_R16G16B16_UNORM = 84,
VK_FORMAT_R16G16B16_SNORM = 85,
VK_FORMAT_R16G16B16_USCALED = 86,
VK_FORMAT_R16G16B16_SSCALED = 87,
VK_FORMAT_R16G16B16_UINT = 88,
VK_FORMAT_R16G16B16_SINT = 89,
VK_FORMAT_R16G16B16_SFLOAT = 90,
VK_FORMAT_R16G16B16A16_UNORM = 91,
VK_FORMAT_R16G16B16A16_SNORM = 92,
VK_FORMAT_R16G16B16A16_USCALED = 93,
VK_FORMAT_R16G16B16A16_SSCALED = 94,
VK_FORMAT_R16G16B16A16_UINT = 95,
VK_FORMAT_R16G16B16A16_SINT = 96,
VK_FORMAT_R16G16B16A16_SFLOAT = 97,
VK_FORMAT_R32_UINT = 98,
VK_FORMAT_R32_SINT = 99,
VK_FORMAT_R32_SFLOAT = 100,
VK_FORMAT_R32G32_UINT = 101,
VK_FORMAT_R32G32_SINT = 102,
VK_FORMAT_R32G32_SFLOAT = 103,
VK_FORMAT_R32G32B32_UINT = 104,
VK_FORMAT_R32G32B32_SINT = 105,
VK_FORMAT_R32G32B32_SFLOAT = 106,
VK_FORMAT_R32G32B32A32_UINT = 107,
VK_FORMAT_R32G32B32A32_SINT = 108,
VK_FORMAT_R32G32B32A32_SFLOAT = 109,
VK_FORMAT_R64_UINT = 110,
VK_FORMAT_R64_SINT = 111,
VK_FORMAT_R64_SFLOAT = 112,
VK_FORMAT_R64G64_UINT = 113,
VK_FORMAT_R64G64_SINT = 114,
VK_FORMAT_R64G64_SFLOAT = 115,
VK_FORMAT_R64G64B64_UINT = 116,
VK_FORMAT_R64G64B64_SINT = 117,
VK_FORMAT_R64G64B64_SFLOAT = 118,
VK_FORMAT_R64G64B64A64_UINT = 119,
VK_FORMAT_R64G64B64A64_SINT = 120,
VK_FORMAT_R64G64B64A64_SFLOAT = 121,
VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
VK_FORMAT_D16_UNORM = 124,
VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
VK_FORMAT_D32_SFLOAT = 126,
VK_FORMAT_S8_UINT = 127,
VK_FORMAT_D16_UNORM_S8_UINT = 128,
VK_FORMAT_D24_UNORM_S8_UINT = 129,
VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
VK_FORMAT_BC2_UNORM_BLOCK = 135,
VK_FORMAT_BC2_SRGB_BLOCK = 136,
VK_FORMAT_BC3_UNORM_BLOCK = 137,
VK_FORMAT_BC3_SRGB_BLOCK = 138,
VK_FORMAT_BC4_UNORM_BLOCK = 139,
VK_FORMAT_BC4_SNORM_BLOCK = 140,
VK_FORMAT_BC5_UNORM_BLOCK = 141,
VK_FORMAT_BC5_SNORM_BLOCK = 142,
VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
VK_FORMAT_BC7_UNORM_BLOCK = 145,
VK_FORMAT_BC7_SRGB_BLOCK = 146,
VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000,
VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001,
VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002,
VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003,
VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004,
VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005,
VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006,
VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007,
VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008,
VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009,
VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010,
VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011,
VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012,
VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013,
VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,
VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,
VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,
VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,
VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,
VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,
VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT = 1000288000,
VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT = 1000288001,
VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT = 1000288002,
VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT = 1000288003,
VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT = 1000288004,
VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT = 1000288005,
VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT = 1000288006,
VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT = 1000288007,
VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT = 1000288008,
VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT = 1000288009,
VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT = 1000288010,
VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT = 1000288011,
VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT = 1000288012,
VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT = 1000288013,
VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT = 1000288014,
VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT = 1000288015,
VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT = 1000288016,
VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT = 1000288017,
VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT = 1000288018,
VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT = 1000288019,
VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT = 1000288020,
VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT = 1000288021,
VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT = 1000288022,
VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT = 1000288023,
VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT = 1000288024,
VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT = 1000288025,
VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT = 1000288026,
VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT = 1000288027,
VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT = 1000288028,
VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT = 1000288029,
}

VkStructureType :: enum c.int {
VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID = 1000010000,
VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID = 1000010001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID = 1000010002,
VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000,
VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001,
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002,
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003,
VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR = 1000165006,
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000165007,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR = 1000150001,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR = 1000150008,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR = 1000150009,
VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR = 1000150013,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR = 1000150014,
VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR,
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000,
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000,
VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR = 1000268000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001,
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000,
VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001,
VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
VK_STRUCTURE_TYPE_RESERVED_QCOM = 1000309000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
}

VkSubpassContents :: enum c.int {
VK_SUBPASS_CONTENTS_INLINE = 0,
VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
}

VkResult :: enum c.int {
VK_SUCCESS = 0,
VK_NOT_READY = 1,
VK_TIMEOUT = 2,
VK_EVENT_SET = 3,
VK_EVENT_RESET = 4,
VK_INCOMPLETE = 5,
VK_ERROR_OUT_OF_HOST_MEMORY = -1,
VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
VK_ERROR_INITIALIZATION_FAILED = -3,
VK_ERROR_DEVICE_LOST = -4,
VK_ERROR_MEMORY_MAP_FAILED = -5,
VK_ERROR_LAYER_NOT_PRESENT = -6,
VK_ERROR_EXTENSION_NOT_PRESENT = -7,
VK_ERROR_FEATURE_NOT_PRESENT = -8,
VK_ERROR_INCOMPATIBLE_DRIVER = -9,
VK_ERROR_TOO_MANY_OBJECTS = -10,
VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
VK_ERROR_FRAGMENTED_POOL = -12,
VK_ERROR_UNKNOWN = -13,
VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
VK_ERROR_INVALID_EXTERNAL_HANDLE = 1000072003,
VK_ERROR_FRAGMENTATION = 1000161000,
VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = 1000257000,
VK_ERROR_SURFACE_LOST_KHR = 1000000000,
VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = 1000000001,
VK_SUBOPTIMAL_KHR = 1000001003,
VK_ERROR_OUT_OF_DATE_KHR = 1000001004,
VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = 1000003001,
VK_ERROR_VALIDATION_FAILED_EXT = 1000011001,
VK_ERROR_INVALID_SHADER_NV = 1000012000,
VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
VK_ERROR_INCOMPATIBLE_VERSION_KHR = 1000150000,
VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = 1000158000,
VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION,
VK_ERROR_NOT_PERMITTED_EXT = 1000174001,
VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = 1000255000,
VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
VK_THREAD_IDLE_KHR = 1000268000,
VK_THREAD_DONE_KHR = 1000268001,
VK_OPERATION_DEFERRED_KHR = 1000268002,
VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000,
VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED_EXT,
}

VkDynamicState :: enum c.int {
VK_DYNAMIC_STATE_VIEWPORT = 0,
VK_DYNAMIC_STATE_SCISSOR = 1,
VK_DYNAMIC_STATE_LINE_WIDTH = 2,
VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000,
VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001,
VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002,
VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003,
VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004,
VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005,
VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006,
VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007,
VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008,
VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009,
VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010,
VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011,
}

VkDescriptorUpdateTemplateType :: enum c.int {
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
}

VkObjectType :: enum c.int {
VK_OBJECT_TYPE_UNKNOWN = 0,
VK_OBJECT_TYPE_INSTANCE = 1,
VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
VK_OBJECT_TYPE_DEVICE = 3,
VK_OBJECT_TYPE_QUEUE = 4,
VK_OBJECT_TYPE_SEMAPHORE = 5,
VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
VK_OBJECT_TYPE_FENCE = 7,
VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
VK_OBJECT_TYPE_BUFFER = 9,
VK_OBJECT_TYPE_IMAGE = 10,
VK_OBJECT_TYPE_EVENT = 11,
VK_OBJECT_TYPE_QUERY_POOL = 12,
VK_OBJECT_TYPE_BUFFER_VIEW = 13,
VK_OBJECT_TYPE_IMAGE_VIEW = 14,
VK_OBJECT_TYPE_SHADER_MODULE = 15,
VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
VK_OBJECT_TYPE_RENDER_PASS = 18,
VK_OBJECT_TYPE_PIPELINE = 19,
VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
VK_OBJECT_TYPE_SAMPLER = 21,
VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
VK_OBJECT_TYPE_FRAMEBUFFER = 24,
VK_OBJECT_TYPE_COMMAND_POOL = 25,
VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000,
VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR,
VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000,
}

VkQueueFlagBits :: enum c.int {
VK_QUEUE_GRAPHICS_BIT = 1<<0,
VK_QUEUE_COMPUTE_BIT = 1<<1,
VK_QUEUE_TRANSFER_BIT = 1<<2,
VK_QUEUE_SPARSE_BINDING_BIT = 1<<3,
VK_QUEUE_PROTECTED_BIT = 1<<4,
VK_QUEUE_RESERVED_6_BIT_KHR = 1<<6,
VK_QUEUE_RESERVED_5_BIT_KHR = 1<<5,
}

VkRenderPassCreateFlagBits :: enum c.int {
VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR = 1<<0,
VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 1<<1,
}

VkDeviceQueueCreateFlagBits :: enum c.int {
VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1<<0,
}

VkMemoryPropertyFlagBits :: enum c.int {
VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1<<0,
VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 1<<1,
VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 1<<2,
VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 1<<3,
VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 1<<4,
VK_MEMORY_PROPERTY_PROTECTED_BIT = 1<<5,
VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 1<<6,
VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 1<<7,
}

VkMemoryHeapFlagBits :: enum c.int {
VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1<<0,
VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 1<<1,
VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
VK_MEMORY_HEAP_RESERVED_2_BIT_KHR = 1<<2,
}

VkAccessFlagBits :: enum c.int {
VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1<<0,
VK_ACCESS_INDEX_READ_BIT = 1<<1,
VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 1<<2,
VK_ACCESS_UNIFORM_READ_BIT = 1<<3,
VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 1<<4,
VK_ACCESS_SHADER_READ_BIT = 1<<5,
VK_ACCESS_SHADER_WRITE_BIT = 1<<6,
VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 1<<7,
VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 1<<8,
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 1<<9,
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1<<10,
VK_ACCESS_TRANSFER_READ_BIT = 1<<11,
VK_ACCESS_TRANSFER_WRITE_BIT = 1<<12,
VK_ACCESS_HOST_READ_BIT = 1<<13,
VK_ACCESS_HOST_WRITE_BIT = 1<<14,
VK_ACCESS_MEMORY_READ_BIT = 1<<15,
VK_ACCESS_MEMORY_WRITE_BIT = 1<<16,
VK_ACCESS_RESERVED_30_BIT_KHR = 1<<30,
VK_ACCESS_RESERVED_28_BIT_KHR = 1<<28,
VK_ACCESS_RESERVED_29_BIT_KHR = 1<<29,
VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 1<<25,
VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 1<<26,
VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 1<<27,
VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1<<20,
VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 1<<19,
VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 1<<21,
VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 1<<22,
VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 1<<23,
VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 1<<24,
VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 1<<17,
VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 1<<18,
}

VkBufferUsageFlagBits :: enum c.int {
VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1<<0,
VK_BUFFER_USAGE_TRANSFER_DST_BIT = 1<<1,
VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 1<<2,
VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 1<<3,
VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 1<<4,
VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 1<<5,
VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 1<<6,
VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 1<<7,
VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 1<<8,
VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 1<<17,
VK_BUFFER_USAGE_RESERVED_15_BIT_KHR = 1<<15,
VK_BUFFER_USAGE_RESERVED_16_BIT_KHR = 1<<16,
VK_BUFFER_USAGE_RESERVED_13_BIT_KHR = 1<<13,
VK_BUFFER_USAGE_RESERVED_14_BIT_KHR = 1<<14,
VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 1<<11,
VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 1<<12,
VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 1<<9,
VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR = 1<<10,
VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR,
VK_BUFFER_USAGE_RESERVED_19_BIT_KHR = 1<<19,
VK_BUFFER_USAGE_RESERVED_20_BIT_KHR = 1<<20,
VK_BUFFER_USAGE_RESERVED_18_BIT_QCOM = 1<<18,
VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
}

VkBufferCreateFlagBits :: enum c.int {
VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1<<0,
VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 1<<1,
VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 1<<2,
VK_BUFFER_CREATE_PROTECTED_BIT = 1<<3,
VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 1<<4,
VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
}

VkShaderStageFlagBits :: enum c.int {
VK_SHADER_STAGE_VERTEX_BIT = 1<<0,
VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 1<<1,
VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 1<<2,
VK_SHADER_STAGE_GEOMETRY_BIT = 1<<3,
VK_SHADER_STAGE_FRAGMENT_BIT = 1<<4,
VK_SHADER_STAGE_COMPUTE_BIT = 1<<5,
VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
VK_SHADER_STAGE_RAYGEN_BIT_KHR = 1<<8,
VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 1<<9,
VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1<<10,
VK_SHADER_STAGE_MISS_BIT_KHR = 1<<11,
VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 1<<12,
VK_SHADER_STAGE_CALLABLE_BIT_KHR = 1<<13,
VK_SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
VK_SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
VK_SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR,
VK_SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
VK_SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
VK_SHADER_STAGE_TASK_BIT_NV = 1<<6,
VK_SHADER_STAGE_MESH_BIT_NV = 1<<7,
}

VkImageUsageFlagBits :: enum c.int {
VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1<<0,
VK_IMAGE_USAGE_TRANSFER_DST_BIT = 1<<1,
VK_IMAGE_USAGE_SAMPLED_BIT = 1<<2,
VK_IMAGE_USAGE_STORAGE_BIT = 1<<3,
VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 1<<4,
VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 1<<5,
VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 1<<6,
VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 1<<7,
VK_IMAGE_USAGE_RESERVED_13_BIT_KHR = 1<<13,
VK_IMAGE_USAGE_RESERVED_14_BIT_KHR = 1<<14,
VK_IMAGE_USAGE_RESERVED_15_BIT_KHR = 1<<15,
VK_IMAGE_USAGE_RESERVED_10_BIT_KHR = 1<<10,
VK_IMAGE_USAGE_RESERVED_11_BIT_KHR = 1<<11,
VK_IMAGE_USAGE_RESERVED_12_BIT_KHR = 1<<12,
VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 1<<8,
VK_IMAGE_USAGE_RESERVED_16_BIT_QCOM = 1<<16,
VK_IMAGE_USAGE_RESERVED_17_BIT_QCOM = 1<<17,
VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 1<<9,
}

VkImageCreateFlagBits :: enum c.int {
VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1<<0,
VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 1<<1,
VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 1<<2,
VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 1<<3,
VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 1<<4,
VK_IMAGE_CREATE_ALIAS_BIT = 1<<10,
VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 1<<6,
VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 1<<5,
VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 1<<7,
VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 1<<8,
VK_IMAGE_CREATE_PROTECTED_BIT = 1<<11,
VK_IMAGE_CREATE_DISJOINT_BIT = 1<<9,
VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 1<<13,
VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 1<<12,
VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT,
VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT,
VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 1<<14,
}

VkImageViewCreateFlagBits :: enum c.int {
VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1<<0,
VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 1<<1,
}

VkSamplerCreateFlagBits :: enum c.int {
VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1<<0,
VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 1<<1,
}

VkPipelineCreateFlagBits :: enum c.int {
VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1<<0,
VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 1<<1,
VK_PIPELINE_CREATE_DERIVATIVE_BIT = 1<<2,
VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 1<<3,
VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 1<<4,
VK_PIPELINE_CREATE_DISPATCH_BASE = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE,
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 1<<14,
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 1<<15,
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 1<<16,
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 1<<17,
VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 1<<12,
VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 1<<13,
VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 1<<5,
VK_PIPELINE_CREATE_RESERVED_19_BIT_KHR = 1<<19,
VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 1<<6,
VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 1<<7,
VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 1<<18,
VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 1<<11,
VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 1<<8,
VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 1<<9,
}

VkPipelineShaderStageCreateFlagBits :: enum c.int {
VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV = 1<<2,
VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1<<0,
VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 1<<1,
VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR = 1<<3,
}

VkColorComponentFlagBits :: enum c.int {
VK_COLOR_COMPONENT_R_BIT = 1<<0,
VK_COLOR_COMPONENT_G_BIT = 1<<1,
VK_COLOR_COMPONENT_B_BIT = 1<<2,
VK_COLOR_COMPONENT_A_BIT = 1<<3,
}

VkFenceCreateFlagBits :: enum c.int {
VK_FENCE_CREATE_SIGNALED_BIT = 1<<0,
}

VkSemaphoreCreateFlagBits :: enum c.int {
}

VkFormatFeatureFlagBits :: enum c.int {
VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1<<0,
VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 1<<1,
VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 1<<2,
VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 1<<3,
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 1<<4,
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 1<<5,
VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 1<<6,
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 1<<7,
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 1<<8,
VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 1<<9,
VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1<<10,
VK_FORMAT_FEATURE_BLIT_DST_BIT = 1<<11,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 1<<12,
VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 1<<14,
VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 1<<15,
VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 1<<17,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 1<<18,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 1<<19,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1<<20,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 1<<21,
VK_FORMAT_FEATURE_DISJOINT_BIT = 1<<22,
VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 1<<23,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 1<<16,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 1<<13,
VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR = 1<<27,
VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR = 1<<28,
VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR = 1<<25,
VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR = 1<<26,
VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 1<<29,
VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT,
VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 1<<24,
VK_FORMAT_FEATURE_AMD_RESERVED_30_BIT = 1<<30,
}

VkQueryControlFlagBits :: enum c.int {
VK_QUERY_CONTROL_PRECISE_BIT = 1<<0,
}

VkQueryResultFlagBits :: enum c.int {
VK_QUERY_RESULT_64_BIT = 1<<0,
VK_QUERY_RESULT_WAIT_BIT = 1<<1,
VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 1<<2,
VK_QUERY_RESULT_PARTIAL_BIT = 1<<3,
}

VkCommandBufferUsageFlagBits :: enum c.int {
VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1<<0,
VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 1<<1,
VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 1<<2,
}

VkQueryPipelineStatisticFlagBits :: enum c.int {
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1<<0,
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 1<<1,
VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 1<<2,
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 1<<3,
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 1<<4,
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 1<<5,
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 1<<6,
VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 1<<7,
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 1<<8,
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 1<<9,
VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1<<10,
}

VkImageAspectFlagBits :: enum c.int {
VK_IMAGE_ASPECT_COLOR_BIT = 1<<0,
VK_IMAGE_ASPECT_DEPTH_BIT = 1<<1,
VK_IMAGE_ASPECT_STENCIL_BIT = 1<<2,
VK_IMAGE_ASPECT_METADATA_BIT = 1<<3,
VK_IMAGE_ASPECT_PLANE_0_BIT = 1<<4,
VK_IMAGE_ASPECT_PLANE_1_BIT = 1<<5,
VK_IMAGE_ASPECT_PLANE_2_BIT = 1<<6,
VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT,
VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT,
VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT,
VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 1<<7,
VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 1<<8,
VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 1<<9,
VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1<<10,
}

VkSparseImageFormatFlagBits :: enum c.int {
VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1<<0,
VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 1<<1,
VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 1<<2,
}

VkSparseMemoryBindFlagBits :: enum c.int {
VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1<<0,
}

VkPipelineStageFlagBits :: enum c.int {
VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1<<0,
VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 1<<1,
VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 1<<2,
VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 1<<3,
VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 1<<4,
VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 1<<5,
VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 1<<6,
VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 1<<7,
VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 1<<8,
VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 1<<9,
VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1<<10,
VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 1<<11,
VK_PIPELINE_STAGE_TRANSFER_BIT = 1<<12,
VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 1<<13,
VK_PIPELINE_STAGE_HOST_BIT = 1<<14,
VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 1<<15,
VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 1<<16,
VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR = 1<<27,
VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR = 1<<26,
VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 1<<24,
VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 1<<18,
VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 1<<21,
VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 1<<25,
VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 1<<22,
VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 1<<19,
VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1<<20,
VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 1<<23,
VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 1<<17,
}

VkCommandPoolCreateFlagBits :: enum c.int {
VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1<<0,
VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 1<<1,
VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 1<<2,
}

VkCommandPoolResetFlagBits :: enum c.int {
VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1<<0,
}

VkCommandBufferResetFlagBits :: enum c.int {
VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1<<0,
}

VkSampleCountFlagBits :: enum c.int {
VK_SAMPLE_COUNT_1_BIT = 1<<0,
VK_SAMPLE_COUNT_2_BIT = 1<<1,
VK_SAMPLE_COUNT_4_BIT = 1<<2,
VK_SAMPLE_COUNT_8_BIT = 1<<3,
VK_SAMPLE_COUNT_16_BIT = 1<<4,
VK_SAMPLE_COUNT_32_BIT = 1<<5,
VK_SAMPLE_COUNT_64_BIT = 1<<6,
}

VkAttachmentDescriptionFlagBits :: enum c.int {
VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1<<0,
}

VkStencilFaceFlagBits :: enum c.int {
VK_STENCIL_FACE_FRONT_BIT = 1<<0,
VK_STENCIL_FACE_BACK_BIT = 1<<1,
VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK,
}

VkDescriptorPoolCreateFlagBits :: enum c.int {
VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1<<0,
VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 1<<1,
VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
}

VkDependencyFlagBits :: enum c.int {
VK_DEPENDENCY_BY_REGION_BIT = 1<<0,
VK_DEPENDENCY_DEVICE_GROUP_BIT = 1<<2,
VK_DEPENDENCY_VIEW_LOCAL_BIT = 1<<1,
VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT,
VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
}

VkSemaphoreType :: enum c.int {
VK_SEMAPHORE_TYPE_BINARY = 0,
VK_SEMAPHORE_TYPE_TIMELINE = 1,
VK_SEMAPHORE_TYPE_BINARY_KHR = VK_SEMAPHORE_TYPE_BINARY,
VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE,
}

VkSemaphoreWaitFlagBits :: enum c.int {
VK_SEMAPHORE_WAIT_ANY_BIT = 1<<0,
VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VK_SEMAPHORE_WAIT_ANY_BIT,
}

VkPresentModeKHR :: enum c.int {
VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
VK_PRESENT_MODE_MAILBOX_KHR = 1,
VK_PRESENT_MODE_FIFO_KHR = 2,
VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
}

VkColorSpaceKHR :: enum c.int {
VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
}

VkDisplayPlaneAlphaFlagBitsKHR :: enum c.int {
VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1<<0,
VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 1<<1,
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 1<<2,
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 1<<3,
}

VkCompositeAlphaFlagBitsKHR :: enum c.int {
VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1<<0,
VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 1<<1,
VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 1<<2,
VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 1<<3,
}

VkSurfaceTransformFlagBitsKHR :: enum c.int {
VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1<<0,
VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 1<<1,
VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 1<<2,
VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 1<<3,
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 1<<4,
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 1<<5,
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 1<<6,
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 1<<7,
VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 1<<8,
}

VkSwapchainImageUsageFlagBitsANDROID :: enum c.int {
VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID = 1<<0,
}

VkTimeDomainEXT :: enum c.int {
VK_TIME_DOMAIN_DEVICE_EXT = 0,
VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
}

VkDebugReportFlagBitsEXT :: enum c.int {
VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1<<0,
VK_DEBUG_REPORT_WARNING_BIT_EXT = 1<<1,
VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 1<<2,
VK_DEBUG_REPORT_ERROR_BIT_EXT = 1<<3,
VK_DEBUG_REPORT_DEBUG_BIT_EXT = 1<<4,
}

VkDebugReportObjectTypeEXT :: enum c.int {
VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000165000,
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT,
}

VkRasterizationOrderAMD :: enum c.int {
VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
}

VkExternalMemoryHandleTypeFlagBitsNV :: enum c.int {
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1<<0,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 1<<1,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 1<<2,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 1<<3,
}

VkExternalMemoryFeatureFlagBitsNV :: enum c.int {
VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1<<0,
VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 1<<1,
VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 1<<2,
}

VkValidationCheckEXT :: enum c.int {
VK_VALIDATION_CHECK_ALL_EXT = 0,
VK_VALIDATION_CHECK_SHADERS_EXT = 1,
}

VkValidationFeatureEnableEXT :: enum c.int {
VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
}

VkValidationFeatureDisableEXT :: enum c.int {
VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
}

VkSubgroupFeatureFlagBits :: enum c.int {
VK_SUBGROUP_FEATURE_BASIC_BIT = 1<<0,
VK_SUBGROUP_FEATURE_VOTE_BIT = 1<<1,
VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 1<<2,
VK_SUBGROUP_FEATURE_BALLOT_BIT = 1<<3,
VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 1<<4,
VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 1<<5,
VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 1<<6,
VK_SUBGROUP_FEATURE_QUAD_BIT = 1<<7,
VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 1<<8,
}

VkIndirectCommandsLayoutUsageFlagBitsNV :: enum c.int {
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1<<0,
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 1<<1,
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 1<<2,
}

VkIndirectStateFlagBitsNV :: enum c.int {
VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1<<0,
}

VkIndirectCommandsTokenTypeNV :: enum c.int {
VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
}

VkPrivateDataSlotCreateFlagBitsEXT :: enum c.int {
}

VkDescriptorSetLayoutCreateFlagBits :: enum c.int {
VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 1<<1,
VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1<<0,
VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
}

VkExternalMemoryHandleTypeFlagBits :: enum c.int {
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1<<0,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 1<<1,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 1<<2,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 1<<3,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 1<<4,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 1<<5,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 1<<6,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 1<<9,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1<<10,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 1<<7,
VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 1<<8,
}

VkExternalMemoryFeatureFlagBits :: enum c.int {
VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1<<0,
VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 1<<1,
VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 1<<2,
VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
}

VkExternalSemaphoreHandleTypeFlagBits :: enum c.int {
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1<<0,
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 1<<1,
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 1<<2,
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 1<<3,
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 1<<4,
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
}

VkExternalSemaphoreFeatureFlagBits :: enum c.int {
VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1<<0,
VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 1<<1,
VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
}

VkSemaphoreImportFlagBits :: enum c.int {
VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1<<0,
VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
}

VkExternalFenceHandleTypeFlagBits :: enum c.int {
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1<<0,
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 1<<1,
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 1<<2,
VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 1<<3,
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
}

VkExternalFenceFeatureFlagBits :: enum c.int {
VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1<<0,
VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 1<<1,
VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
}

VkFenceImportFlagBits :: enum c.int {
VK_FENCE_IMPORT_TEMPORARY_BIT = 1<<0,
VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT,
}

VkSurfaceCounterFlagBitsEXT :: enum c.int {
VK_SURFACE_COUNTER_VBLANK_EXT = 1<<0,
}

VkDisplayPowerStateEXT :: enum c.int {
VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
VK_DISPLAY_POWER_STATE_ON_EXT = 2,
}

VkDeviceEventTypeEXT :: enum c.int {
VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
}

VkDisplayEventTypeEXT :: enum c.int {
VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
}

VkPeerMemoryFeatureFlagBits :: enum c.int {
VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1<<0,
VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 1<<1,
VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 1<<2,
VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 1<<3,
VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
}

VkMemoryAllocateFlagBits :: enum c.int {
VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1<<0,
VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 1<<1,
VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 1<<2,
VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
}

VkDeviceGroupPresentModeFlagBitsKHR :: enum c.int {
VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1<<0,
VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 1<<1,
VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 1<<2,
VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 1<<3,
}

VkSwapchainCreateFlagBitsKHR :: enum c.int {
VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1<<0,
VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 1<<1,
VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 1<<2,
}

VkViewportCoordinateSwizzleNV :: enum c.int {
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
}

VkDiscardRectangleModeEXT :: enum c.int {
VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
}

VkSubpassDescriptionFlagBits :: enum c.int {
VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1<<0,
VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 1<<1,
VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 1<<2,
VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 1<<3,
}

VkPointClippingBehavior :: enum c.int {
VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
}

VkSamplerReductionMode :: enum c.int {
VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
VK_SAMPLER_REDUCTION_MODE_MIN = 1,
VK_SAMPLER_REDUCTION_MODE_MAX = 2,
VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VK_SAMPLER_REDUCTION_MODE_MIN,
VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VK_SAMPLER_REDUCTION_MODE_MAX,
}

VkTessellationDomainOrigin :: enum c.int {
VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
}

VkSamplerYcbcrModelConversion :: enum c.int {
VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
}

VkSamplerYcbcrRange :: enum c.int {
VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
}

VkChromaLocation :: enum c.int {
VK_CHROMA_LOCATION_COSITED_EVEN = 0,
VK_CHROMA_LOCATION_MIDPOINT = 1,
VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,
VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT,
}

VkBlendOverlapEXT :: enum c.int {
VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
}

VkCoverageModulationModeNV :: enum c.int {
VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
}

VkCoverageReductionModeNV :: enum c.int {
VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
}

VkValidationCacheHeaderVersionEXT :: enum c.int {
VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
}

VkShaderInfoTypeAMD :: enum c.int {
VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
}

VkQueueGlobalPriorityEXT :: enum c.int {
VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128,
VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256,
VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512,
VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
}

VkDebugUtilsMessageSeverityFlagBitsEXT :: enum c.int {
VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1<<0,
VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 1<<4,
VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 1<<8,
VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 1<<12,
}

VkDebugUtilsMessageTypeFlagBitsEXT :: enum c.int {
VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1<<0,
VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 1<<1,
VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 1<<2,
}

VkConservativeRasterizationModeEXT :: enum c.int {
VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
}

VkDescriptorBindingFlagBits :: enum c.int {
VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1<<0,
VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 1<<1,
VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 1<<2,
VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 1<<3,
VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
}

VkVendorId :: enum c.int {
VK_VENDOR_ID_VIV = 0x10001,
VK_VENDOR_ID_VSI = 0x10002,
VK_VENDOR_ID_KAZAN = 0x10003,
VK_VENDOR_ID_CODEPLAY = 0x10004,
VK_VENDOR_ID_MESA = 0x10005,
}

VkDriverId :: enum c.int {
VK_DRIVER_ID_AMD_PROPRIETARY = 1,
VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
VK_DRIVER_ID_MESA_RADV = 3,
VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
VK_DRIVER_ID_ARM_PROPRIETARY = 9,
VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
VK_DRIVER_ID_GGP_PROPRIETARY = 11,
VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
VK_DRIVER_ID_MESA_LLVMPIPE = 13,
VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VK_DRIVER_ID_AMD_PROPRIETARY,
VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VK_DRIVER_ID_AMD_OPEN_SOURCE,
VK_DRIVER_ID_MESA_RADV_KHR = VK_DRIVER_ID_MESA_RADV,
VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VK_DRIVER_ID_NVIDIA_PROPRIETARY,
VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VK_DRIVER_ID_ARM_PROPRIETARY,
VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VK_DRIVER_ID_GGP_PROPRIETARY,
VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VK_DRIVER_ID_BROADCOM_PROPRIETARY,
}

VkConditionalRenderingFlagBitsEXT :: enum c.int {
VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1<<0,
}

VkResolveModeFlagBits :: enum c.int {
VK_RESOLVE_MODE_NONE = 0,
VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1<<0,
VK_RESOLVE_MODE_AVERAGE_BIT = 1<<1,
VK_RESOLVE_MODE_MIN_BIT = 1<<2,
VK_RESOLVE_MODE_MAX_BIT = 1<<3,
VK_RESOLVE_MODE_NONE_KHR = VK_RESOLVE_MODE_NONE,
VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VK_RESOLVE_MODE_AVERAGE_BIT,
VK_RESOLVE_MODE_MIN_BIT_KHR = VK_RESOLVE_MODE_MIN_BIT,
VK_RESOLVE_MODE_MAX_BIT_KHR = VK_RESOLVE_MODE_MAX_BIT,
}

VkShadingRatePaletteEntryNV :: enum c.int {
VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
}

VkCoarseSampleOrderTypeNV :: enum c.int {
VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
}

VkGeometryInstanceFlagBitsKHR :: enum c.int {
VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1<<0,
VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 1<<1,
VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 1<<2,
VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 1<<3,
VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
}

VkGeometryFlagBitsKHR :: enum c.int {
VK_GEOMETRY_OPAQUE_BIT_KHR = 1<<0,
VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 1<<1,
VK_GEOMETRY_OPAQUE_BIT_NV = VK_GEOMETRY_OPAQUE_BIT_KHR,
VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
}

VkBuildAccelerationStructureFlagBitsKHR :: enum c.int {
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1<<0,
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 1<<1,
VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 1<<2,
VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 1<<3,
VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 1<<4,
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
}

VkCopyAccelerationStructureModeKHR :: enum c.int {
VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
}

VkAccelerationStructureTypeKHR :: enum c.int {
VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
}

VkGeometryTypeKHR :: enum c.int {
VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
VK_GEOMETRY_TYPE_AABBS_KHR = 1,
VK_GEOMETRY_TYPE_INSTANCES_KHR = 1000150000,
VK_GEOMETRY_TYPE_TRIANGLES_NV = VK_GEOMETRY_TYPE_TRIANGLES_KHR,
VK_GEOMETRY_TYPE_AABBS_NV = VK_GEOMETRY_TYPE_AABBS_KHR,
}

VkAccelerationStructureMemoryRequirementsTypeKHR :: enum c.int {
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR = 0,
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR = 1,
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR = 2,
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR,
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR,
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR,
}

VkAccelerationStructureBuildTypeKHR :: enum c.int {
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2,
}

VkRayTracingShaderGroupTypeKHR :: enum c.int {
VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
}

VkMemoryOverallocationBehaviorAMD :: enum c.int {
VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
}

VkFramebufferCreateFlagBits :: enum c.int {
VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1<<0,
VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
}

VkScopeNV :: enum c.int {
VK_SCOPE_DEVICE_NV = 1,
VK_SCOPE_WORKGROUP_NV = 2,
VK_SCOPE_SUBGROUP_NV = 3,
VK_SCOPE_QUEUE_FAMILY_NV = 5,
}

VkComponentTypeNV :: enum c.int {
VK_COMPONENT_TYPE_FLOAT16_NV = 0,
VK_COMPONENT_TYPE_FLOAT32_NV = 1,
VK_COMPONENT_TYPE_FLOAT64_NV = 2,
VK_COMPONENT_TYPE_SINT8_NV = 3,
VK_COMPONENT_TYPE_SINT16_NV = 4,
VK_COMPONENT_TYPE_SINT32_NV = 5,
VK_COMPONENT_TYPE_SINT64_NV = 6,
VK_COMPONENT_TYPE_UINT8_NV = 7,
VK_COMPONENT_TYPE_UINT16_NV = 8,
VK_COMPONENT_TYPE_UINT32_NV = 9,
VK_COMPONENT_TYPE_UINT64_NV = 10,
}

VkDeviceDiagnosticsConfigFlagBitsNV :: enum c.int {
VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1<<0,
VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 1<<1,
VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 1<<2,
}

VkPipelineCreationFeedbackFlagBitsEXT :: enum c.int {
VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1<<0,
VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 1<<1,
VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 1<<2,
}

VkFullScreenExclusiveEXT :: enum c.int {
VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0,
VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1,
VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2,
VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3,
}

VkPerformanceCounterScopeKHR :: enum c.int {
VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
VK_QUERY_SCOPE_RENDER_PASS_KHR = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
VK_QUERY_SCOPE_COMMAND_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
}

VkPerformanceCounterUnitKHR :: enum c.int {
VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
}

VkPerformanceCounterStorageKHR :: enum c.int {
VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
}

VkPerformanceCounterDescriptionFlagBitsKHR :: enum c.int {
VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1<<0,
VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 1<<1,
}

VkAcquireProfilingLockFlagBitsKHR :: enum c.int {
}

VkShaderCorePropertiesFlagBitsAMD :: enum c.int {
}

VkPerformanceConfigurationTypeINTEL :: enum c.int {
VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
}

VkQueryPoolSamplingModeINTEL :: enum c.int {
VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
}

VkPerformanceOverrideTypeINTEL :: enum c.int {
VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
}

VkPerformanceParameterTypeINTEL :: enum c.int {
VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
}

VkPerformanceValueTypeINTEL :: enum c.int {
VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
}

VkShaderFloatControlsIndependence :: enum c.int {
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
}

VkPipelineExecutableStatisticFormatKHR :: enum c.int {
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
}

VkLineRasterizationModeEXT :: enum c.int {
VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
}

VkShaderModuleCreateFlagBits :: enum c.int {
VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV = 1<<0,
}

VkPipelineCompilerControlFlagBitsAMD :: enum c.int {
}

VkToolPurposeFlagBitsEXT :: enum c.int {
VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1<<0,
VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 1<<1,
VK_TOOL_PURPOSE_TRACING_BIT_EXT = 1<<2,
VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 1<<3,
VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 1<<4,
VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 1<<5,
VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 1<<6,
}
Display :: distinct rawptr;
VisualID :: distinct rawptr;
Window :: distinct rawptr;
RROutput :: distinct rawptr;
wl_display :: distinct rawptr;
wl_surface :: distinct rawptr;
HINSTANCE :: distinct rawptr;
HWND :: distinct rawptr;
HMONITOR :: distinct rawptr;
HANDLE :: distinct rawptr;
SECURITY_ATTRIBUTES :: distinct rawptr;
DWORD :: distinct rawptr;
LPCWSTR :: distinct rawptr;
xcb_connection_t :: distinct rawptr;
xcb_visualid_t :: distinct rawptr;
xcb_window_t :: distinct rawptr;
IDirectFB :: distinct rawptr;
IDirectFBSurface :: distinct rawptr;
zx_handle_t :: distinct rawptr;
GgpStreamDescriptor :: distinct rawptr;
GgpFrameToken :: distinct rawptr;
ANativeWindow :: distinct rawptr;
AHardwareBuffer :: distinct rawptr;
CAMetalLayer :: distinct rawptr;
VkSampleMask :: u32;
VkBool32 :: b32;
VkFlags :: u32;
VkDeviceSize :: u64;
VkDeviceAddress :: u64;
void :: distinct rawptr;
char :: distinct rawptr;
float :: distinct rawptr;
double :: distinct rawptr;
uint8_t :: distinct rawptr;
uint16_t :: distinct rawptr;
uint32_t :: distinct rawptr;
uint64_t :: distinct rawptr;
int32_t :: distinct rawptr;
int64_t :: distinct rawptr;
size_t :: distinct rawptr;
VkFramebufferCreateFlags :: VkFramebufferCreateFlagBits;
VkQueryPoolCreateFlags :: VkFlags;
VkRenderPassCreateFlags :: VkRenderPassCreateFlagBits;
VkSamplerCreateFlags :: VkSamplerCreateFlagBits;
VkPipelineLayoutCreateFlags :: VkFlags;
VkPipelineCacheCreateFlags :: VkPipelineCacheCreateFlagBits;
VkPipelineDepthStencilStateCreateFlags :: VkFlags;
VkPipelineDynamicStateCreateFlags :: VkFlags;
VkPipelineColorBlendStateCreateFlags :: VkFlags;
VkPipelineMultisampleStateCreateFlags :: VkFlags;
VkPipelineRasterizationStateCreateFlags :: VkFlags;
VkPipelineViewportStateCreateFlags :: VkFlags;
VkPipelineTessellationStateCreateFlags :: VkFlags;
VkPipelineInputAssemblyStateCreateFlags :: VkFlags;
VkPipelineVertexInputStateCreateFlags :: VkFlags;
VkPipelineShaderStageCreateFlags :: VkPipelineShaderStageCreateFlagBits;
VkDescriptorSetLayoutCreateFlags :: VkDescriptorSetLayoutCreateFlagBits;
VkBufferViewCreateFlags :: VkFlags;
VkInstanceCreateFlags :: VkFlags;
VkDeviceCreateFlags :: VkFlags;
VkDeviceQueueCreateFlags :: VkDeviceQueueCreateFlagBits;
VkQueueFlags :: VkQueueFlagBits;
VkMemoryPropertyFlags :: VkMemoryPropertyFlagBits;
VkMemoryHeapFlags :: VkMemoryHeapFlagBits;
VkAccessFlags :: VkAccessFlagBits;
VkBufferUsageFlags :: VkBufferUsageFlagBits;
VkBufferCreateFlags :: VkBufferCreateFlagBits;
VkShaderStageFlags :: VkShaderStageFlagBits;
VkImageUsageFlags :: VkImageUsageFlagBits;
VkImageCreateFlags :: VkImageCreateFlagBits;
VkImageViewCreateFlags :: VkImageViewCreateFlagBits;
VkPipelineCreateFlags :: VkPipelineCreateFlagBits;
VkColorComponentFlags :: VkColorComponentFlagBits;
VkFenceCreateFlags :: VkFenceCreateFlagBits;
VkSemaphoreCreateFlags :: VkFlags;
VkFormatFeatureFlags :: VkFormatFeatureFlagBits;
VkQueryControlFlags :: VkQueryControlFlagBits;
VkQueryResultFlags :: VkQueryResultFlagBits;
VkShaderModuleCreateFlags :: VkShaderModuleCreateFlagBits;
VkEventCreateFlags :: VkFlags;
VkCommandPoolCreateFlags :: VkCommandPoolCreateFlagBits;
VkCommandPoolResetFlags :: VkCommandPoolResetFlagBits;
VkCommandBufferResetFlags :: VkCommandBufferResetFlagBits;
VkCommandBufferUsageFlags :: VkCommandBufferUsageFlagBits;
VkQueryPipelineStatisticFlags :: VkQueryPipelineStatisticFlagBits;
VkMemoryMapFlags :: VkFlags;
VkImageAspectFlags :: VkImageAspectFlagBits;
VkSparseMemoryBindFlags :: VkSparseMemoryBindFlagBits;
VkSparseImageFormatFlags :: VkSparseImageFormatFlagBits;
VkSubpassDescriptionFlags :: VkSubpassDescriptionFlagBits;
VkPipelineStageFlags :: VkPipelineStageFlagBits;
VkSampleCountFlags :: VkSampleCountFlagBits;
VkAttachmentDescriptionFlags :: VkAttachmentDescriptionFlagBits;
VkStencilFaceFlags :: VkStencilFaceFlagBits;
VkCullModeFlags :: VkCullModeFlagBits;
VkDescriptorPoolCreateFlags :: VkDescriptorPoolCreateFlagBits;
VkDescriptorPoolResetFlags :: VkFlags;
VkDependencyFlags :: VkDependencyFlagBits;
VkSubgroupFeatureFlags :: VkSubgroupFeatureFlagBits;
VkIndirectCommandsLayoutUsageFlagsNV :: VkIndirectCommandsLayoutUsageFlagBitsNV;
VkIndirectStateFlagsNV :: VkIndirectStateFlagBitsNV;
VkGeometryFlagsKHR :: VkGeometryFlagBitsKHR;
VkGeometryFlagsNV :: VkGeometryFlagsKHR;
VkGeometryInstanceFlagsKHR :: VkGeometryInstanceFlagBitsKHR;
VkGeometryInstanceFlagsNV :: VkGeometryInstanceFlagsKHR;
VkBuildAccelerationStructureFlagsKHR :: VkBuildAccelerationStructureFlagBitsKHR;
VkBuildAccelerationStructureFlagsNV :: VkBuildAccelerationStructureFlagsKHR;
VkPrivateDataSlotCreateFlagsEXT :: VkPrivateDataSlotCreateFlagBitsEXT;
VkDescriptorUpdateTemplateCreateFlags :: VkFlags;
VkDescriptorUpdateTemplateCreateFlagsKHR :: VkDescriptorUpdateTemplateCreateFlags;
VkPipelineCreationFeedbackFlagsEXT :: VkPipelineCreationFeedbackFlagBitsEXT;
VkPerformanceCounterDescriptionFlagsKHR :: VkPerformanceCounterDescriptionFlagBitsKHR;
VkAcquireProfilingLockFlagsKHR :: VkAcquireProfilingLockFlagBitsKHR;
VkSemaphoreWaitFlags :: VkSemaphoreWaitFlagBits;
VkSemaphoreWaitFlagsKHR :: VkSemaphoreWaitFlags;
VkPipelineCompilerControlFlagsAMD :: VkPipelineCompilerControlFlagBitsAMD;
VkShaderCorePropertiesFlagsAMD :: VkShaderCorePropertiesFlagBitsAMD;
VkDeviceDiagnosticsConfigFlagsNV :: VkDeviceDiagnosticsConfigFlagBitsNV;
VkCompositeAlphaFlagsKHR :: VkCompositeAlphaFlagBitsKHR;
VkDisplayPlaneAlphaFlagsKHR :: VkDisplayPlaneAlphaFlagBitsKHR;
VkSurfaceTransformFlagsKHR :: VkSurfaceTransformFlagBitsKHR;
VkSwapchainCreateFlagsKHR :: VkSwapchainCreateFlagBitsKHR;
VkDisplayModeCreateFlagsKHR :: VkFlags;
VkDisplaySurfaceCreateFlagsKHR :: VkFlags;
VkAndroidSurfaceCreateFlagsKHR :: VkFlags;
VkViSurfaceCreateFlagsNN :: VkFlags;
VkWaylandSurfaceCreateFlagsKHR :: VkFlags;
VkWin32SurfaceCreateFlagsKHR :: VkFlags;
VkXlibSurfaceCreateFlagsKHR :: VkFlags;
VkXcbSurfaceCreateFlagsKHR :: VkFlags;
VkDirectFBSurfaceCreateFlagsEXT :: VkFlags;
VkIOSSurfaceCreateFlagsMVK :: VkFlags;
VkMacOSSurfaceCreateFlagsMVK :: VkFlags;
VkMetalSurfaceCreateFlagsEXT :: VkFlags;
VkImagePipeSurfaceCreateFlagsFUCHSIA :: VkFlags;
VkStreamDescriptorSurfaceCreateFlagsGGP :: VkFlags;
VkHeadlessSurfaceCreateFlagsEXT :: VkFlags;
VkPeerMemoryFeatureFlags :: VkPeerMemoryFeatureFlagBits;
VkPeerMemoryFeatureFlagsKHR :: VkPeerMemoryFeatureFlags;
VkMemoryAllocateFlags :: VkMemoryAllocateFlagBits;
VkMemoryAllocateFlagsKHR :: VkMemoryAllocateFlags;
VkDeviceGroupPresentModeFlagsKHR :: VkDeviceGroupPresentModeFlagBitsKHR;
VkDebugReportFlagsEXT :: VkDebugReportFlagBitsEXT;
VkCommandPoolTrimFlags :: VkFlags;
VkCommandPoolTrimFlagsKHR :: VkCommandPoolTrimFlags;
VkExternalMemoryHandleTypeFlagsNV :: VkExternalMemoryHandleTypeFlagBitsNV;
VkExternalMemoryFeatureFlagsNV :: VkExternalMemoryFeatureFlagBitsNV;
VkExternalMemoryHandleTypeFlags :: VkExternalMemoryHandleTypeFlagBits;
VkExternalMemoryHandleTypeFlagsKHR :: VkExternalMemoryHandleTypeFlags;
VkExternalMemoryFeatureFlags :: VkExternalMemoryFeatureFlagBits;
VkExternalMemoryFeatureFlagsKHR :: VkExternalMemoryFeatureFlags;
VkExternalSemaphoreHandleTypeFlags :: VkExternalSemaphoreHandleTypeFlagBits;
VkExternalSemaphoreHandleTypeFlagsKHR :: VkExternalSemaphoreHandleTypeFlags;
VkExternalSemaphoreFeatureFlags :: VkExternalSemaphoreFeatureFlagBits;
VkExternalSemaphoreFeatureFlagsKHR :: VkExternalSemaphoreFeatureFlags;
VkSemaphoreImportFlags :: VkSemaphoreImportFlagBits;
VkSemaphoreImportFlagsKHR :: VkSemaphoreImportFlags;
VkExternalFenceHandleTypeFlags :: VkExternalFenceHandleTypeFlagBits;
VkExternalFenceHandleTypeFlagsKHR :: VkExternalFenceHandleTypeFlags;
VkExternalFenceFeatureFlags :: VkExternalFenceFeatureFlagBits;
VkExternalFenceFeatureFlagsKHR :: VkExternalFenceFeatureFlags;
VkFenceImportFlags :: VkFenceImportFlagBits;
VkFenceImportFlagsKHR :: VkFenceImportFlags;
VkSurfaceCounterFlagsEXT :: VkSurfaceCounterFlagBitsEXT;
VkPipelineViewportSwizzleStateCreateFlagsNV :: VkFlags;
VkPipelineDiscardRectangleStateCreateFlagsEXT :: VkFlags;
VkPipelineCoverageToColorStateCreateFlagsNV :: VkFlags;
VkPipelineCoverageModulationStateCreateFlagsNV :: VkFlags;
VkPipelineCoverageReductionStateCreateFlagsNV :: VkFlags;
VkValidationCacheCreateFlagsEXT :: VkFlags;
VkDebugUtilsMessageSeverityFlagsEXT :: VkDebugUtilsMessageSeverityFlagBitsEXT;
VkDebugUtilsMessageTypeFlagsEXT :: VkDebugUtilsMessageTypeFlagBitsEXT;
VkDebugUtilsMessengerCreateFlagsEXT :: VkFlags;
VkDebugUtilsMessengerCallbackDataFlagsEXT :: VkFlags;
VkPipelineRasterizationConservativeStateCreateFlagsEXT :: VkFlags;
VkDescriptorBindingFlags :: VkDescriptorBindingFlagBits;
VkDescriptorBindingFlagsEXT :: VkDescriptorBindingFlags;
VkConditionalRenderingFlagsEXT :: VkConditionalRenderingFlagBitsEXT;
VkResolveModeFlags :: VkResolveModeFlagBits;
VkResolveModeFlagsKHR :: VkResolveModeFlags;
VkPipelineRasterizationStateStreamCreateFlagsEXT :: VkFlags;
VkPipelineRasterizationDepthClipStateCreateFlagsEXT :: VkFlags;
VkSwapchainImageUsageFlagsANDROID :: VkSwapchainImageUsageFlagBitsANDROID;
VkToolPurposeFlagsEXT :: VkToolPurposeFlagBitsEXT;
VkInstance :: distinct rawptr;
VkPhysicalDevice :: distinct rawptr;
VkDevice :: distinct rawptr;
VkQueue :: distinct rawptr;
VkCommandBuffer :: distinct rawptr;
VkDeviceMemory :: distinct rawptr;
VkCommandPool :: distinct rawptr;
VkBuffer :: distinct rawptr;
VkBufferView :: distinct rawptr;
VkImage :: distinct rawptr;
VkImageView :: distinct rawptr;
VkShaderModule :: distinct rawptr;
VkPipeline :: distinct rawptr;
VkPipelineLayout :: distinct rawptr;
VkSampler :: distinct rawptr;
VkDescriptorSet :: distinct rawptr;
VkDescriptorSetLayout :: distinct rawptr;
VkDescriptorPool :: distinct rawptr;
VkFence :: distinct rawptr;
VkSemaphore :: distinct rawptr;
VkEvent :: distinct rawptr;
VkQueryPool :: distinct rawptr;
VkFramebuffer :: distinct rawptr;
VkRenderPass :: distinct rawptr;
VkPipelineCache :: distinct rawptr;
VkIndirectCommandsLayoutNV :: distinct rawptr;
VkDescriptorUpdateTemplate :: distinct rawptr;
VkDescriptorUpdateTemplateKHR :: VkDescriptorUpdateTemplate;
VkSamplerYcbcrConversion :: distinct rawptr;
VkSamplerYcbcrConversionKHR :: VkSamplerYcbcrConversion;
VkValidationCacheEXT :: distinct rawptr;
VkAccelerationStructureKHR :: distinct rawptr;
VkAccelerationStructureNV :: VkAccelerationStructureKHR;
VkPerformanceConfigurationINTEL :: distinct rawptr;
VkDeferredOperationKHR :: distinct rawptr;
VkPrivateDataSlotEXT :: distinct rawptr;
VkDisplayKHR :: distinct rawptr;
VkDisplayModeKHR :: distinct rawptr;
VkSurfaceKHR :: distinct rawptr;
VkSwapchainKHR :: distinct rawptr;
VkDebugReportCallbackEXT :: distinct rawptr;
VkDebugUtilsMessengerEXT :: distinct rawptr;
VkDescriptorUpdateTemplateTypeKHR :: VkDescriptorUpdateTemplateType;
VkPointClippingBehaviorKHR :: VkPointClippingBehavior;
VkResolveModeFlagBitsKHR :: VkResolveModeFlagBits;
VkDescriptorBindingFlagBitsEXT :: VkDescriptorBindingFlagBits;
VkSemaphoreTypeKHR :: VkSemaphoreType;
VkGeometryFlagBitsNV :: VkGeometryFlagBitsKHR;
VkGeometryInstanceFlagBitsNV :: VkGeometryInstanceFlagBitsKHR;
VkBuildAccelerationStructureFlagBitsNV :: VkBuildAccelerationStructureFlagBitsKHR;
VkCopyAccelerationStructureModeNV :: VkCopyAccelerationStructureModeKHR;
VkAccelerationStructureTypeNV :: VkAccelerationStructureTypeKHR;
VkGeometryTypeNV :: VkGeometryTypeKHR;
VkRayTracingShaderGroupTypeNV :: VkRayTracingShaderGroupTypeKHR;
VkAccelerationStructureMemoryRequirementsTypeNV :: VkAccelerationStructureMemoryRequirementsTypeKHR;
VkSemaphoreWaitFlagBitsKHR :: VkSemaphoreWaitFlagBits;
VkExternalMemoryHandleTypeFlagBitsKHR :: VkExternalMemoryHandleTypeFlagBits;
VkExternalMemoryFeatureFlagBitsKHR :: VkExternalMemoryFeatureFlagBits;
VkExternalSemaphoreHandleTypeFlagBitsKHR :: VkExternalSemaphoreHandleTypeFlagBits;
VkExternalSemaphoreFeatureFlagBitsKHR :: VkExternalSemaphoreFeatureFlagBits;
VkSemaphoreImportFlagBitsKHR :: VkSemaphoreImportFlagBits;
VkExternalFenceHandleTypeFlagBitsKHR :: VkExternalFenceHandleTypeFlagBits;
VkExternalFenceFeatureFlagBitsKHR :: VkExternalFenceFeatureFlagBits;
VkFenceImportFlagBitsKHR :: VkFenceImportFlagBits;
VkPeerMemoryFeatureFlagBitsKHR :: VkPeerMemoryFeatureFlagBits;
VkMemoryAllocateFlagBitsKHR :: VkMemoryAllocateFlagBits;
VkTessellationDomainOriginKHR :: VkTessellationDomainOrigin;
VkSamplerYcbcrModelConversionKHR :: VkSamplerYcbcrModelConversion;
VkSamplerYcbcrRangeKHR :: VkSamplerYcbcrRange;
VkChromaLocationKHR :: VkChromaLocation;
VkSamplerReductionModeEXT :: VkSamplerReductionMode;
VkShaderFloatControlsIndependenceKHR :: VkShaderFloatControlsIndependence;
VkDriverIdKHR :: VkDriverId;
PFN_vkInternalAllocationNotification :: proc (
	pUserData: rawptr,
	size: u64,
	allocationType: VkInternalAllocationType,
	allocationScope: VkSystemAllocationScope,
);
PFN_vkInternalFreeNotification :: proc (
	pUserData: rawptr,
	size: u64,
	allocationType: VkInternalAllocationType,
	allocationScope: VkSystemAllocationScope,
);
PFN_vkReallocationFunction :: proc (
	pUserData: rawptr,
	pOriginal: rawptr,
	size: u64,
	alignment: u64,
	allocationScope: VkSystemAllocationScope,
) -> rawptr;
PFN_vkAllocationFunction :: proc (
	pUserData: rawptr,
	size: u64,
	alignment: u64,
	allocationScope: VkSystemAllocationScope,
) -> rawptr;
PFN_vkFreeFunction :: proc (
	pUserData: rawptr,
	pMemory: rawptr,
);
PFN_vkVoidFunction :: proc (
);
PFN_vkDebugReportCallbackEXT :: proc (
	flags: VkDebugReportFlagsEXT,
	objectType: VkDebugReportObjectTypeEXT,
	object: u64,
	location: u64,
	messageCode: i32,
	pLayerPrefix: cstring,
	pMessage: cstring,
	pUserData: rawptr,
) -> VkBool32;
PFN_vkDebugUtilsMessengerCallbackEXT :: proc (
	messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
	messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
	pCallbackData: ^VkDebugUtilsMessengerCallbackDataEXT,
	pUserData: rawptr,
) -> VkBool32;


VkBaseOutStructure :: struct {
	sType: VkStructureType,
	pNext: ^VkBaseOutStructure,
}


VkBaseInStructure :: struct {
	sType: VkStructureType,
	pNext: ^VkBaseInStructure,
}


VkOffset2D :: struct {
	x: i32,
	y: i32,
}


VkOffset3D :: struct {
	x: i32,
	y: i32,
	z: i32,
}


VkExtent2D :: struct {
	width: u32,
	height: u32,
}


VkExtent3D :: struct {
	width: u32,
	height: u32,
	depth: u32,
}


VkViewport :: struct {
	x: f32,
	y: f32,
	width: f32,
	height: f32,
	minDepth: f32,
	maxDepth: f32,
}


VkRect2D :: struct {
	offset: VkOffset2D,
	extent: VkExtent2D,
}


VkClearRect :: struct {
	rect: VkRect2D,
	baseArrayLayer: u32,
	layerCount: u32,
}


VkComponentMapping :: struct {
	r: VkComponentSwizzle,
	g: VkComponentSwizzle,
	b: VkComponentSwizzle,
	a: VkComponentSwizzle,
}


VkPhysicalDeviceProperties :: struct {
	apiVersion: u32,
	driverVersion: u32,
	vendorID: u32,
	deviceID: u32,
	deviceType: VkPhysicalDeviceType,
	deviceName: [VK_MAX_PHYSICAL_DEVICE_NAME_SIZE]u8,
	pipelineCacheUUID: [VK_UUID_SIZE]u8,
	limits: VkPhysicalDeviceLimits,
	sparseProperties: VkPhysicalDeviceSparseProperties,
}


VkExtensionProperties :: struct {
	extensionName: [VK_MAX_EXTENSION_NAME_SIZE]u8,
	specVersion: u32,
}


VkLayerProperties :: struct {
	layerName: [VK_MAX_EXTENSION_NAME_SIZE]u8,
	specVersion: u32,
	implementationVersion: u32,
	description: [VK_MAX_DESCRIPTION_SIZE]u8,
}


VkApplicationInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pApplicationName: cstring,
	applicationVersion: u32,
	pEngineName: cstring,
	engineVersion: u32,
	apiVersion: u32,
}


VkAllocationCallbacks :: struct {
	pUserData: rawptr,
	pfnAllocation: PFN_vkAllocationFunction,
	pfnReallocation: PFN_vkReallocationFunction,
	pfnFree: PFN_vkFreeFunction,
	pfnInternalAllocation: PFN_vkInternalAllocationNotification,
	pfnInternalFree: PFN_vkInternalFreeNotification,
}


VkDeviceQueueCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDeviceQueueCreateFlags,
	queueFamilyIndex: u32,
	queueCount: u32,
	pQueuePriorities: ^f32,
}


VkDeviceCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDeviceCreateFlags,
	queueCreateInfoCount: u32,
	pQueueCreateInfos: ^VkDeviceQueueCreateInfo,
	enabledLayerCount: u32,
	ppEnabledLayerNames: ^cstring,
	enabledExtensionCount: u32,
	ppEnabledExtensionNames: ^cstring,
	pEnabledFeatures: ^VkPhysicalDeviceFeatures,
}


VkInstanceCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkInstanceCreateFlags,
	pApplicationInfo: ^VkApplicationInfo,
	enabledLayerCount: u32,
	ppEnabledLayerNames: ^cstring,
	enabledExtensionCount: u32,
	ppEnabledExtensionNames: ^cstring,
}


VkQueueFamilyProperties :: struct {
	queueFlags: VkQueueFlags,
	queueCount: u32,
	timestampValidBits: u32,
	minImageTransferGranularity: VkExtent3D,
}


VkPhysicalDeviceMemoryProperties :: struct {
	memoryTypeCount: u32,
	memoryTypes: [VK_MAX_MEMORY_TYPES]VkMemoryType,
	memoryHeapCount: u32,
	memoryHeaps: [VK_MAX_MEMORY_HEAPS]VkMemoryHeap,
}


VkMemoryAllocateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	allocationSize: VkDeviceSize,
	memoryTypeIndex: u32,
}


VkMemoryRequirements :: struct {
	size: VkDeviceSize,
	alignment: VkDeviceSize,
	memoryTypeBits: u32,
}


VkSparseImageFormatProperties :: struct {
	aspectMask: VkImageAspectFlags,
	imageGranularity: VkExtent3D,
	flags: VkSparseImageFormatFlags,
}


VkSparseImageMemoryRequirements :: struct {
	formatProperties: VkSparseImageFormatProperties,
	imageMipTailFirstLod: u32,
	imageMipTailSize: VkDeviceSize,
	imageMipTailOffset: VkDeviceSize,
	imageMipTailStride: VkDeviceSize,
}


VkMemoryType :: struct {
	propertyFlags: VkMemoryPropertyFlags,
	heapIndex: u32,
}


VkMemoryHeap :: struct {
	size: VkDeviceSize,
	flags: VkMemoryHeapFlags,
}


VkMappedMemoryRange :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memory: VkDeviceMemory,
	offset: VkDeviceSize,
	size: VkDeviceSize,
}


VkFormatProperties :: struct {
	linearTilingFeatures: VkFormatFeatureFlags,
	optimalTilingFeatures: VkFormatFeatureFlags,
	bufferFeatures: VkFormatFeatureFlags,
}


VkImageFormatProperties :: struct {
	maxExtent: VkExtent3D,
	maxMipLevels: u32,
	maxArrayLayers: u32,
	sampleCounts: VkSampleCountFlags,
	maxResourceSize: VkDeviceSize,
}


VkDescriptorBufferInfo :: struct {
	buffer: VkBuffer,
	offset: VkDeviceSize,
	range: VkDeviceSize,
}


VkDescriptorImageInfo :: struct {
	sampler: VkSampler,
	imageView: VkImageView,
	imageLayout: VkImageLayout,
}


VkWriteDescriptorSet :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	dstSet: VkDescriptorSet,
	dstBinding: u32,
	dstArrayElement: u32,
	descriptorCount: u32,
	descriptorType: VkDescriptorType,
	pImageInfo: ^VkDescriptorImageInfo,
	pBufferInfo: ^VkDescriptorBufferInfo,
	pTexelBufferView: ^VkBufferView,
}


VkCopyDescriptorSet :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	srcSet: VkDescriptorSet,
	srcBinding: u32,
	srcArrayElement: u32,
	dstSet: VkDescriptorSet,
	dstBinding: u32,
	dstArrayElement: u32,
	descriptorCount: u32,
}


VkBufferCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkBufferCreateFlags,
	size: VkDeviceSize,
	usage: VkBufferUsageFlags,
	sharingMode: VkSharingMode,
	queueFamilyIndexCount: u32,
	pQueueFamilyIndices: ^u32,
}


VkBufferViewCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkBufferViewCreateFlags,
	buffer: VkBuffer,
	format: VkFormat,
	offset: VkDeviceSize,
	range: VkDeviceSize,
}


VkImageSubresource :: struct {
	aspectMask: VkImageAspectFlags,
	mipLevel: u32,
	arrayLayer: u32,
}


VkImageSubresourceLayers :: struct {
	aspectMask: VkImageAspectFlags,
	mipLevel: u32,
	baseArrayLayer: u32,
	layerCount: u32,
}


VkImageSubresourceRange :: struct {
	aspectMask: VkImageAspectFlags,
	baseMipLevel: u32,
	levelCount: u32,
	baseArrayLayer: u32,
	layerCount: u32,
}


VkMemoryBarrier :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	srcAccessMask: VkAccessFlags,
	dstAccessMask: VkAccessFlags,
}


VkBufferMemoryBarrier :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	srcAccessMask: VkAccessFlags,
	dstAccessMask: VkAccessFlags,
	srcQueueFamilyIndex: u32,
	dstQueueFamilyIndex: u32,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	size: VkDeviceSize,
}


VkImageMemoryBarrier :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	srcAccessMask: VkAccessFlags,
	dstAccessMask: VkAccessFlags,
	oldLayout: VkImageLayout,
	newLayout: VkImageLayout,
	srcQueueFamilyIndex: u32,
	dstQueueFamilyIndex: u32,
	image: VkImage,
	subresourceRange: VkImageSubresourceRange,
}


VkImageCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkImageCreateFlags,
	imageType: VkImageType,
	format: VkFormat,
	extent: VkExtent3D,
	mipLevels: u32,
	arrayLayers: u32,
	samples: VkSampleCountFlagBits,
	tiling: VkImageTiling,
	usage: VkImageUsageFlags,
	sharingMode: VkSharingMode,
	queueFamilyIndexCount: u32,
	pQueueFamilyIndices: ^u32,
	initialLayout: VkImageLayout,
}


VkSubresourceLayout :: struct {
	offset: VkDeviceSize,
	size: VkDeviceSize,
	rowPitch: VkDeviceSize,
	arrayPitch: VkDeviceSize,
	depthPitch: VkDeviceSize,
}


VkImageViewCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkImageViewCreateFlags,
	image: VkImage,
	viewType: VkImageViewType,
	format: VkFormat,
	components: VkComponentMapping,
	subresourceRange: VkImageSubresourceRange,
}


VkBufferCopy :: struct {
	srcOffset: VkDeviceSize,
	dstOffset: VkDeviceSize,
	size: VkDeviceSize,
}


VkSparseMemoryBind :: struct {
	resourceOffset: VkDeviceSize,
	size: VkDeviceSize,
	memory: VkDeviceMemory,
	memoryOffset: VkDeviceSize,
	flags: VkSparseMemoryBindFlags,
}


VkSparseImageMemoryBind :: struct {
	subresource: VkImageSubresource,
	offset: VkOffset3D,
	extent: VkExtent3D,
	memory: VkDeviceMemory,
	memoryOffset: VkDeviceSize,
	flags: VkSparseMemoryBindFlags,
}


VkSparseBufferMemoryBindInfo :: struct {
	buffer: VkBuffer,
	bindCount: u32,
	pBinds: ^VkSparseMemoryBind,
}


VkSparseImageOpaqueMemoryBindInfo :: struct {
	image: VkImage,
	bindCount: u32,
	pBinds: ^VkSparseMemoryBind,
}


VkSparseImageMemoryBindInfo :: struct {
	image: VkImage,
	bindCount: u32,
	pBinds: ^VkSparseImageMemoryBind,
}


VkBindSparseInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	waitSemaphoreCount: u32,
	pWaitSemaphores: ^VkSemaphore,
	bufferBindCount: u32,
	pBufferBinds: ^VkSparseBufferMemoryBindInfo,
	imageOpaqueBindCount: u32,
	pImageOpaqueBinds: ^VkSparseImageOpaqueMemoryBindInfo,
	imageBindCount: u32,
	pImageBinds: ^VkSparseImageMemoryBindInfo,
	signalSemaphoreCount: u32,
	pSignalSemaphores: ^VkSemaphore,
}


VkImageCopy :: struct {
	srcSubresource: VkImageSubresourceLayers,
	srcOffset: VkOffset3D,
	dstSubresource: VkImageSubresourceLayers,
	dstOffset: VkOffset3D,
	extent: VkExtent3D,
}


VkImageBlit :: struct {
	srcSubresource: VkImageSubresourceLayers,
	srcOffsets: VkOffset3D,
	dstSubresource: VkImageSubresourceLayers,
	dstOffsets: VkOffset3D,
}


VkBufferImageCopy :: struct {
	bufferOffset: VkDeviceSize,
	bufferRowLength: u32,
	bufferImageHeight: u32,
	imageSubresource: VkImageSubresourceLayers,
	imageOffset: VkOffset3D,
	imageExtent: VkExtent3D,
}


VkImageResolve :: struct {
	srcSubresource: VkImageSubresourceLayers,
	srcOffset: VkOffset3D,
	dstSubresource: VkImageSubresourceLayers,
	dstOffset: VkOffset3D,
	extent: VkExtent3D,
}


VkShaderModuleCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkShaderModuleCreateFlags,
	codeSize: u64,
	pCode: ^u32,
}


VkDescriptorSetLayoutBinding :: struct {
	binding: u32,
	descriptorType: VkDescriptorType,
	descriptorCount: u32,
	stageFlags: VkShaderStageFlags,
	pImmutableSamplers: ^VkSampler,
}


VkDescriptorSetLayoutCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDescriptorSetLayoutCreateFlags,
	bindingCount: u32,
	pBindings: ^VkDescriptorSetLayoutBinding,
}


VkDescriptorPoolSize :: struct {
	type: VkDescriptorType,
	descriptorCount: u32,
}


VkDescriptorPoolCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDescriptorPoolCreateFlags,
	maxSets: u32,
	poolSizeCount: u32,
	pPoolSizes: ^VkDescriptorPoolSize,
}


VkDescriptorSetAllocateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	descriptorPool: VkDescriptorPool,
	descriptorSetCount: u32,
	pSetLayouts: ^VkDescriptorSetLayout,
}


VkSpecializationMapEntry :: struct {
	constantID: u32,
	offset: u32,
	size: u64,
}


VkSpecializationInfo :: struct {
	mapEntryCount: u32,
	pMapEntries: ^VkSpecializationMapEntry,
	dataSize: u64,
	pData: rawptr,
}


VkPipelineShaderStageCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineShaderStageCreateFlags,
	stage: VkShaderStageFlagBits,
	module: VkShaderModule,
	pName: cstring,
	pSpecializationInfo: ^VkSpecializationInfo,
}


VkComputePipelineCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineCreateFlags,
	stage: VkPipelineShaderStageCreateInfo,
	layout: VkPipelineLayout,
	basePipelineHandle: VkPipeline,
	basePipelineIndex: i32,
}


VkVertexInputBindingDescription :: struct {
	binding: u32,
	stride: u32,
	inputRate: VkVertexInputRate,
}


VkVertexInputAttributeDescription :: struct {
	location: u32,
	binding: u32,
	format: VkFormat,
	offset: u32,
}


VkPipelineVertexInputStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineVertexInputStateCreateFlags,
	vertexBindingDescriptionCount: u32,
	pVertexBindingDescriptions: ^VkVertexInputBindingDescription,
	vertexAttributeDescriptionCount: u32,
	pVertexAttributeDescriptions: ^VkVertexInputAttributeDescription,
}


VkPipelineInputAssemblyStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineInputAssemblyStateCreateFlags,
	topology: VkPrimitiveTopology,
	primitiveRestartEnable: VkBool32,
}


VkPipelineTessellationStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineTessellationStateCreateFlags,
	patchControlPoints: u32,
}


VkPipelineViewportStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineViewportStateCreateFlags,
	viewportCount: u32,
	pViewports: ^VkViewport,
	scissorCount: u32,
	pScissors: ^VkRect2D,
}


VkPipelineRasterizationStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineRasterizationStateCreateFlags,
	depthClampEnable: VkBool32,
	rasterizerDiscardEnable: VkBool32,
	polygonMode: VkPolygonMode,
	cullMode: VkCullModeFlags,
	frontFace: VkFrontFace,
	depthBiasEnable: VkBool32,
	depthBiasConstantFactor: f32,
	depthBiasClamp: f32,
	depthBiasSlopeFactor: f32,
	lineWidth: f32,
}


VkPipelineMultisampleStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineMultisampleStateCreateFlags,
	rasterizationSamples: VkSampleCountFlagBits,
	sampleShadingEnable: VkBool32,
	minSampleShading: f32,
	pSampleMask: ^VkSampleMask,
	alphaToCoverageEnable: VkBool32,
	alphaToOneEnable: VkBool32,
}


VkPipelineColorBlendAttachmentState :: struct {
	blendEnable: VkBool32,
	srcColorBlendFactor: VkBlendFactor,
	dstColorBlendFactor: VkBlendFactor,
	colorBlendOp: VkBlendOp,
	srcAlphaBlendFactor: VkBlendFactor,
	dstAlphaBlendFactor: VkBlendFactor,
	alphaBlendOp: VkBlendOp,
	colorWriteMask: VkColorComponentFlags,
}


VkPipelineColorBlendStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineColorBlendStateCreateFlags,
	logicOpEnable: VkBool32,
	logicOp: VkLogicOp,
	attachmentCount: u32,
	pAttachments: ^VkPipelineColorBlendAttachmentState,
	blendConstants: f32,
}


VkPipelineDynamicStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineDynamicStateCreateFlags,
	dynamicStateCount: u32,
	pDynamicStates: ^VkDynamicState,
}


VkStencilOpState :: struct {
	failOp: VkStencilOp,
	passOp: VkStencilOp,
	depthFailOp: VkStencilOp,
	compareOp: VkCompareOp,
	compareMask: u32,
	writeMask: u32,
	reference: u32,
}


VkPipelineDepthStencilStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineDepthStencilStateCreateFlags,
	depthTestEnable: VkBool32,
	depthWriteEnable: VkBool32,
	depthCompareOp: VkCompareOp,
	depthBoundsTestEnable: VkBool32,
	stencilTestEnable: VkBool32,
	front: VkStencilOpState,
	back: VkStencilOpState,
	minDepthBounds: f32,
	maxDepthBounds: f32,
}


VkGraphicsPipelineCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineCreateFlags,
	stageCount: u32,
	pStages: ^VkPipelineShaderStageCreateInfo,
	pVertexInputState: ^VkPipelineVertexInputStateCreateInfo,
	pInputAssemblyState: ^VkPipelineInputAssemblyStateCreateInfo,
	pTessellationState: ^VkPipelineTessellationStateCreateInfo,
	pViewportState: ^VkPipelineViewportStateCreateInfo,
	pRasterizationState: ^VkPipelineRasterizationStateCreateInfo,
	pMultisampleState: ^VkPipelineMultisampleStateCreateInfo,
	pDepthStencilState: ^VkPipelineDepthStencilStateCreateInfo,
	pColorBlendState: ^VkPipelineColorBlendStateCreateInfo,
	pDynamicState: ^VkPipelineDynamicStateCreateInfo,
	layout: VkPipelineLayout,
	renderPass: VkRenderPass,
	subpass: u32,
	basePipelineHandle: VkPipeline,
	basePipelineIndex: i32,
}


VkPipelineCacheCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineCacheCreateFlags,
	initialDataSize: u64,
	pInitialData: rawptr,
}


VkPushConstantRange :: struct {
	stageFlags: VkShaderStageFlags,
	offset: u32,
	size: u32,
}


VkPipelineLayoutCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineLayoutCreateFlags,
	setLayoutCount: u32,
	pSetLayouts: ^VkDescriptorSetLayout,
	pushConstantRangeCount: u32,
	pPushConstantRanges: ^VkPushConstantRange,
}


VkSamplerCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkSamplerCreateFlags,
	magFilter: VkFilter,
	minFilter: VkFilter,
	mipmapMode: VkSamplerMipmapMode,
	addressModeU: VkSamplerAddressMode,
	addressModeV: VkSamplerAddressMode,
	addressModeW: VkSamplerAddressMode,
	mipLodBias: f32,
	anisotropyEnable: VkBool32,
	maxAnisotropy: f32,
	compareEnable: VkBool32,
	compareOp: VkCompareOp,
	minLod: f32,
	maxLod: f32,
	borderColor: VkBorderColor,
	unnormalizedCoordinates: VkBool32,
}


VkCommandPoolCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkCommandPoolCreateFlags,
	queueFamilyIndex: u32,
}


VkCommandBufferAllocateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	commandPool: VkCommandPool,
	level: VkCommandBufferLevel,
	commandBufferCount: u32,
}


VkCommandBufferInheritanceInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	renderPass: VkRenderPass,
	subpass: u32,
	framebuffer: VkFramebuffer,
	occlusionQueryEnable: VkBool32,
	queryFlags: VkQueryControlFlags,
	pipelineStatistics: VkQueryPipelineStatisticFlags,
}


VkCommandBufferBeginInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkCommandBufferUsageFlags,
	pInheritanceInfo: ^VkCommandBufferInheritanceInfo,
}


VkRenderPassBeginInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	renderPass: VkRenderPass,
	framebuffer: VkFramebuffer,
	renderArea: VkRect2D,
	clearValueCount: u32,
	pClearValues: ^VkClearValue,
}


// TODO: fix binding
VkClearColorValue :: struct #raw_union {
	float32: [4]f32,
	int32: [4]i32,
	uint32: [4]u32,
}


VkClearDepthStencilValue :: struct {
	depth: f32,
	stencil: u32,
}


VkClearValue :: struct #raw_union {
	color: VkClearColorValue,
	depthStencil: VkClearDepthStencilValue,
}


VkClearAttachment :: struct {
	aspectMask: VkImageAspectFlags,
	colorAttachment: u32,
	clearValue: VkClearValue,
}


VkAttachmentDescription :: struct {
	flags: VkAttachmentDescriptionFlags,
	format: VkFormat,
	samples: VkSampleCountFlagBits,
	loadOp: VkAttachmentLoadOp,
	storeOp: VkAttachmentStoreOp,
	stencilLoadOp: VkAttachmentLoadOp,
	stencilStoreOp: VkAttachmentStoreOp,
	initialLayout: VkImageLayout,
	finalLayout: VkImageLayout,
}


VkAttachmentReference :: struct {
	attachment: u32,
	layout: VkImageLayout,
}


VkSubpassDescription :: struct {
	flags: VkSubpassDescriptionFlags,
	pipelineBindPoint: VkPipelineBindPoint,
	inputAttachmentCount: u32,
	pInputAttachments: ^VkAttachmentReference,
	colorAttachmentCount: u32,
	pColorAttachments: ^VkAttachmentReference,
	pResolveAttachments: ^VkAttachmentReference,
	pDepthStencilAttachment: ^VkAttachmentReference,
	preserveAttachmentCount: u32,
	pPreserveAttachments: ^u32,
}


VkSubpassDependency :: struct {
	srcSubpass: u32,
	dstSubpass: u32,
	srcStageMask: VkPipelineStageFlags,
	dstStageMask: VkPipelineStageFlags,
	srcAccessMask: VkAccessFlags,
	dstAccessMask: VkAccessFlags,
	dependencyFlags: VkDependencyFlags,
}


VkRenderPassCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkRenderPassCreateFlags,
	attachmentCount: u32,
	pAttachments: ^VkAttachmentDescription,
	subpassCount: u32,
	pSubpasses: ^VkSubpassDescription,
	dependencyCount: u32,
	pDependencies: ^VkSubpassDependency,
}


VkEventCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkEventCreateFlags,
}


VkFenceCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkFenceCreateFlags,
}


VkPhysicalDeviceFeatures :: struct {
	robustBufferAccess: VkBool32,
	fullDrawIndexUint32: VkBool32,
	imageCubeArray: VkBool32,
	independentBlend: VkBool32,
	geometryShader: VkBool32,
	tessellationShader: VkBool32,
	sampleRateShading: VkBool32,
	dualSrcBlend: VkBool32,
	logicOp: VkBool32,
	multiDrawIndirect: VkBool32,
	drawIndirectFirstInstance: VkBool32,
	depthClamp: VkBool32,
	depthBiasClamp: VkBool32,
	fillModeNonSolid: VkBool32,
	depthBounds: VkBool32,
	wideLines: VkBool32,
	largePoints: VkBool32,
	alphaToOne: VkBool32,
	multiViewport: VkBool32,
	samplerAnisotropy: VkBool32,
	textureCompressionETC2: VkBool32,
	textureCompressionASTC_LDR: VkBool32,
	textureCompressionBC: VkBool32,
	occlusionQueryPrecise: VkBool32,
	pipelineStatisticsQuery: VkBool32,
	vertexPipelineStoresAndAtomics: VkBool32,
	fragmentStoresAndAtomics: VkBool32,
	shaderTessellationAndGeometryPointSize: VkBool32,
	shaderImageGatherExtended: VkBool32,
	shaderStorageImageExtendedFormats: VkBool32,
	shaderStorageImageMultisample: VkBool32,
	shaderStorageImageReadWithoutFormat: VkBool32,
	shaderStorageImageWriteWithoutFormat: VkBool32,
	shaderUniformBufferArrayDynamicIndexing: VkBool32,
	shaderSampledImageArrayDynamicIndexing: VkBool32,
	shaderStorageBufferArrayDynamicIndexing: VkBool32,
	shaderStorageImageArrayDynamicIndexing: VkBool32,
	shaderClipDistance: VkBool32,
	shaderCullDistance: VkBool32,
	shaderFloat64: VkBool32,
	shaderInt64: VkBool32,
	shaderInt16: VkBool32,
	shaderResourceResidency: VkBool32,
	shaderResourceMinLod: VkBool32,
	sparseBinding: VkBool32,
	sparseResidencyBuffer: VkBool32,
	sparseResidencyImage2D: VkBool32,
	sparseResidencyImage3D: VkBool32,
	sparseResidency2Samples: VkBool32,
	sparseResidency4Samples: VkBool32,
	sparseResidency8Samples: VkBool32,
	sparseResidency16Samples: VkBool32,
	sparseResidencyAliased: VkBool32,
	variableMultisampleRate: VkBool32,
	inheritedQueries: VkBool32,
}


VkPhysicalDeviceSparseProperties :: struct {
	residencyStandard2DBlockShape: VkBool32,
	residencyStandard2DMultisampleBlockShape: VkBool32,
	residencyStandard3DBlockShape: VkBool32,
	residencyAlignedMipSize: VkBool32,
	residencyNonResidentStrict: VkBool32,
}


VkPhysicalDeviceLimits :: struct {
	maxImageDimension1D: u32,
	maxImageDimension2D: u32,
	maxImageDimension3D: u32,
	maxImageDimensionCube: u32,
	maxImageArrayLayers: u32,
	maxTexelBufferElements: u32,
	maxUniformBufferRange: u32,
	maxStorageBufferRange: u32,
	maxPushConstantsSize: u32,
	maxMemoryAllocationCount: u32,
	maxSamplerAllocationCount: u32,
	bufferImageGranularity: VkDeviceSize,
	sparseAddressSpaceSize: VkDeviceSize,
	maxBoundDescriptorSets: u32,
	maxPerStageDescriptorSamplers: u32,
	maxPerStageDescriptorUniformBuffers: u32,
	maxPerStageDescriptorStorageBuffers: u32,
	maxPerStageDescriptorSampledImages: u32,
	maxPerStageDescriptorStorageImages: u32,
	maxPerStageDescriptorInputAttachments: u32,
	maxPerStageResources: u32,
	maxDescriptorSetSamplers: u32,
	maxDescriptorSetUniformBuffers: u32,
	maxDescriptorSetUniformBuffersDynamic: u32,
	maxDescriptorSetStorageBuffers: u32,
	maxDescriptorSetStorageBuffersDynamic: u32,
	maxDescriptorSetSampledImages: u32,
	maxDescriptorSetStorageImages: u32,
	maxDescriptorSetInputAttachments: u32,
	maxVertexInputAttributes: u32,
	maxVertexInputBindings: u32,
	maxVertexInputAttributeOffset: u32,
	maxVertexInputBindingStride: u32,
	maxVertexOutputComponents: u32,
	maxTessellationGenerationLevel: u32,
	maxTessellationPatchSize: u32,
	maxTessellationControlPerVertexInputComponents: u32,
	maxTessellationControlPerVertexOutputComponents: u32,
	maxTessellationControlPerPatchOutputComponents: u32,
	maxTessellationControlTotalOutputComponents: u32,
	maxTessellationEvaluationInputComponents: u32,
	maxTessellationEvaluationOutputComponents: u32,
	maxGeometryShaderInvocations: u32,
	maxGeometryInputComponents: u32,
	maxGeometryOutputComponents: u32,
	maxGeometryOutputVertices: u32,
	maxGeometryTotalOutputComponents: u32,
	maxFragmentInputComponents: u32,
	maxFragmentOutputAttachments: u32,
	maxFragmentDualSrcAttachments: u32,
	maxFragmentCombinedOutputResources: u32,
	maxComputeSharedMemorySize: u32,
	maxComputeWorkGroupCount: u32,
	maxComputeWorkGroupInvocations: u32,
	maxComputeWorkGroupSize: u32,
	subPixelPrecisionBits: u32,
	subTexelPrecisionBits: u32,
	mipmapPrecisionBits: u32,
	maxDrawIndexedIndexValue: u32,
	maxDrawIndirectCount: u32,
	maxSamplerLodBias: f32,
	maxSamplerAnisotropy: f32,
	maxViewports: u32,
	maxViewportDimensions: u32,
	viewportBoundsRange: f32,
	viewportSubPixelBits: u32,
	minMemoryMapAlignment: u64,
	minTexelBufferOffsetAlignment: VkDeviceSize,
	minUniformBufferOffsetAlignment: VkDeviceSize,
	minStorageBufferOffsetAlignment: VkDeviceSize,
	minTexelOffset: i32,
	maxTexelOffset: u32,
	minTexelGatherOffset: i32,
	maxTexelGatherOffset: u32,
	minInterpolationOffset: f32,
	maxInterpolationOffset: f32,
	subPixelInterpolationOffsetBits: u32,
	maxFramebufferWidth: u32,
	maxFramebufferHeight: u32,
	maxFramebufferLayers: u32,
	framebufferColorSampleCounts: VkSampleCountFlags,
	framebufferDepthSampleCounts: VkSampleCountFlags,
	framebufferStencilSampleCounts: VkSampleCountFlags,
	framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
	maxColorAttachments: u32,
	sampledImageColorSampleCounts: VkSampleCountFlags,
	sampledImageIntegerSampleCounts: VkSampleCountFlags,
	sampledImageDepthSampleCounts: VkSampleCountFlags,
	sampledImageStencilSampleCounts: VkSampleCountFlags,
	storageImageSampleCounts: VkSampleCountFlags,
	maxSampleMaskWords: u32,
	timestampComputeAndGraphics: VkBool32,
	timestampPeriod: f32,
	maxClipDistances: u32,
	maxCullDistances: u32,
	maxCombinedClipAndCullDistances: u32,
	discreteQueuePriorities: u32,
	pointSizeRange: f32,
	lineWidthRange: f32,
	pointSizeGranularity: f32,
	lineWidthGranularity: f32,
	strictLines: VkBool32,
	standardSampleLocations: VkBool32,
	optimalBufferCopyOffsetAlignment: VkDeviceSize,
	optimalBufferCopyRowPitchAlignment: VkDeviceSize,
	nonCoherentAtomSize: VkDeviceSize,
}


VkSemaphoreCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkSemaphoreCreateFlags,
}


VkQueryPoolCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkQueryPoolCreateFlags,
	queryType: VkQueryType,
	queryCount: u32,
	pipelineStatistics: VkQueryPipelineStatisticFlags,
}


VkFramebufferCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkFramebufferCreateFlags,
	renderPass: VkRenderPass,
	attachmentCount: u32,
	pAttachments: ^VkImageView,
	width: u32,
	height: u32,
	layers: u32,
}


VkDrawIndirectCommand :: struct {
	vertexCount: u32,
	instanceCount: u32,
	firstVertex: u32,
	firstInstance: u32,
}


VkDrawIndexedIndirectCommand :: struct {
	indexCount: u32,
	instanceCount: u32,
	firstIndex: u32,
	vertexOffset: i32,
	firstInstance: u32,
}


VkDispatchIndirectCommand :: struct {
	x: u32,
	y: u32,
	z: u32,
}


VkSubmitInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	waitSemaphoreCount: u32,
	pWaitSemaphores: ^VkSemaphore,
	pWaitDstStageMask: ^VkPipelineStageFlags,
	commandBufferCount: u32,
	pCommandBuffers: ^VkCommandBuffer,
	signalSemaphoreCount: u32,
	pSignalSemaphores: ^VkSemaphore,
}


VkDisplayPropertiesKHR :: struct {
	display: VkDisplayKHR,
	displayName: cstring,
	physicalDimensions: VkExtent2D,
	physicalResolution: VkExtent2D,
	supportedTransforms: VkSurfaceTransformFlagsKHR,
	planeReorderPossible: VkBool32,
	persistentContent: VkBool32,
}


VkDisplayPlanePropertiesKHR :: struct {
	currentDisplay: VkDisplayKHR,
	currentStackIndex: u32,
}


VkDisplayModeParametersKHR :: struct {
	visibleRegion: VkExtent2D,
	refreshRate: u32,
}


VkDisplayModePropertiesKHR :: struct {
	displayMode: VkDisplayModeKHR,
	parameters: VkDisplayModeParametersKHR,
}


VkDisplayModeCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDisplayModeCreateFlagsKHR,
	parameters: VkDisplayModeParametersKHR,
}


VkDisplayPlaneCapabilitiesKHR :: struct {
	supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
	minSrcPosition: VkOffset2D,
	maxSrcPosition: VkOffset2D,
	minSrcExtent: VkExtent2D,
	maxSrcExtent: VkExtent2D,
	minDstPosition: VkOffset2D,
	maxDstPosition: VkOffset2D,
	minDstExtent: VkExtent2D,
	maxDstExtent: VkExtent2D,
}


VkDisplaySurfaceCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDisplaySurfaceCreateFlagsKHR,
	displayMode: VkDisplayModeKHR,
	planeIndex: u32,
	planeStackIndex: u32,
	transform: VkSurfaceTransformFlagBitsKHR,
	globalAlpha: f32,
	alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
	imageExtent: VkExtent2D,
}


VkDisplayPresentInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	srcRect: VkRect2D,
	dstRect: VkRect2D,
	persistent: VkBool32,
}


VkSurfaceCapabilitiesKHR :: struct {
	minImageCount: u32,
	maxImageCount: u32,
	currentExtent: VkExtent2D,
	minImageExtent: VkExtent2D,
	maxImageExtent: VkExtent2D,
	maxImageArrayLayers: u32,
	supportedTransforms: VkSurfaceTransformFlagsKHR,
	currentTransform: VkSurfaceTransformFlagBitsKHR,
	supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
	supportedUsageFlags: VkImageUsageFlags,
}


VkAndroidSurfaceCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkAndroidSurfaceCreateFlagsKHR,
	window: ^ANativeWindow,
}


VkViSurfaceCreateInfoNN :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkViSurfaceCreateFlagsNN,
	window: rawptr,
}


VkWaylandSurfaceCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkWaylandSurfaceCreateFlagsKHR,
	display: ^wl_display,
	surface: ^wl_surface,
}


VkWin32SurfaceCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkWin32SurfaceCreateFlagsKHR,
	hinstance: HINSTANCE,
	hwnd: HWND,
}


VkXlibSurfaceCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkXlibSurfaceCreateFlagsKHR,
	dpy: ^Display,
	window: Window,
}


VkXcbSurfaceCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkXcbSurfaceCreateFlagsKHR,
	connection: ^xcb_connection_t,
	window: xcb_window_t,
}


VkDirectFBSurfaceCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDirectFBSurfaceCreateFlagsEXT,
	dfb: ^IDirectFB,
	surface: ^IDirectFBSurface,
}


VkImagePipeSurfaceCreateInfoFUCHSIA :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkImagePipeSurfaceCreateFlagsFUCHSIA,
	imagePipeHandle: zx_handle_t,
}


VkStreamDescriptorSurfaceCreateInfoGGP :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkStreamDescriptorSurfaceCreateFlagsGGP,
	streamDescriptor: GgpStreamDescriptor,
}


VkSurfaceFormatKHR :: struct {
	format: VkFormat,
	colorSpace: VkColorSpaceKHR,
}


VkSwapchainCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkSwapchainCreateFlagsKHR,
	surface: VkSurfaceKHR,
	minImageCount: u32,
	imageFormat: VkFormat,
	imageColorSpace: VkColorSpaceKHR,
	imageExtent: VkExtent2D,
	imageArrayLayers: u32,
	imageUsage: VkImageUsageFlags,
	imageSharingMode: VkSharingMode,
	queueFamilyIndexCount: u32,
	pQueueFamilyIndices: ^u32,
	preTransform: VkSurfaceTransformFlagBitsKHR,
	compositeAlpha: VkCompositeAlphaFlagBitsKHR,
	presentMode: VkPresentModeKHR,
	clipped: VkBool32,
	oldSwapchain: VkSwapchainKHR,
}


VkPresentInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	waitSemaphoreCount: u32,
	pWaitSemaphores: ^VkSemaphore,
	swapchainCount: u32,
	pSwapchains: ^VkSwapchainKHR,
	pImageIndices: ^u32,
	pResults: ^VkResult,
}


VkDebugReportCallbackCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDebugReportFlagsEXT,
	pfnCallback: PFN_vkDebugReportCallbackEXT,
	pUserData: rawptr,
}


VkValidationFlagsEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	disabledValidationCheckCount: u32,
	pDisabledValidationChecks: ^VkValidationCheckEXT,
}


VkValidationFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	enabledValidationFeatureCount: u32,
	pEnabledValidationFeatures: ^VkValidationFeatureEnableEXT,
	disabledValidationFeatureCount: u32,
	pDisabledValidationFeatures: ^VkValidationFeatureDisableEXT,
}


VkPipelineRasterizationStateRasterizationOrderAMD :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	rasterizationOrder: VkRasterizationOrderAMD,
}


VkDebugMarkerObjectNameInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	objectType: VkDebugReportObjectTypeEXT,
	object: u64,
	pObjectName: cstring,
}


VkDebugMarkerObjectTagInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	objectType: VkDebugReportObjectTypeEXT,
	object: u64,
	tagName: u64,
	tagSize: u64,
	pTag: rawptr,
}


VkDebugMarkerMarkerInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pMarkerName: cstring,
	color: f32,
}


VkDedicatedAllocationImageCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	dedicatedAllocation: VkBool32,
}


VkDedicatedAllocationBufferCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	dedicatedAllocation: VkBool32,
}


VkDedicatedAllocationMemoryAllocateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	image: VkImage,
	buffer: VkBuffer,
}


VkExternalImageFormatPropertiesNV :: struct {
	imageFormatProperties: VkImageFormatProperties,
	externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
	exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
	compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
}


VkExternalMemoryImageCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}


VkExportMemoryAllocateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}


VkImportMemoryWin32HandleInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleType: VkExternalMemoryHandleTypeFlagsNV,
	handle: HANDLE,
}


VkExportMemoryWin32HandleInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pAttributes: ^SECURITY_ATTRIBUTES,
	dwAccess: DWORD,
}


VkWin32KeyedMutexAcquireReleaseInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	acquireCount: u32,
	pAcquireSyncs: ^VkDeviceMemory,
	pAcquireKeys: ^u64,
	pAcquireTimeoutMilliseconds: ^u32,
	releaseCount: u32,
	pReleaseSyncs: ^VkDeviceMemory,
	pReleaseKeys: ^u64,
}


VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceGeneratedCommands: VkBool32,
}


VkDevicePrivateDataCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	privateDataSlotRequestCount: u32,
}


VkPrivateDataSlotCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPrivateDataSlotCreateFlagsEXT,
}


VkPhysicalDevicePrivateDataFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	privateData: VkBool32,
}


VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxGraphicsShaderGroupCount: u32,
	maxIndirectSequenceCount: u32,
	maxIndirectCommandsTokenCount: u32,
	maxIndirectCommandsStreamCount: u32,
	maxIndirectCommandsTokenOffset: u32,
	maxIndirectCommandsStreamStride: u32,
	minSequencesCountBufferOffsetAlignment: u32,
	minSequencesIndexBufferOffsetAlignment: u32,
	minIndirectCommandsBufferOffsetAlignment: u32,
}


VkGraphicsShaderGroupCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	stageCount: u32,
	pStages: ^VkPipelineShaderStageCreateInfo,
	pVertexInputState: ^VkPipelineVertexInputStateCreateInfo,
	pTessellationState: ^VkPipelineTessellationStateCreateInfo,
}


VkGraphicsPipelineShaderGroupsCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	groupCount: u32,
	pGroups: ^VkGraphicsShaderGroupCreateInfoNV,
	pipelineCount: u32,
	pPipelines: ^VkPipeline,
}


VkBindShaderGroupIndirectCommandNV :: struct {
	groupIndex: u32,
}


VkBindIndexBufferIndirectCommandNV :: struct {
	bufferAddress: VkDeviceAddress,
	size: u32,
	indexType: VkIndexType,
}


VkBindVertexBufferIndirectCommandNV :: struct {
	bufferAddress: VkDeviceAddress,
	size: u32,
	stride: u32,
}


VkSetStateFlagsIndirectCommandNV :: struct {
	data: u32,
}


VkIndirectCommandsStreamNV :: struct {
	buffer: VkBuffer,
	offset: VkDeviceSize,
}


VkIndirectCommandsLayoutTokenNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	tokenType: VkIndirectCommandsTokenTypeNV,
	stream: u32,
	offset: u32,
	vertexBindingUnit: u32,
	vertexDynamicStride: VkBool32,
	pushconstantPipelineLayout: VkPipelineLayout,
	pushconstantShaderStageFlags: VkShaderStageFlags,
	pushconstantOffset: u32,
	pushconstantSize: u32,
	indirectStateFlags: VkIndirectStateFlagsNV,
	indexTypeCount: u32,
	pIndexTypes: ^VkIndexType,
	pIndexTypeValues: ^u32,
}


VkIndirectCommandsLayoutCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkIndirectCommandsLayoutUsageFlagsNV,
	pipelineBindPoint: VkPipelineBindPoint,
	tokenCount: u32,
	pTokens: ^VkIndirectCommandsLayoutTokenNV,
	streamCount: u32,
	pStreamStrides: ^u32,
}


VkGeneratedCommandsInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pipelineBindPoint: VkPipelineBindPoint,
	pipeline: VkPipeline,
	indirectCommandsLayout: VkIndirectCommandsLayoutNV,
	streamCount: u32,
	pStreams: ^VkIndirectCommandsStreamNV,
	sequencesCount: u32,
	preprocessBuffer: VkBuffer,
	preprocessOffset: VkDeviceSize,
	preprocessSize: VkDeviceSize,
	sequencesCountBuffer: VkBuffer,
	sequencesCountOffset: VkDeviceSize,
	sequencesIndexBuffer: VkBuffer,
	sequencesIndexOffset: VkDeviceSize,
}


VkGeneratedCommandsMemoryRequirementsInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pipelineBindPoint: VkPipelineBindPoint,
	pipeline: VkPipeline,
	indirectCommandsLayout: VkIndirectCommandsLayoutNV,
	maxSequencesCount: u32,
}


VkPhysicalDeviceFeatures2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	features: VkPhysicalDeviceFeatures,
}


VkPhysicalDeviceFeatures2KHR :: struct {
}


VkPhysicalDeviceProperties2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	properties: VkPhysicalDeviceProperties,
}


VkPhysicalDeviceProperties2KHR :: struct {
}


VkFormatProperties2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	formatProperties: VkFormatProperties,
}


VkFormatProperties2KHR :: struct {
}


VkImageFormatProperties2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	imageFormatProperties: VkImageFormatProperties,
}


VkImageFormatProperties2KHR :: struct {
}


VkPhysicalDeviceImageFormatInfo2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	format: VkFormat,
	type: VkImageType,
	tiling: VkImageTiling,
	usage: VkImageUsageFlags,
	flags: VkImageCreateFlags,
}


VkPhysicalDeviceImageFormatInfo2KHR :: struct {
}


VkQueueFamilyProperties2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	queueFamilyProperties: VkQueueFamilyProperties,
}


VkQueueFamilyProperties2KHR :: struct {
}


VkPhysicalDeviceMemoryProperties2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memoryProperties: VkPhysicalDeviceMemoryProperties,
}


VkPhysicalDeviceMemoryProperties2KHR :: struct {
}


VkSparseImageFormatProperties2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	properties: VkSparseImageFormatProperties,
}


VkSparseImageFormatProperties2KHR :: struct {
}


VkPhysicalDeviceSparseImageFormatInfo2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	format: VkFormat,
	type: VkImageType,
	samples: VkSampleCountFlagBits,
	usage: VkImageUsageFlags,
	tiling: VkImageTiling,
}


VkPhysicalDeviceSparseImageFormatInfo2KHR :: struct {
}


VkPhysicalDevicePushDescriptorPropertiesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxPushDescriptors: u32,
}


VkConformanceVersion :: struct {
	major: u8,
	minor: u8,
	subminor: u8,
	patch: u8,
}


VkConformanceVersionKHR :: struct {
}


VkPhysicalDeviceDriverProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	driverID: VkDriverId,
	driverName: [VK_MAX_DRIVER_NAME_SIZE]u8,
	driverInfo: [VK_MAX_DRIVER_INFO_SIZE]u8,
	conformanceVersion: VkConformanceVersion,
}


VkPhysicalDeviceDriverPropertiesKHR :: struct {
}


VkPresentRegionsKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	swapchainCount: u32,
	pRegions: ^VkPresentRegionKHR,
}


VkPresentRegionKHR :: struct {
	rectangleCount: u32,
	pRectangles: ^VkRectLayerKHR,
}


VkRectLayerKHR :: struct {
	offset: VkOffset2D,
	extent: VkExtent2D,
	layer: u32,
}


VkPhysicalDeviceVariablePointersFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	variablePointersStorageBuffer: VkBool32,
	variablePointers: VkBool32,
}


VkPhysicalDeviceVariablePointersFeaturesKHR :: struct {
}


VkPhysicalDeviceVariablePointerFeaturesKHR :: struct {
}


VkPhysicalDeviceVariablePointerFeatures :: struct {
}


VkExternalMemoryProperties :: struct {
	externalMemoryFeatures: VkExternalMemoryFeatureFlags,
	exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
	compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
}


VkExternalMemoryPropertiesKHR :: struct {
}


VkPhysicalDeviceExternalImageFormatInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleType: VkExternalMemoryHandleTypeFlagBits,
}


VkPhysicalDeviceExternalImageFormatInfoKHR :: struct {
}


VkExternalImageFormatProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	externalMemoryProperties: VkExternalMemoryProperties,
}


VkExternalImageFormatPropertiesKHR :: struct {
}


VkPhysicalDeviceExternalBufferInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkBufferCreateFlags,
	usage: VkBufferUsageFlags,
	handleType: VkExternalMemoryHandleTypeFlagBits,
}


VkPhysicalDeviceExternalBufferInfoKHR :: struct {
}


VkExternalBufferProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	externalMemoryProperties: VkExternalMemoryProperties,
}


VkExternalBufferPropertiesKHR :: struct {
}


VkPhysicalDeviceIDProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceUUID: [VK_UUID_SIZE]u8,
	driverUUID: [VK_UUID_SIZE]u8,
	deviceLUID: [VK_LUID_SIZE]u8,
	deviceNodeMask: u32,
	deviceLUIDValid: VkBool32,
}


VkPhysicalDeviceIDPropertiesKHR :: struct {
}


VkExternalMemoryImageCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleTypes: VkExternalMemoryHandleTypeFlags,
}


VkExternalMemoryImageCreateInfoKHR :: struct {
}


VkExternalMemoryBufferCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleTypes: VkExternalMemoryHandleTypeFlags,
}


VkExternalMemoryBufferCreateInfoKHR :: struct {
}


VkExportMemoryAllocateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleTypes: VkExternalMemoryHandleTypeFlags,
}


VkExportMemoryAllocateInfoKHR :: struct {
}


VkImportMemoryWin32HandleInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleType: VkExternalMemoryHandleTypeFlagBits,
	handle: HANDLE,
	name: LPCWSTR,
}


VkExportMemoryWin32HandleInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pAttributes: ^SECURITY_ATTRIBUTES,
	dwAccess: DWORD,
	name: LPCWSTR,
}


VkMemoryWin32HandlePropertiesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memoryTypeBits: u32,
}


VkMemoryGetWin32HandleInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memory: VkDeviceMemory,
	handleType: VkExternalMemoryHandleTypeFlagBits,
}


VkImportMemoryFdInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleType: VkExternalMemoryHandleTypeFlagBits,
	fd: int,
}


VkMemoryFdPropertiesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memoryTypeBits: u32,
}


VkMemoryGetFdInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memory: VkDeviceMemory,
	handleType: VkExternalMemoryHandleTypeFlagBits,
}


VkWin32KeyedMutexAcquireReleaseInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	acquireCount: u32,
	pAcquireSyncs: ^VkDeviceMemory,
	pAcquireKeys: ^u64,
	pAcquireTimeouts: ^u32,
	releaseCount: u32,
	pReleaseSyncs: ^VkDeviceMemory,
	pReleaseKeys: ^u64,
}


VkPhysicalDeviceExternalSemaphoreInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleType: VkExternalSemaphoreHandleTypeFlagBits,
}


VkPhysicalDeviceExternalSemaphoreInfoKHR :: struct {
}


VkExternalSemaphoreProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
	compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
	externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
}


VkExternalSemaphorePropertiesKHR :: struct {
}


VkExportSemaphoreCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleTypes: VkExternalSemaphoreHandleTypeFlags,
}


VkExportSemaphoreCreateInfoKHR :: struct {
}


VkImportSemaphoreWin32HandleInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	semaphore: VkSemaphore,
	flags: VkSemaphoreImportFlags,
	handleType: VkExternalSemaphoreHandleTypeFlagBits,
	handle: HANDLE,
	name: LPCWSTR,
}


VkExportSemaphoreWin32HandleInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pAttributes: ^SECURITY_ATTRIBUTES,
	dwAccess: DWORD,
	name: LPCWSTR,
}


VkD3D12FenceSubmitInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	waitSemaphoreValuesCount: u32,
	pWaitSemaphoreValues: ^u64,
	signalSemaphoreValuesCount: u32,
	pSignalSemaphoreValues: ^u64,
}


VkSemaphoreGetWin32HandleInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	semaphore: VkSemaphore,
	handleType: VkExternalSemaphoreHandleTypeFlagBits,
}


VkImportSemaphoreFdInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	semaphore: VkSemaphore,
	flags: VkSemaphoreImportFlags,
	handleType: VkExternalSemaphoreHandleTypeFlagBits,
	fd: int,
}


VkSemaphoreGetFdInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	semaphore: VkSemaphore,
	handleType: VkExternalSemaphoreHandleTypeFlagBits,
}


VkPhysicalDeviceExternalFenceInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleType: VkExternalFenceHandleTypeFlagBits,
}


VkPhysicalDeviceExternalFenceInfoKHR :: struct {
}


VkExternalFenceProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
	compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
	externalFenceFeatures: VkExternalFenceFeatureFlags,
}


VkExternalFencePropertiesKHR :: struct {
}


VkExportFenceCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleTypes: VkExternalFenceHandleTypeFlags,
}


VkExportFenceCreateInfoKHR :: struct {
}


VkImportFenceWin32HandleInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fence: VkFence,
	flags: VkFenceImportFlags,
	handleType: VkExternalFenceHandleTypeFlagBits,
	handle: HANDLE,
	name: LPCWSTR,
}


VkExportFenceWin32HandleInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pAttributes: ^SECURITY_ATTRIBUTES,
	dwAccess: DWORD,
	name: LPCWSTR,
}


VkFenceGetWin32HandleInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fence: VkFence,
	handleType: VkExternalFenceHandleTypeFlagBits,
}


VkImportFenceFdInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fence: VkFence,
	flags: VkFenceImportFlags,
	handleType: VkExternalFenceHandleTypeFlagBits,
	fd: int,
}


VkFenceGetFdInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fence: VkFence,
	handleType: VkExternalFenceHandleTypeFlagBits,
}


VkPhysicalDeviceMultiviewFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	multiview: VkBool32,
	multiviewGeometryShader: VkBool32,
	multiviewTessellationShader: VkBool32,
}


VkPhysicalDeviceMultiviewFeaturesKHR :: struct {
}


VkPhysicalDeviceMultiviewProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxMultiviewViewCount: u32,
	maxMultiviewInstanceIndex: u32,
}


VkPhysicalDeviceMultiviewPropertiesKHR :: struct {
}


VkRenderPassMultiviewCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	subpassCount: u32,
	pViewMasks: ^u32,
	dependencyCount: u32,
	pViewOffsets: ^i32,
	correlationMaskCount: u32,
	pCorrelationMasks: ^u32,
}


VkRenderPassMultiviewCreateInfoKHR :: struct {
}


VkSurfaceCapabilities2EXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	minImageCount: u32,
	maxImageCount: u32,
	currentExtent: VkExtent2D,
	minImageExtent: VkExtent2D,
	maxImageExtent: VkExtent2D,
	maxImageArrayLayers: u32,
	supportedTransforms: VkSurfaceTransformFlagsKHR,
	currentTransform: VkSurfaceTransformFlagBitsKHR,
	supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
	supportedUsageFlags: VkImageUsageFlags,
	supportedSurfaceCounters: VkSurfaceCounterFlagsEXT,
}


VkDisplayPowerInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	powerState: VkDisplayPowerStateEXT,
}


VkDeviceEventInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceEvent: VkDeviceEventTypeEXT,
}


VkDisplayEventInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	displayEvent: VkDisplayEventTypeEXT,
}


VkSwapchainCounterCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	surfaceCounters: VkSurfaceCounterFlagsEXT,
}


VkPhysicalDeviceGroupProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	physicalDeviceCount: u32,
	physicalDevices: [VK_MAX_DEVICE_GROUP_SIZE]VkPhysicalDevice,
	subsetAllocation: VkBool32,
}


VkPhysicalDeviceGroupPropertiesKHR :: struct {
}


VkMemoryAllocateFlagsInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkMemoryAllocateFlags,
	deviceMask: u32,
}


VkMemoryAllocateFlagsInfoKHR :: struct {
}


VkBindBufferMemoryInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	buffer: VkBuffer,
	memory: VkDeviceMemory,
	memoryOffset: VkDeviceSize,
}


VkBindBufferMemoryInfoKHR :: struct {
}


VkBindBufferMemoryDeviceGroupInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceIndexCount: u32,
	pDeviceIndices: ^u32,
}


VkBindBufferMemoryDeviceGroupInfoKHR :: struct {
}


VkBindImageMemoryInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	image: VkImage,
	memory: VkDeviceMemory,
	memoryOffset: VkDeviceSize,
}


VkBindImageMemoryInfoKHR :: struct {
}


VkBindImageMemoryDeviceGroupInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceIndexCount: u32,
	pDeviceIndices: ^u32,
	splitInstanceBindRegionCount: u32,
	pSplitInstanceBindRegions: ^VkRect2D,
}


VkBindImageMemoryDeviceGroupInfoKHR :: struct {
}


VkDeviceGroupRenderPassBeginInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceMask: u32,
	deviceRenderAreaCount: u32,
	pDeviceRenderAreas: ^VkRect2D,
}


VkDeviceGroupRenderPassBeginInfoKHR :: struct {
}


VkDeviceGroupCommandBufferBeginInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceMask: u32,
}


VkDeviceGroupCommandBufferBeginInfoKHR :: struct {
}


VkDeviceGroupSubmitInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	waitSemaphoreCount: u32,
	pWaitSemaphoreDeviceIndices: ^u32,
	commandBufferCount: u32,
	pCommandBufferDeviceMasks: ^u32,
	signalSemaphoreCount: u32,
	pSignalSemaphoreDeviceIndices: ^u32,
}


VkDeviceGroupSubmitInfoKHR :: struct {
}


VkDeviceGroupBindSparseInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	resourceDeviceIndex: u32,
	memoryDeviceIndex: u32,
}


VkDeviceGroupBindSparseInfoKHR :: struct {
}


VkDeviceGroupPresentCapabilitiesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	presentMask: [VK_MAX_DEVICE_GROUP_SIZE]u32,
	modes: VkDeviceGroupPresentModeFlagsKHR,
}


VkImageSwapchainCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	swapchain: VkSwapchainKHR,
}


VkBindImageMemorySwapchainInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	swapchain: VkSwapchainKHR,
	imageIndex: u32,
}


VkAcquireNextImageInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	swapchain: VkSwapchainKHR,
	timeout: u64,
	semaphore: VkSemaphore,
	fence: VkFence,
	deviceMask: u32,
}


VkDeviceGroupPresentInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	swapchainCount: u32,
	pDeviceMasks: ^u32,
	mode: VkDeviceGroupPresentModeFlagBitsKHR,
}


VkDeviceGroupDeviceCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	physicalDeviceCount: u32,
	pPhysicalDevices: ^VkPhysicalDevice,
}


VkDeviceGroupDeviceCreateInfoKHR :: struct {
}


VkDeviceGroupSwapchainCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	modes: VkDeviceGroupPresentModeFlagsKHR,
}


VkDescriptorUpdateTemplateEntry :: struct {
	dstBinding: u32,
	dstArrayElement: u32,
	descriptorCount: u32,
	descriptorType: VkDescriptorType,
	offset: u64,
	stride: u64,
}


VkDescriptorUpdateTemplateEntryKHR :: struct {
}


VkDescriptorUpdateTemplateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDescriptorUpdateTemplateCreateFlags,
	descriptorUpdateEntryCount: u32,
	pDescriptorUpdateEntries: ^VkDescriptorUpdateTemplateEntry,
	templateType: VkDescriptorUpdateTemplateType,
	descriptorSetLayout: VkDescriptorSetLayout,
	pipelineBindPoint: VkPipelineBindPoint,
	pipelineLayout: VkPipelineLayout,
	set: u32,
}


VkDescriptorUpdateTemplateCreateInfoKHR :: struct {
}


VkXYColorEXT :: struct {
	x: f32,
	y: f32,
}


VkHdrMetadataEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	displayPrimaryRed: VkXYColorEXT,
	displayPrimaryGreen: VkXYColorEXT,
	displayPrimaryBlue: VkXYColorEXT,
	whitePoint: VkXYColorEXT,
	maxLuminance: f32,
	minLuminance: f32,
	maxContentLightLevel: f32,
	maxFrameAverageLightLevel: f32,
}


VkDisplayNativeHdrSurfaceCapabilitiesAMD :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	localDimmingSupport: VkBool32,
}


VkSwapchainDisplayNativeHdrCreateInfoAMD :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	localDimmingEnable: VkBool32,
}


VkRefreshCycleDurationGOOGLE :: struct {
	refreshDuration: u64,
}


VkPastPresentationTimingGOOGLE :: struct {
	presentID: u32,
	desiredPresentTime: u64,
	actualPresentTime: u64,
	earliestPresentTime: u64,
	presentMargin: u64,
}


VkPresentTimesInfoGOOGLE :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	swapchainCount: u32,
	pTimes: ^VkPresentTimeGOOGLE,
}


VkPresentTimeGOOGLE :: struct {
	presentID: u32,
	desiredPresentTime: u64,
}


VkIOSSurfaceCreateInfoMVK :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkIOSSurfaceCreateFlagsMVK,
	pView: rawptr,
}


VkMacOSSurfaceCreateInfoMVK :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkMacOSSurfaceCreateFlagsMVK,
	pView: rawptr,
}


VkMetalSurfaceCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkMetalSurfaceCreateFlagsEXT,
	pLayer: ^CAMetalLayer,
}


VkViewportWScalingNV :: struct {
	xcoeff: f32,
	ycoeff: f32,
}


VkPipelineViewportWScalingStateCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	viewportWScalingEnable: VkBool32,
	viewportCount: u32,
	pViewportWScalings: ^VkViewportWScalingNV,
}


VkViewportSwizzleNV :: struct {
	x: VkViewportCoordinateSwizzleNV,
	y: VkViewportCoordinateSwizzleNV,
	z: VkViewportCoordinateSwizzleNV,
	w: VkViewportCoordinateSwizzleNV,
}


VkPipelineViewportSwizzleStateCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
	viewportCount: u32,
	pViewportSwizzles: ^VkViewportSwizzleNV,
}


VkPhysicalDeviceDiscardRectanglePropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxDiscardRectangles: u32,
}


VkPipelineDiscardRectangleStateCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
	discardRectangleMode: VkDiscardRectangleModeEXT,
	discardRectangleCount: u32,
	pDiscardRectangles: ^VkRect2D,
}


VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	perViewPositionAllComponents: VkBool32,
}


VkInputAttachmentAspectReference :: struct {
	subpass: u32,
	inputAttachmentIndex: u32,
	aspectMask: VkImageAspectFlags,
}


VkInputAttachmentAspectReferenceKHR :: struct {
}


VkRenderPassInputAttachmentAspectCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	aspectReferenceCount: u32,
	pAspectReferences: ^VkInputAttachmentAspectReference,
}


VkRenderPassInputAttachmentAspectCreateInfoKHR :: struct {
}


VkPhysicalDeviceSurfaceInfo2KHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	surface: VkSurfaceKHR,
}


VkSurfaceCapabilities2KHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	surfaceCapabilities: VkSurfaceCapabilitiesKHR,
}


VkSurfaceFormat2KHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	surfaceFormat: VkSurfaceFormatKHR,
}


VkDisplayProperties2KHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	displayProperties: VkDisplayPropertiesKHR,
}


VkDisplayPlaneProperties2KHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	displayPlaneProperties: VkDisplayPlanePropertiesKHR,
}


VkDisplayModeProperties2KHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	displayModeProperties: VkDisplayModePropertiesKHR,
}


VkDisplayPlaneInfo2KHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	mode: VkDisplayModeKHR,
	planeIndex: u32,
}


VkDisplayPlaneCapabilities2KHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	capabilities: VkDisplayPlaneCapabilitiesKHR,
}


VkSharedPresentSurfaceCapabilitiesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	sharedPresentSupportedUsageFlags: VkImageUsageFlags,
}


VkPhysicalDevice16BitStorageFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	storageBuffer16BitAccess: VkBool32,
	uniformAndStorageBuffer16BitAccess: VkBool32,
	storagePushConstant16: VkBool32,
	storageInputOutput16: VkBool32,
}


VkPhysicalDevice16BitStorageFeaturesKHR :: struct {
}


VkPhysicalDeviceSubgroupProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	subgroupSize: u32,
	supportedStages: VkShaderStageFlags,
	supportedOperations: VkSubgroupFeatureFlags,
	quadOperationsInAllStages: VkBool32,
}


VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderSubgroupExtendedTypes: VkBool32,
}


VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR :: struct {
}


VkBufferMemoryRequirementsInfo2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	buffer: VkBuffer,
}


VkBufferMemoryRequirementsInfo2KHR :: struct {
}


VkImageMemoryRequirementsInfo2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	image: VkImage,
}


VkImageMemoryRequirementsInfo2KHR :: struct {
}


VkImageSparseMemoryRequirementsInfo2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	image: VkImage,
}


VkImageSparseMemoryRequirementsInfo2KHR :: struct {
}


VkMemoryRequirements2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memoryRequirements: VkMemoryRequirements,
}


VkMemoryRequirements2KHR :: struct {
}


VkSparseImageMemoryRequirements2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memoryRequirements: VkSparseImageMemoryRequirements,
}


VkSparseImageMemoryRequirements2KHR :: struct {
}


VkPhysicalDevicePointClippingProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pointClippingBehavior: VkPointClippingBehavior,
}


VkPhysicalDevicePointClippingPropertiesKHR :: struct {
}


VkMemoryDedicatedRequirements :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	prefersDedicatedAllocation: VkBool32,
	requiresDedicatedAllocation: VkBool32,
}


VkMemoryDedicatedRequirementsKHR :: struct {
}


VkMemoryDedicatedAllocateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	image: VkImage,
	buffer: VkBuffer,
}


VkMemoryDedicatedAllocateInfoKHR :: struct {
}


VkImageViewUsageCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	usage: VkImageUsageFlags,
}


VkImageViewUsageCreateInfoKHR :: struct {
}


VkPipelineTessellationDomainOriginStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	domainOrigin: VkTessellationDomainOrigin,
}


VkPipelineTessellationDomainOriginStateCreateInfoKHR :: struct {
}


VkSamplerYcbcrConversionInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	conversion: VkSamplerYcbcrConversion,
}


VkSamplerYcbcrConversionInfoKHR :: struct {
}


VkSamplerYcbcrConversionCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	format: VkFormat,
	ycbcrModel: VkSamplerYcbcrModelConversion,
	ycbcrRange: VkSamplerYcbcrRange,
	components: VkComponentMapping,
	xChromaOffset: VkChromaLocation,
	yChromaOffset: VkChromaLocation,
	chromaFilter: VkFilter,
	forceExplicitReconstruction: VkBool32,
}


VkSamplerYcbcrConversionCreateInfoKHR :: struct {
}


VkBindImagePlaneMemoryInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	planeAspect: VkImageAspectFlagBits,
}


VkBindImagePlaneMemoryInfoKHR :: struct {
}


VkImagePlaneMemoryRequirementsInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	planeAspect: VkImageAspectFlagBits,
}


VkImagePlaneMemoryRequirementsInfoKHR :: struct {
}


VkPhysicalDeviceSamplerYcbcrConversionFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	samplerYcbcrConversion: VkBool32,
}


VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR :: struct {
}


VkSamplerYcbcrConversionImageFormatProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	combinedImageSamplerDescriptorCount: u32,
}


VkSamplerYcbcrConversionImageFormatPropertiesKHR :: struct {
}


VkTextureLODGatherFormatPropertiesAMD :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	supportsTextureGatherLODBiasAMD: VkBool32,
}


VkConditionalRenderingBeginInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	flags: VkConditionalRenderingFlagsEXT,
}


VkProtectedSubmitInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	protectedSubmit: VkBool32,
}


VkPhysicalDeviceProtectedMemoryFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	protectedMemory: VkBool32,
}


VkPhysicalDeviceProtectedMemoryProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	protectedNoFault: VkBool32,
}


VkDeviceQueueInfo2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDeviceQueueCreateFlags,
	queueFamilyIndex: u32,
	queueIndex: u32,
}


VkPipelineCoverageToColorStateCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineCoverageToColorStateCreateFlagsNV,
	coverageToColorEnable: VkBool32,
	coverageToColorLocation: u32,
}


VkPhysicalDeviceSamplerFilterMinmaxProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	filterMinmaxSingleComponentFormats: VkBool32,
	filterMinmaxImageComponentMapping: VkBool32,
}


VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT :: struct {
}


VkSampleLocationEXT :: struct {
	x: f32,
	y: f32,
}


VkSampleLocationsInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	sampleLocationsPerPixel: VkSampleCountFlagBits,
	sampleLocationGridSize: VkExtent2D,
	sampleLocationsCount: u32,
	pSampleLocations: ^VkSampleLocationEXT,
}


VkAttachmentSampleLocationsEXT :: struct {
	attachmentIndex: u32,
	sampleLocationsInfo: VkSampleLocationsInfoEXT,
}


VkSubpassSampleLocationsEXT :: struct {
	subpassIndex: u32,
	sampleLocationsInfo: VkSampleLocationsInfoEXT,
}


VkRenderPassSampleLocationsBeginInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	attachmentInitialSampleLocationsCount: u32,
	pAttachmentInitialSampleLocations: ^VkAttachmentSampleLocationsEXT,
	postSubpassSampleLocationsCount: u32,
	pPostSubpassSampleLocations: ^VkSubpassSampleLocationsEXT,
}


VkPipelineSampleLocationsStateCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	sampleLocationsEnable: VkBool32,
	sampleLocationsInfo: VkSampleLocationsInfoEXT,
}


VkPhysicalDeviceSampleLocationsPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	sampleLocationSampleCounts: VkSampleCountFlags,
	maxSampleLocationGridSize: VkExtent2D,
	sampleLocationCoordinateRange: f32,
	sampleLocationSubPixelBits: u32,
	variableSampleLocations: VkBool32,
}


VkMultisamplePropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxSampleLocationGridSize: VkExtent2D,
}


VkSamplerReductionModeCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	reductionMode: VkSamplerReductionMode,
}


VkSamplerReductionModeCreateInfoEXT :: struct {
}


VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	advancedBlendCoherentOperations: VkBool32,
}


VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	advancedBlendMaxColorAttachments: u32,
	advancedBlendIndependentBlend: VkBool32,
	advancedBlendNonPremultipliedSrcColor: VkBool32,
	advancedBlendNonPremultipliedDstColor: VkBool32,
	advancedBlendCorrelatedOverlap: VkBool32,
	advancedBlendAllOperations: VkBool32,
}


VkPipelineColorBlendAdvancedStateCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	srcPremultiplied: VkBool32,
	dstPremultiplied: VkBool32,
	blendOverlap: VkBlendOverlapEXT,
}


VkPhysicalDeviceInlineUniformBlockFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	inlineUniformBlock: VkBool32,
	descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
}


VkPhysicalDeviceInlineUniformBlockPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxInlineUniformBlockSize: u32,
	maxPerStageDescriptorInlineUniformBlocks: u32,
	maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
	maxDescriptorSetInlineUniformBlocks: u32,
	maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
}


VkWriteDescriptorSetInlineUniformBlockEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	dataSize: u32,
	pData: rawptr,
}


VkDescriptorPoolInlineUniformBlockCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxInlineUniformBlockBindings: u32,
}


VkPipelineCoverageModulationStateCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineCoverageModulationStateCreateFlagsNV,
	coverageModulationMode: VkCoverageModulationModeNV,
	coverageModulationTableEnable: VkBool32,
	coverageModulationTableCount: u32,
	pCoverageModulationTable: ^f32,
}


VkImageFormatListCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	viewFormatCount: u32,
	pViewFormats: ^VkFormat,
}


VkImageFormatListCreateInfoKHR :: struct {
}


VkValidationCacheCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkValidationCacheCreateFlagsEXT,
	initialDataSize: u64,
	pInitialData: rawptr,
}


VkShaderModuleValidationCacheCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	validationCache: VkValidationCacheEXT,
}


VkPhysicalDeviceMaintenance3Properties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxPerSetDescriptors: u32,
	maxMemoryAllocationSize: VkDeviceSize,
}


VkPhysicalDeviceMaintenance3PropertiesKHR :: struct {
}


VkDescriptorSetLayoutSupport :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	supported: VkBool32,
}


VkDescriptorSetLayoutSupportKHR :: struct {
}


VkPhysicalDeviceShaderDrawParametersFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderDrawParameters: VkBool32,
}


VkPhysicalDeviceShaderDrawParameterFeatures :: struct {
}


VkPhysicalDeviceShaderFloat16Int8Features :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderFloat16: VkBool32,
	shaderInt8: VkBool32,
}


VkPhysicalDeviceShaderFloat16Int8FeaturesKHR :: struct {
}


VkPhysicalDeviceFloat16Int8FeaturesKHR :: struct {
}


VkPhysicalDeviceFloatControlsProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	denormBehaviorIndependence: VkShaderFloatControlsIndependence,
	roundingModeIndependence: VkShaderFloatControlsIndependence,
	shaderSignedZeroInfNanPreserveFloat16: VkBool32,
	shaderSignedZeroInfNanPreserveFloat32: VkBool32,
	shaderSignedZeroInfNanPreserveFloat64: VkBool32,
	shaderDenormPreserveFloat16: VkBool32,
	shaderDenormPreserveFloat32: VkBool32,
	shaderDenormPreserveFloat64: VkBool32,
	shaderDenormFlushToZeroFloat16: VkBool32,
	shaderDenormFlushToZeroFloat32: VkBool32,
	shaderDenormFlushToZeroFloat64: VkBool32,
	shaderRoundingModeRTEFloat16: VkBool32,
	shaderRoundingModeRTEFloat32: VkBool32,
	shaderRoundingModeRTEFloat64: VkBool32,
	shaderRoundingModeRTZFloat16: VkBool32,
	shaderRoundingModeRTZFloat32: VkBool32,
	shaderRoundingModeRTZFloat64: VkBool32,
}


VkPhysicalDeviceFloatControlsPropertiesKHR :: struct {
}


VkPhysicalDeviceHostQueryResetFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	hostQueryReset: VkBool32,
}


VkPhysicalDeviceHostQueryResetFeaturesEXT :: struct {
}


VkNativeBufferUsage2ANDROID :: struct {
	consumer: u64,
	producer: u64,
}


VkNativeBufferANDROID :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handle: rawptr,
	stride: int,
	format: int,
	usage: int,
	usage2: VkNativeBufferUsage2ANDROID,
}


VkSwapchainImageCreateInfoANDROID :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	usage: VkSwapchainImageUsageFlagsANDROID,
}


VkPhysicalDevicePresentationPropertiesANDROID :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	sharedImage: VkBool32,
}


VkShaderResourceUsageAMD :: struct {
	numUsedVgprs: u32,
	numUsedSgprs: u32,
	ldsSizePerLocalWorkGroup: u32,
	ldsUsageSizeInBytes: u64,
	scratchMemUsageInBytes: u64,
}


VkShaderStatisticsInfoAMD :: struct {
	shaderStageMask: VkShaderStageFlags,
	resourceUsage: VkShaderResourceUsageAMD,
	numPhysicalVgprs: u32,
	numPhysicalSgprs: u32,
	numAvailableVgprs: u32,
	numAvailableSgprs: u32,
	computeWorkGroupSize: u32,
}


VkDeviceQueueGlobalPriorityCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	globalPriority: VkQueueGlobalPriorityEXT,
}


VkDebugUtilsObjectNameInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	objectType: VkObjectType,
	objectHandle: u64,
	pObjectName: cstring,
}


VkDebugUtilsObjectTagInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	objectType: VkObjectType,
	objectHandle: u64,
	tagName: u64,
	tagSize: u64,
	pTag: rawptr,
}


VkDebugUtilsLabelEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pLabelName: cstring,
	color: f32,
}


VkDebugUtilsMessengerCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDebugUtilsMessengerCreateFlagsEXT,
	messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
	messageType: VkDebugUtilsMessageTypeFlagsEXT,
	pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
	pUserData: rawptr,
}


VkDebugUtilsMessengerCallbackDataEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
	pMessageIdName: cstring,
	messageIdNumber: i32,
	pMessage: cstring,
	queueLabelCount: u32,
	pQueueLabels: ^VkDebugUtilsLabelEXT,
	cmdBufLabelCount: u32,
	pCmdBufLabels: ^VkDebugUtilsLabelEXT,
	objectCount: u32,
	pObjects: ^VkDebugUtilsObjectNameInfoEXT,
}


VkImportMemoryHostPointerInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	handleType: VkExternalMemoryHandleTypeFlagBits,
	pHostPointer: rawptr,
}


VkMemoryHostPointerPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memoryTypeBits: u32,
}


VkPhysicalDeviceExternalMemoryHostPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	minImportedHostPointerAlignment: VkDeviceSize,
}


VkPhysicalDeviceConservativeRasterizationPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	primitiveOverestimationSize: f32,
	maxExtraPrimitiveOverestimationSize: f32,
	extraPrimitiveOverestimationSizeGranularity: f32,
	primitiveUnderestimation: VkBool32,
	conservativePointAndLineRasterization: VkBool32,
	degenerateTrianglesRasterized: VkBool32,
	degenerateLinesRasterized: VkBool32,
	fullyCoveredFragmentShaderInputVariable: VkBool32,
	conservativeRasterizationPostDepthCoverage: VkBool32,
}


VkCalibratedTimestampInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	timeDomain: VkTimeDomainEXT,
}


VkPhysicalDeviceShaderCorePropertiesAMD :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderEngineCount: u32,
	shaderArraysPerEngineCount: u32,
	computeUnitsPerShaderArray: u32,
	simdPerComputeUnit: u32,
	wavefrontsPerSimd: u32,
	wavefrontSize: u32,
	sgprsPerSimd: u32,
	minSgprAllocation: u32,
	maxSgprAllocation: u32,
	sgprAllocationGranularity: u32,
	vgprsPerSimd: u32,
	minVgprAllocation: u32,
	maxVgprAllocation: u32,
	vgprAllocationGranularity: u32,
}


VkPhysicalDeviceShaderCoreProperties2AMD :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD,
	activeComputeUnitCount: u32,
}


VkPipelineRasterizationConservativeStateCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
	conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
	extraPrimitiveOverestimationSize: f32,
}


VkPhysicalDeviceDescriptorIndexingFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderInputAttachmentArrayDynamicIndexing: VkBool32,
	shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
	shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
	shaderUniformBufferArrayNonUniformIndexing: VkBool32,
	shaderSampledImageArrayNonUniformIndexing: VkBool32,
	shaderStorageBufferArrayNonUniformIndexing: VkBool32,
	shaderStorageImageArrayNonUniformIndexing: VkBool32,
	shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
	shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
	shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
	descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
	descriptorBindingSampledImageUpdateAfterBind: VkBool32,
	descriptorBindingStorageImageUpdateAfterBind: VkBool32,
	descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
	descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
	descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
	descriptorBindingUpdateUnusedWhilePending: VkBool32,
	descriptorBindingPartiallyBound: VkBool32,
	descriptorBindingVariableDescriptorCount: VkBool32,
	runtimeDescriptorArray: VkBool32,
}


VkPhysicalDeviceDescriptorIndexingFeaturesEXT :: struct {
}


VkPhysicalDeviceDescriptorIndexingProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxUpdateAfterBindDescriptorsInAllPools: u32,
	shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
	shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
	shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
	shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
	shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
	robustBufferAccessUpdateAfterBind: VkBool32,
	quadDivergentImplicitLod: VkBool32,
	maxPerStageDescriptorUpdateAfterBindSamplers: u32,
	maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
	maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
	maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
	maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
	maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
	maxPerStageUpdateAfterBindResources: u32,
	maxDescriptorSetUpdateAfterBindSamplers: u32,
	maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
	maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
	maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
	maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
	maxDescriptorSetUpdateAfterBindSampledImages: u32,
	maxDescriptorSetUpdateAfterBindStorageImages: u32,
	maxDescriptorSetUpdateAfterBindInputAttachments: u32,
}


VkPhysicalDeviceDescriptorIndexingPropertiesEXT :: struct {
}


VkDescriptorSetLayoutBindingFlagsCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	bindingCount: u32,
	pBindingFlags: ^VkDescriptorBindingFlags,
}


VkDescriptorSetLayoutBindingFlagsCreateInfoEXT :: struct {
}


VkDescriptorSetVariableDescriptorCountAllocateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	descriptorSetCount: u32,
	pDescriptorCounts: ^u32,
}


VkDescriptorSetVariableDescriptorCountAllocateInfoEXT :: struct {
}


VkDescriptorSetVariableDescriptorCountLayoutSupport :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxVariableDescriptorCount: u32,
}


VkDescriptorSetVariableDescriptorCountLayoutSupportEXT :: struct {
}


VkAttachmentDescription2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkAttachmentDescriptionFlags,
	format: VkFormat,
	samples: VkSampleCountFlagBits,
	loadOp: VkAttachmentLoadOp,
	storeOp: VkAttachmentStoreOp,
	stencilLoadOp: VkAttachmentLoadOp,
	stencilStoreOp: VkAttachmentStoreOp,
	initialLayout: VkImageLayout,
	finalLayout: VkImageLayout,
}


VkAttachmentDescription2KHR :: struct {
}


VkAttachmentReference2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	attachment: u32,
	layout: VkImageLayout,
	aspectMask: VkImageAspectFlags,
}


VkAttachmentReference2KHR :: struct {
}


VkSubpassDescription2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkSubpassDescriptionFlags,
	pipelineBindPoint: VkPipelineBindPoint,
	viewMask: u32,
	inputAttachmentCount: u32,
	pInputAttachments: ^VkAttachmentReference2,
	colorAttachmentCount: u32,
	pColorAttachments: ^VkAttachmentReference2,
	pResolveAttachments: ^VkAttachmentReference2,
	pDepthStencilAttachment: ^VkAttachmentReference2,
	preserveAttachmentCount: u32,
	pPreserveAttachments: ^u32,
}


VkSubpassDescription2KHR :: struct {
}


VkSubpassDependency2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	srcSubpass: u32,
	dstSubpass: u32,
	srcStageMask: VkPipelineStageFlags,
	dstStageMask: VkPipelineStageFlags,
	srcAccessMask: VkAccessFlags,
	dstAccessMask: VkAccessFlags,
	dependencyFlags: VkDependencyFlags,
	viewOffset: i32,
}


VkSubpassDependency2KHR :: struct {
}


VkRenderPassCreateInfo2 :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkRenderPassCreateFlags,
	attachmentCount: u32,
	pAttachments: ^VkAttachmentDescription2,
	subpassCount: u32,
	pSubpasses: ^VkSubpassDescription2,
	dependencyCount: u32,
	pDependencies: ^VkSubpassDependency2,
	correlatedViewMaskCount: u32,
	pCorrelatedViewMasks: ^u32,
}


VkRenderPassCreateInfo2KHR :: struct {
}


VkSubpassBeginInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	contents: VkSubpassContents,
}


VkSubpassBeginInfoKHR :: struct {
}


VkSubpassEndInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
}


VkSubpassEndInfoKHR :: struct {
}


VkPhysicalDeviceTimelineSemaphoreFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	timelineSemaphore: VkBool32,
}


VkPhysicalDeviceTimelineSemaphoreFeaturesKHR :: struct {
}


VkPhysicalDeviceTimelineSemaphoreProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxTimelineSemaphoreValueDifference: u64,
}


VkPhysicalDeviceTimelineSemaphorePropertiesKHR :: struct {
}


VkSemaphoreTypeCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	semaphoreType: VkSemaphoreType,
	initialValue: u64,
}


VkSemaphoreTypeCreateInfoKHR :: struct {
}


VkTimelineSemaphoreSubmitInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	waitSemaphoreValueCount: u32,
	pWaitSemaphoreValues: ^u64,
	signalSemaphoreValueCount: u32,
	pSignalSemaphoreValues: ^u64,
}


VkTimelineSemaphoreSubmitInfoKHR :: struct {
}


VkSemaphoreWaitInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkSemaphoreWaitFlags,
	semaphoreCount: u32,
	pSemaphores: ^VkSemaphore,
	pValues: ^u64,
}


VkSemaphoreWaitInfoKHR :: struct {
}


VkSemaphoreSignalInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	semaphore: VkSemaphore,
	value: u64,
}


VkSemaphoreSignalInfoKHR :: struct {
}


VkVertexInputBindingDivisorDescriptionEXT :: struct {
	binding: u32,
	divisor: u32,
}


VkPipelineVertexInputDivisorStateCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	vertexBindingDivisorCount: u32,
	pVertexBindingDivisors: ^VkVertexInputBindingDivisorDescriptionEXT,
}


VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxVertexAttribDivisor: u32,
}


VkPhysicalDevicePCIBusInfoPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pciDomain: u32,
	pciBus: u32,
	pciDevice: u32,
	pciFunction: u32,
}


VkImportAndroidHardwareBufferInfoANDROID :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	buffer: ^AHardwareBuffer,
}


VkAndroidHardwareBufferUsageANDROID :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	androidHardwareBufferUsage: u64,
}


VkAndroidHardwareBufferPropertiesANDROID :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	allocationSize: VkDeviceSize,
	memoryTypeBits: u32,
}


VkMemoryGetAndroidHardwareBufferInfoANDROID :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memory: VkDeviceMemory,
}


VkAndroidHardwareBufferFormatPropertiesANDROID :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	format: VkFormat,
	externalFormat: u64,
	formatFeatures: VkFormatFeatureFlags,
	samplerYcbcrConversionComponents: VkComponentMapping,
	suggestedYcbcrModel: VkSamplerYcbcrModelConversion,
	suggestedYcbcrRange: VkSamplerYcbcrRange,
	suggestedXChromaOffset: VkChromaLocation,
	suggestedYChromaOffset: VkChromaLocation,
}


VkCommandBufferInheritanceConditionalRenderingInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	conditionalRenderingEnable: VkBool32,
}


VkExternalFormatANDROID :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	externalFormat: u64,
}


VkPhysicalDevice8BitStorageFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	storageBuffer8BitAccess: VkBool32,
	uniformAndStorageBuffer8BitAccess: VkBool32,
	storagePushConstant8: VkBool32,
}


VkPhysicalDevice8BitStorageFeaturesKHR :: struct {
}


VkPhysicalDeviceConditionalRenderingFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	conditionalRendering: VkBool32,
	inheritedConditionalRendering: VkBool32,
}


VkPhysicalDeviceVulkanMemoryModelFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	vulkanMemoryModel: VkBool32,
	vulkanMemoryModelDeviceScope: VkBool32,
	vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
}


VkPhysicalDeviceVulkanMemoryModelFeaturesKHR :: struct {
}


VkPhysicalDeviceShaderAtomicInt64Features :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderBufferInt64Atomics: VkBool32,
	shaderSharedInt64Atomics: VkBool32,
}


VkPhysicalDeviceShaderAtomicInt64FeaturesKHR :: struct {
}


VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	vertexAttributeInstanceRateDivisor: VkBool32,
	vertexAttributeInstanceRateZeroDivisor: VkBool32,
}


VkQueueFamilyCheckpointPropertiesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	checkpointExecutionStageMask: VkPipelineStageFlags,
}


VkCheckpointDataNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	stage: VkPipelineStageFlagBits,
	pCheckpointMarker: rawptr,
}


VkPhysicalDeviceDepthStencilResolveProperties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	supportedDepthResolveModes: VkResolveModeFlags,
	supportedStencilResolveModes: VkResolveModeFlags,
	independentResolveNone: VkBool32,
	independentResolve: VkBool32,
}


VkPhysicalDeviceDepthStencilResolvePropertiesKHR :: struct {
}


VkSubpassDescriptionDepthStencilResolve :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	depthResolveMode: VkResolveModeFlagBits,
	stencilResolveMode: VkResolveModeFlagBits,
	pDepthStencilResolveAttachment: ^VkAttachmentReference2,
}


VkSubpassDescriptionDepthStencilResolveKHR :: struct {
}


VkImageViewASTCDecodeModeEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	decodeMode: VkFormat,
}


VkPhysicalDeviceASTCDecodeFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	decodeModeSharedExponent: VkBool32,
}


VkPhysicalDeviceTransformFeedbackFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	transformFeedback: VkBool32,
	geometryStreams: VkBool32,
}


VkPhysicalDeviceTransformFeedbackPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxTransformFeedbackStreams: u32,
	maxTransformFeedbackBuffers: u32,
	maxTransformFeedbackBufferSize: VkDeviceSize,
	maxTransformFeedbackStreamDataSize: u32,
	maxTransformFeedbackBufferDataSize: u32,
	maxTransformFeedbackBufferDataStride: u32,
	transformFeedbackQueries: VkBool32,
	transformFeedbackStreamsLinesTriangles: VkBool32,
	transformFeedbackRasterizationStreamSelect: VkBool32,
	transformFeedbackDraw: VkBool32,
}


VkPipelineRasterizationStateStreamCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
	rasterizationStream: u32,
}


VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	representativeFragmentTest: VkBool32,
}


VkPipelineRepresentativeFragmentTestStateCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	representativeFragmentTestEnable: VkBool32,
}


VkPhysicalDeviceExclusiveScissorFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	exclusiveScissor: VkBool32,
}


VkPipelineViewportExclusiveScissorStateCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	exclusiveScissorCount: u32,
	pExclusiveScissors: ^VkRect2D,
}


VkPhysicalDeviceCornerSampledImageFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	cornerSampledImage: VkBool32,
}


VkPhysicalDeviceComputeShaderDerivativesFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	computeDerivativeGroupQuads: VkBool32,
	computeDerivativeGroupLinear: VkBool32,
}


VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fragmentShaderBarycentric: VkBool32,
}


VkPhysicalDeviceShaderImageFootprintFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	imageFootprint: VkBool32,
}


VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	dedicatedAllocationImageAliasing: VkBool32,
}


VkShadingRatePaletteNV :: struct {
	shadingRatePaletteEntryCount: u32,
	pShadingRatePaletteEntries: ^VkShadingRatePaletteEntryNV,
}


VkPipelineViewportShadingRateImageStateCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shadingRateImageEnable: VkBool32,
	viewportCount: u32,
	pShadingRatePalettes: ^VkShadingRatePaletteNV,
}


VkPhysicalDeviceShadingRateImageFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shadingRateImage: VkBool32,
	shadingRateCoarseSampleOrder: VkBool32,
}


VkPhysicalDeviceShadingRateImagePropertiesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shadingRateTexelSize: VkExtent2D,
	shadingRatePaletteSize: u32,
	shadingRateMaxCoarseSamples: u32,
}


VkCoarseSampleLocationNV :: struct {
	pixelX: u32,
	pixelY: u32,
	sample: u32,
}


VkCoarseSampleOrderCustomNV :: struct {
	shadingRate: VkShadingRatePaletteEntryNV,
	sampleCount: u32,
	sampleLocationCount: u32,
	pSampleLocations: ^VkCoarseSampleLocationNV,
}


VkPipelineViewportCoarseSampleOrderStateCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	sampleOrderType: VkCoarseSampleOrderTypeNV,
	customSampleOrderCount: u32,
	pCustomSampleOrders: ^VkCoarseSampleOrderCustomNV,
}


VkPhysicalDeviceMeshShaderFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	taskShader: VkBool32,
	meshShader: VkBool32,
}


VkPhysicalDeviceMeshShaderPropertiesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxDrawMeshTasksCount: u32,
	maxTaskWorkGroupInvocations: u32,
	maxTaskWorkGroupSize: u32,
	maxTaskTotalMemorySize: u32,
	maxTaskOutputCount: u32,
	maxMeshWorkGroupInvocations: u32,
	maxMeshWorkGroupSize: u32,
	maxMeshTotalMemorySize: u32,
	maxMeshOutputVertices: u32,
	maxMeshOutputPrimitives: u32,
	maxMeshMultiviewViewCount: u32,
	meshOutputPerVertexGranularity: u32,
	meshOutputPerPrimitiveGranularity: u32,
}


VkDrawMeshTasksIndirectCommandNV :: struct {
	taskCount: u32,
	firstTask: u32,
}


VkRayTracingShaderGroupCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	type: VkRayTracingShaderGroupTypeKHR,
	generalShader: u32,
	closestHitShader: u32,
	anyHitShader: u32,
	intersectionShader: u32,
}


VkRayTracingShaderGroupCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	type: VkRayTracingShaderGroupTypeKHR,
	generalShader: u32,
	closestHitShader: u32,
	anyHitShader: u32,
	intersectionShader: u32,
	pShaderGroupCaptureReplayHandle: rawptr,
}


VkRayTracingPipelineCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineCreateFlags,
	stageCount: u32,
	pStages: ^VkPipelineShaderStageCreateInfo,
	groupCount: u32,
	pGroups: ^VkRayTracingShaderGroupCreateInfoNV,
	maxRecursionDepth: u32,
	layout: VkPipelineLayout,
	basePipelineHandle: VkPipeline,
	basePipelineIndex: i32,
}


VkRayTracingPipelineCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineCreateFlags,
	stageCount: u32,
	pStages: ^VkPipelineShaderStageCreateInfo,
	groupCount: u32,
	pGroups: ^VkRayTracingShaderGroupCreateInfoKHR,
	maxRecursionDepth: u32,
	libraries: VkPipelineLibraryCreateInfoKHR,
	pLibraryInterface: ^VkRayTracingPipelineInterfaceCreateInfoKHR,
	layout: VkPipelineLayout,
	basePipelineHandle: VkPipeline,
	basePipelineIndex: i32,
}


VkGeometryTrianglesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	vertexData: VkBuffer,
	vertexOffset: VkDeviceSize,
	vertexCount: u32,
	vertexStride: VkDeviceSize,
	vertexFormat: VkFormat,
	indexData: VkBuffer,
	indexOffset: VkDeviceSize,
	indexCount: u32,
	indexType: VkIndexType,
	transformData: VkBuffer,
	transformOffset: VkDeviceSize,
}


VkGeometryAABBNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	aabbData: VkBuffer,
	numAABBs: u32,
	stride: u32,
	offset: VkDeviceSize,
}


VkGeometryDataNV :: struct {
	triangles: VkGeometryTrianglesNV,
	aabbs: VkGeometryAABBNV,
}


VkGeometryNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	geometryType: VkGeometryTypeKHR,
	geometry: VkGeometryDataNV,
	flags: VkGeometryFlagsKHR,
}


VkAccelerationStructureInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	type: VkAccelerationStructureTypeNV,
	flags: VkBuildAccelerationStructureFlagsNV,
	instanceCount: u32,
	geometryCount: u32,
	pGeometries: ^VkGeometryNV,
}


VkAccelerationStructureCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	compactedSize: VkDeviceSize,
	info: VkAccelerationStructureInfoNV,
}


VkBindAccelerationStructureMemoryInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	accelerationStructure: VkAccelerationStructureKHR,
	memory: VkDeviceMemory,
	memoryOffset: VkDeviceSize,
	deviceIndexCount: u32,
	pDeviceIndices: ^u32,
}


VkBindAccelerationStructureMemoryInfoNV :: struct {
}


VkWriteDescriptorSetAccelerationStructureKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	accelerationStructureCount: u32,
	pAccelerationStructures: ^VkAccelerationStructureKHR,
}


VkWriteDescriptorSetAccelerationStructureNV :: struct {
}


VkAccelerationStructureMemoryRequirementsInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	type: VkAccelerationStructureMemoryRequirementsTypeKHR,
	buildType: VkAccelerationStructureBuildTypeKHR,
	accelerationStructure: VkAccelerationStructureKHR,
}


VkAccelerationStructureMemoryRequirementsInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	type: VkAccelerationStructureMemoryRequirementsTypeNV,
	accelerationStructure: VkAccelerationStructureNV,
}


VkPhysicalDeviceRayTracingFeaturesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	rayTracing: VkBool32,
	rayTracingShaderGroupHandleCaptureReplay: VkBool32,
	rayTracingShaderGroupHandleCaptureReplayMixed: VkBool32,
	rayTracingAccelerationStructureCaptureReplay: VkBool32,
	rayTracingIndirectTraceRays: VkBool32,
	rayTracingIndirectAccelerationStructureBuild: VkBool32,
	rayTracingHostAccelerationStructureCommands: VkBool32,
	rayQuery: VkBool32,
	rayTracingPrimitiveCulling: VkBool32,
}


VkPhysicalDeviceRayTracingPropertiesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderGroupHandleSize: u32,
	maxRecursionDepth: u32,
	maxShaderGroupStride: u32,
	shaderGroupBaseAlignment: u32,
	maxGeometryCount: u64,
	maxInstanceCount: u64,
	maxPrimitiveCount: u64,
	maxDescriptorSetAccelerationStructures: u32,
	shaderGroupHandleCaptureReplaySize: u32,
}


VkPhysicalDeviceRayTracingPropertiesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderGroupHandleSize: u32,
	maxRecursionDepth: u32,
	maxShaderGroupStride: u32,
	shaderGroupBaseAlignment: u32,
	maxGeometryCount: u64,
	maxInstanceCount: u64,
	maxTriangleCount: u64,
	maxDescriptorSetAccelerationStructures: u32,
}


VkStridedBufferRegionKHR :: struct {
	buffer: VkBuffer,
	offset: VkDeviceSize,
	stride: VkDeviceSize,
	size: VkDeviceSize,
}


VkTraceRaysIndirectCommandKHR :: struct {
	width: u32,
	height: u32,
	depth: u32,
}


VkDrmFormatModifierPropertiesListEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	drmFormatModifierCount: u32,
	pDrmFormatModifierProperties: ^VkDrmFormatModifierPropertiesEXT,
}


VkDrmFormatModifierPropertiesEXT :: struct {
	drmFormatModifier: u64,
	drmFormatModifierPlaneCount: u32,
	drmFormatModifierTilingFeatures: VkFormatFeatureFlags,
}


VkPhysicalDeviceImageDrmFormatModifierInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	drmFormatModifier: u64,
	sharingMode: VkSharingMode,
	queueFamilyIndexCount: u32,
	pQueueFamilyIndices: ^u32,
}


VkImageDrmFormatModifierListCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	drmFormatModifierCount: u32,
	pDrmFormatModifiers: ^u64,
}


VkImageDrmFormatModifierExplicitCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	drmFormatModifier: u64,
	drmFormatModifierPlaneCount: u32,
	pPlaneLayouts: ^VkSubresourceLayout,
}


VkImageDrmFormatModifierPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	drmFormatModifier: u64,
}


VkImageStencilUsageCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	stencilUsage: VkImageUsageFlags,
}


VkImageStencilUsageCreateInfoEXT :: struct {
}


VkDeviceMemoryOverallocationCreateInfoAMD :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	overallocationBehavior: VkMemoryOverallocationBehaviorAMD,
}


VkPhysicalDeviceFragmentDensityMapFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fragmentDensityMap: VkBool32,
	fragmentDensityMapDynamic: VkBool32,
	fragmentDensityMapNonSubsampledImages: VkBool32,
}


VkPhysicalDeviceFragmentDensityMap2FeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fragmentDensityMapDeferred: VkBool32,
}


VkPhysicalDeviceFragmentDensityMapPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	minFragmentDensityTexelSize: VkExtent2D,
	maxFragmentDensityTexelSize: VkExtent2D,
	fragmentDensityInvocations: VkBool32,
}


VkPhysicalDeviceFragmentDensityMap2PropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	subsampledLoads: VkBool32,
	subsampledCoarseReconstructionEarlyAccess: VkBool32,
	maxSubsampledArrayLayers: u32,
	maxDescriptorSetSubsampledSamplers: u32,
}


VkRenderPassFragmentDensityMapCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fragmentDensityMapAttachment: VkAttachmentReference,
}


VkPhysicalDeviceScalarBlockLayoutFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	scalarBlockLayout: VkBool32,
}


VkPhysicalDeviceScalarBlockLayoutFeaturesEXT :: struct {
}


VkSurfaceProtectedCapabilitiesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	supportsProtected: VkBool32,
}


VkPhysicalDeviceUniformBufferStandardLayoutFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	uniformBufferStandardLayout: VkBool32,
}


VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR :: struct {
}


VkPhysicalDeviceDepthClipEnableFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	depthClipEnable: VkBool32,
}


VkPipelineRasterizationDepthClipStateCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
	depthClipEnable: VkBool32,
}


VkPhysicalDeviceMemoryBudgetPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	heapBudget: [VK_MAX_MEMORY_HEAPS]VkDeviceSize,
	heapUsage: [VK_MAX_MEMORY_HEAPS]VkDeviceSize,
}


VkPhysicalDeviceMemoryPriorityFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memoryPriority: VkBool32,
}


VkMemoryPriorityAllocateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	priority: f32,
}


VkPhysicalDeviceBufferDeviceAddressFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	bufferDeviceAddress: VkBool32,
	bufferDeviceAddressCaptureReplay: VkBool32,
	bufferDeviceAddressMultiDevice: VkBool32,
}


VkPhysicalDeviceBufferDeviceAddressFeaturesKHR :: struct {
}


VkPhysicalDeviceBufferDeviceAddressFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	bufferDeviceAddress: VkBool32,
	bufferDeviceAddressCaptureReplay: VkBool32,
	bufferDeviceAddressMultiDevice: VkBool32,
}


VkPhysicalDeviceBufferAddressFeaturesEXT :: struct {
}


VkBufferDeviceAddressInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	buffer: VkBuffer,
}


VkBufferDeviceAddressInfoKHR :: struct {
}


VkBufferDeviceAddressInfoEXT :: struct {
}


VkBufferOpaqueCaptureAddressCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	opaqueCaptureAddress: u64,
}


VkBufferOpaqueCaptureAddressCreateInfoKHR :: struct {
}


VkBufferDeviceAddressCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceAddress: VkDeviceAddress,
}


VkPhysicalDeviceImageViewImageFormatInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	imageViewType: VkImageViewType,
}


VkFilterCubicImageViewImageFormatPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	filterCubic: VkBool32,
	filterCubicMinmax: VkBool32,
}


VkPhysicalDeviceImagelessFramebufferFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	imagelessFramebuffer: VkBool32,
}


VkPhysicalDeviceImagelessFramebufferFeaturesKHR :: struct {
}


VkFramebufferAttachmentsCreateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	attachmentImageInfoCount: u32,
	pAttachmentImageInfos: ^VkFramebufferAttachmentImageInfo,
}


VkFramebufferAttachmentsCreateInfoKHR :: struct {
}


VkFramebufferAttachmentImageInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkImageCreateFlags,
	usage: VkImageUsageFlags,
	width: u32,
	height: u32,
	layerCount: u32,
	viewFormatCount: u32,
	pViewFormats: ^VkFormat,
}


VkFramebufferAttachmentImageInfoKHR :: struct {
}


VkRenderPassAttachmentBeginInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	attachmentCount: u32,
	pAttachments: ^VkImageView,
}


VkRenderPassAttachmentBeginInfoKHR :: struct {
}


VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	textureCompressionASTC_HDR: VkBool32,
}


VkPhysicalDeviceCooperativeMatrixFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	cooperativeMatrix: VkBool32,
	cooperativeMatrixRobustBufferAccess: VkBool32,
}


VkPhysicalDeviceCooperativeMatrixPropertiesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	cooperativeMatrixSupportedStages: VkShaderStageFlags,
}


VkCooperativeMatrixPropertiesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	MSize: u32,
	NSize: u32,
	KSize: u32,
	AType: VkComponentTypeNV,
	BType: VkComponentTypeNV,
	CType: VkComponentTypeNV,
	DType: VkComponentTypeNV,
	scope: VkScopeNV,
}


VkPhysicalDeviceYcbcrImageArraysFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	ycbcrImageArrays: VkBool32,
}


VkImageViewHandleInfoNVX :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	imageView: VkImageView,
	descriptorType: VkDescriptorType,
	sampler: VkSampler,
}


VkImageViewAddressPropertiesNVX :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceAddress: VkDeviceAddress,
	size: VkDeviceSize,
}


VkPresentFrameTokenGGP :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	frameToken: GgpFrameToken,
}


VkPipelineCreationFeedbackEXT :: struct {
	flags: VkPipelineCreationFeedbackFlagsEXT,
	duration: u64,
}


VkPipelineCreationFeedbackCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pPipelineCreationFeedback: ^VkPipelineCreationFeedbackEXT,
	pipelineStageCreationFeedbackCount: u32,
	pPipelineStageCreationFeedbacks: ^VkPipelineCreationFeedbackEXT,
}


VkSurfaceFullScreenExclusiveInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fullScreenExclusive: VkFullScreenExclusiveEXT,
}


VkSurfaceFullScreenExclusiveWin32InfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	hmonitor: HMONITOR,
}


VkSurfaceCapabilitiesFullScreenExclusiveEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fullScreenExclusiveSupported: VkBool32,
}


VkPhysicalDevicePerformanceQueryFeaturesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	performanceCounterQueryPools: VkBool32,
	performanceCounterMultipleQueryPools: VkBool32,
}


VkPhysicalDevicePerformanceQueryPropertiesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	allowCommandBufferQueryCopies: VkBool32,
}


VkPerformanceCounterKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	unit: VkPerformanceCounterUnitKHR,
	scope: VkPerformanceCounterScopeKHR,
	storage: VkPerformanceCounterStorageKHR,
	uuid: [VK_UUID_SIZE]u8,
}


VkPerformanceCounterDescriptionKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPerformanceCounterDescriptionFlagsKHR,
	name: [VK_MAX_DESCRIPTION_SIZE]u8,
	category: [VK_MAX_DESCRIPTION_SIZE]u8,
	description: [VK_MAX_DESCRIPTION_SIZE]u8,
}


VkQueryPoolPerformanceCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	queueFamilyIndex: u32,
	counterIndexCount: u32,
	pCounterIndices: ^u32,
}


VkPerformanceCounterResultKHR :: struct #raw_union {
	int32: i32,
	int64: i64,
	uint32: u32,
	uint64: u64,
	float32: f32,
	float64: f64,
}


VkAcquireProfilingLockInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkAcquireProfilingLockFlagsKHR,
	timeout: u64,
}


VkPerformanceQuerySubmitInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	counterPassIndex: u32,
}


VkHeadlessSurfaceCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkHeadlessSurfaceCreateFlagsEXT,
}


VkPhysicalDeviceCoverageReductionModeFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	coverageReductionMode: VkBool32,
}


VkPipelineCoverageReductionStateCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkPipelineCoverageReductionStateCreateFlagsNV,
	coverageReductionMode: VkCoverageReductionModeNV,
}


VkFramebufferMixedSamplesCombinationNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	coverageReductionMode: VkCoverageReductionModeNV,
	rasterizationSamples: VkSampleCountFlagBits,
	depthStencilSamples: VkSampleCountFlags,
	colorSamples: VkSampleCountFlags,
}


VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderIntegerFunctions2: VkBool32,
}


VkPerformanceValueDataINTEL :: struct #raw_union {
	value32: u32,
	value64: u64,
	valueFloat: f32,
	valueBool: VkBool32,
	valueString: cstring,
}


VkPerformanceValueINTEL :: struct {
	type: VkPerformanceValueTypeINTEL,
	data: VkPerformanceValueDataINTEL,
}


VkInitializePerformanceApiInfoINTEL :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pUserData: rawptr,
}


VkQueryPoolPerformanceQueryCreateInfoINTEL :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	performanceCountersSampling: VkQueryPoolSamplingModeINTEL,
}


VkQueryPoolCreateInfoINTEL :: struct {
}


VkPerformanceMarkerInfoINTEL :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	marker: u64,
}


VkPerformanceStreamMarkerInfoINTEL :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	marker: u32,
}


VkPerformanceOverrideInfoINTEL :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	type: VkPerformanceOverrideTypeINTEL,
	enable: VkBool32,
	parameter: u64,
}


VkPerformanceConfigurationAcquireInfoINTEL :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	type: VkPerformanceConfigurationTypeINTEL,
}


VkPhysicalDeviceShaderClockFeaturesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderSubgroupClock: VkBool32,
	shaderDeviceClock: VkBool32,
}


VkPhysicalDeviceIndexTypeUint8FeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	indexTypeUint8: VkBool32,
}


VkPhysicalDeviceShaderSMBuiltinsPropertiesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderSMCount: u32,
	shaderWarpsPerSM: u32,
}


VkPhysicalDeviceShaderSMBuiltinsFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderSMBuiltins: VkBool32,
}


VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	fragmentShaderSampleInterlock: VkBool32,
	fragmentShaderPixelInterlock: VkBool32,
	fragmentShaderShadingRateInterlock: VkBool32,
}


VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	separateDepthStencilLayouts: VkBool32,
}


VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR :: struct {
}


VkAttachmentReferenceStencilLayout :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	stencilLayout: VkImageLayout,
}


VkAttachmentReferenceStencilLayoutKHR :: struct {
}


VkAttachmentDescriptionStencilLayout :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	stencilInitialLayout: VkImageLayout,
	stencilFinalLayout: VkImageLayout,
}


VkAttachmentDescriptionStencilLayoutKHR :: struct {
}


VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pipelineExecutableInfo: VkBool32,
}


VkPipelineInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pipeline: VkPipeline,
}


VkPipelineExecutablePropertiesKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	stages: VkShaderStageFlags,
	name: [VK_MAX_DESCRIPTION_SIZE]u8,
	description: [VK_MAX_DESCRIPTION_SIZE]u8,
	subgroupSize: u32,
}


VkPipelineExecutableInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pipeline: VkPipeline,
	executableIndex: u32,
}


VkPipelineExecutableStatisticValueKHR :: struct #raw_union {
	b32: VkBool32,
	i64: i64,
	u64: u64,
	f64: f64,
}


VkPipelineExecutableStatisticKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	name: [VK_MAX_DESCRIPTION_SIZE]u8,
	description: [VK_MAX_DESCRIPTION_SIZE]u8,
	format: VkPipelineExecutableStatisticFormatKHR,
	value: VkPipelineExecutableStatisticValueKHR,
}


VkPipelineExecutableInternalRepresentationKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	name: [VK_MAX_DESCRIPTION_SIZE]u8,
	description: [VK_MAX_DESCRIPTION_SIZE]u8,
	isText: VkBool32,
	dataSize: u64,
	pData: rawptr,
}


VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	shaderDemoteToHelperInvocation: VkBool32,
}


VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	texelBufferAlignment: VkBool32,
}


VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
	storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
	uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
	uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
}


VkPhysicalDeviceSubgroupSizeControlFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	subgroupSizeControl: VkBool32,
	computeFullSubgroups: VkBool32,
}


VkPhysicalDeviceSubgroupSizeControlPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	minSubgroupSize: u32,
	maxSubgroupSize: u32,
	maxComputeWorkgroupSubgroups: u32,
	requiredSubgroupSizeStages: VkShaderStageFlags,
}


VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	requiredSubgroupSize: u32,
}


VkMemoryOpaqueCaptureAddressAllocateInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	opaqueCaptureAddress: u64,
}


VkMemoryOpaqueCaptureAddressAllocateInfoKHR :: struct {
}


VkDeviceMemoryOpaqueCaptureAddressInfo :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	memory: VkDeviceMemory,
}


VkDeviceMemoryOpaqueCaptureAddressInfoKHR :: struct {
}


VkPhysicalDeviceLineRasterizationFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	rectangularLines: VkBool32,
	bresenhamLines: VkBool32,
	smoothLines: VkBool32,
	stippledRectangularLines: VkBool32,
	stippledBresenhamLines: VkBool32,
	stippledSmoothLines: VkBool32,
}


VkPhysicalDeviceLineRasterizationPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	lineSubPixelPrecisionBits: u32,
}


VkPipelineRasterizationLineStateCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	lineRasterizationMode: VkLineRasterizationModeEXT,
	stippledLineEnable: VkBool32,
	lineStippleFactor: u32,
	lineStipplePattern: u16,
}


VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	pipelineCreationCacheControl: VkBool32,
}


VkPhysicalDeviceVulkan11Features :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	storageBuffer16BitAccess: VkBool32,
	uniformAndStorageBuffer16BitAccess: VkBool32,
	storagePushConstant16: VkBool32,
	storageInputOutput16: VkBool32,
	multiview: VkBool32,
	multiviewGeometryShader: VkBool32,
	multiviewTessellationShader: VkBool32,
	variablePointersStorageBuffer: VkBool32,
	variablePointers: VkBool32,
	protectedMemory: VkBool32,
	samplerYcbcrConversion: VkBool32,
	shaderDrawParameters: VkBool32,
}


VkPhysicalDeviceVulkan11Properties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceUUID: [VK_UUID_SIZE]u8,
	driverUUID: [VK_UUID_SIZE]u8,
	deviceLUID: [VK_LUID_SIZE]u8,
	deviceNodeMask: u32,
	deviceLUIDValid: VkBool32,
	subgroupSize: u32,
	subgroupSupportedStages: VkShaderStageFlags,
	subgroupSupportedOperations: VkSubgroupFeatureFlags,
	subgroupQuadOperationsInAllStages: VkBool32,
	pointClippingBehavior: VkPointClippingBehavior,
	maxMultiviewViewCount: u32,
	maxMultiviewInstanceIndex: u32,
	protectedNoFault: VkBool32,
	maxPerSetDescriptors: u32,
	maxMemoryAllocationSize: VkDeviceSize,
}


VkPhysicalDeviceVulkan12Features :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	samplerMirrorClampToEdge: VkBool32,
	drawIndirectCount: VkBool32,
	storageBuffer8BitAccess: VkBool32,
	uniformAndStorageBuffer8BitAccess: VkBool32,
	storagePushConstant8: VkBool32,
	shaderBufferInt64Atomics: VkBool32,
	shaderSharedInt64Atomics: VkBool32,
	shaderFloat16: VkBool32,
	shaderInt8: VkBool32,
	descriptorIndexing: VkBool32,
	shaderInputAttachmentArrayDynamicIndexing: VkBool32,
	shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
	shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
	shaderUniformBufferArrayNonUniformIndexing: VkBool32,
	shaderSampledImageArrayNonUniformIndexing: VkBool32,
	shaderStorageBufferArrayNonUniformIndexing: VkBool32,
	shaderStorageImageArrayNonUniformIndexing: VkBool32,
	shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
	shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
	shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
	descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
	descriptorBindingSampledImageUpdateAfterBind: VkBool32,
	descriptorBindingStorageImageUpdateAfterBind: VkBool32,
	descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
	descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
	descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
	descriptorBindingUpdateUnusedWhilePending: VkBool32,
	descriptorBindingPartiallyBound: VkBool32,
	descriptorBindingVariableDescriptorCount: VkBool32,
	runtimeDescriptorArray: VkBool32,
	samplerFilterMinmax: VkBool32,
	scalarBlockLayout: VkBool32,
	imagelessFramebuffer: VkBool32,
	uniformBufferStandardLayout: VkBool32,
	shaderSubgroupExtendedTypes: VkBool32,
	separateDepthStencilLayouts: VkBool32,
	hostQueryReset: VkBool32,
	timelineSemaphore: VkBool32,
	bufferDeviceAddress: VkBool32,
	bufferDeviceAddressCaptureReplay: VkBool32,
	bufferDeviceAddressMultiDevice: VkBool32,
	vulkanMemoryModel: VkBool32,
	vulkanMemoryModelDeviceScope: VkBool32,
	vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
	shaderOutputViewportIndex: VkBool32,
	shaderOutputLayer: VkBool32,
	subgroupBroadcastDynamicId: VkBool32,
}


VkPhysicalDeviceVulkan12Properties :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	driverID: VkDriverId,
	driverName: [VK_MAX_DRIVER_NAME_SIZE]u8,
	driverInfo: [VK_MAX_DRIVER_INFO_SIZE]u8,
	conformanceVersion: VkConformanceVersion,
	denormBehaviorIndependence: VkShaderFloatControlsIndependence,
	roundingModeIndependence: VkShaderFloatControlsIndependence,
	shaderSignedZeroInfNanPreserveFloat16: VkBool32,
	shaderSignedZeroInfNanPreserveFloat32: VkBool32,
	shaderSignedZeroInfNanPreserveFloat64: VkBool32,
	shaderDenormPreserveFloat16: VkBool32,
	shaderDenormPreserveFloat32: VkBool32,
	shaderDenormPreserveFloat64: VkBool32,
	shaderDenormFlushToZeroFloat16: VkBool32,
	shaderDenormFlushToZeroFloat32: VkBool32,
	shaderDenormFlushToZeroFloat64: VkBool32,
	shaderRoundingModeRTEFloat16: VkBool32,
	shaderRoundingModeRTEFloat32: VkBool32,
	shaderRoundingModeRTEFloat64: VkBool32,
	shaderRoundingModeRTZFloat16: VkBool32,
	shaderRoundingModeRTZFloat32: VkBool32,
	shaderRoundingModeRTZFloat64: VkBool32,
	maxUpdateAfterBindDescriptorsInAllPools: u32,
	shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
	shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
	shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
	shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
	shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
	robustBufferAccessUpdateAfterBind: VkBool32,
	quadDivergentImplicitLod: VkBool32,
	maxPerStageDescriptorUpdateAfterBindSamplers: u32,
	maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
	maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
	maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
	maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
	maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
	maxPerStageUpdateAfterBindResources: u32,
	maxDescriptorSetUpdateAfterBindSamplers: u32,
	maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
	maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
	maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
	maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
	maxDescriptorSetUpdateAfterBindSampledImages: u32,
	maxDescriptorSetUpdateAfterBindStorageImages: u32,
	maxDescriptorSetUpdateAfterBindInputAttachments: u32,
	supportedDepthResolveModes: VkResolveModeFlags,
	supportedStencilResolveModes: VkResolveModeFlags,
	independentResolveNone: VkBool32,
	independentResolve: VkBool32,
	filterMinmaxSingleComponentFormats: VkBool32,
	filterMinmaxImageComponentMapping: VkBool32,
	maxTimelineSemaphoreValueDifference: u64,
	framebufferIntegerColorSampleCounts: VkSampleCountFlags,
}


VkPipelineCompilerControlCreateInfoAMD :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	compilerControlFlags: VkPipelineCompilerControlFlagsAMD,
}


VkPhysicalDeviceCoherentMemoryFeaturesAMD :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	deviceCoherentMemory: VkBool32,
}


VkPhysicalDeviceToolPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	name: [VK_MAX_EXTENSION_NAME_SIZE]u8,
	version: [VK_MAX_EXTENSION_NAME_SIZE]u8,
	purposes: VkToolPurposeFlagsEXT,
	description: [VK_MAX_DESCRIPTION_SIZE]u8,
	layer: [VK_MAX_EXTENSION_NAME_SIZE]u8,
}


VkSamplerCustomBorderColorCreateInfoEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	customBorderColor: VkClearColorValue,
	format: VkFormat,
}


VkPhysicalDeviceCustomBorderColorPropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxCustomBorderColorSamplers: u32,
}


VkPhysicalDeviceCustomBorderColorFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	customBorderColors: VkBool32,
	customBorderColorWithoutFormat: VkBool32,
}


VkDeviceOrHostAddressKHR :: struct #raw_union {
	deviceAddress: VkDeviceAddress,
	hostAddress: rawptr,
}


VkDeviceOrHostAddressConstKHR :: struct #raw_union {
	deviceAddress: VkDeviceAddress,
	hostAddress: rawptr,
}


VkAccelerationStructureGeometryTrianglesDataKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	vertexFormat: VkFormat,
	vertexData: VkDeviceOrHostAddressConstKHR,
	vertexStride: VkDeviceSize,
	indexType: VkIndexType,
	indexData: VkDeviceOrHostAddressConstKHR,
	transformData: VkDeviceOrHostAddressConstKHR,
}


VkAccelerationStructureGeometryAabbsDataKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	data: VkDeviceOrHostAddressConstKHR,
	stride: VkDeviceSize,
}


VkAccelerationStructureGeometryInstancesDataKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	arrayOfPointers: VkBool32,
	data: VkDeviceOrHostAddressConstKHR,
}


VkAccelerationStructureGeometryDataKHR :: struct #raw_union {
	triangles: VkAccelerationStructureGeometryTrianglesDataKHR,
	aabbs: VkAccelerationStructureGeometryAabbsDataKHR,
	instances: VkAccelerationStructureGeometryInstancesDataKHR,
}


VkAccelerationStructureGeometryKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	geometryType: VkGeometryTypeKHR,
	geometry: VkAccelerationStructureGeometryDataKHR,
	flags: VkGeometryFlagsKHR,
}


VkAccelerationStructureBuildGeometryInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	type: VkAccelerationStructureTypeKHR,
	flags: VkBuildAccelerationStructureFlagsKHR,
	update: VkBool32,
	srcAccelerationStructure: VkAccelerationStructureKHR,
	dstAccelerationStructure: VkAccelerationStructureKHR,
	geometryArrayOfPointers: VkBool32,
	geometryCount: u32,
	ppGeometries: ^^VkAccelerationStructureGeometryKHR,
	scratchData: VkDeviceOrHostAddressKHR,
}


VkAccelerationStructureBuildOffsetInfoKHR :: struct {
	primitiveCount: u32,
	primitiveOffset: u32,
	firstVertex: u32,
	transformOffset: u32,
}


VkAccelerationStructureCreateGeometryTypeInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	geometryType: VkGeometryTypeKHR,
	maxPrimitiveCount: u32,
	indexType: VkIndexType,
	maxVertexCount: u32,
	vertexFormat: VkFormat,
	allowsTransforms: VkBool32,
}


VkAccelerationStructureCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	compactedSize: VkDeviceSize,
	type: VkAccelerationStructureTypeKHR,
	flags: VkBuildAccelerationStructureFlagsKHR,
	maxGeometryCount: u32,
	pGeometryInfos: ^VkAccelerationStructureCreateGeometryTypeInfoKHR,
	deviceAddress: VkDeviceAddress,
}


VkAabbPositionsKHR :: struct {
	minX: f32,
	minY: f32,
	minZ: f32,
	maxX: f32,
	maxY: f32,
	maxZ: f32,
}


VkAabbPositionsNV :: struct {
}


VkTransformMatrixKHR :: struct {
	matrix: f32,
}


VkTransformMatrixNV :: struct {
}


VkAccelerationStructureInstanceKHR :: struct {
	transform: VkTransformMatrixKHR,
	instanceCustomIndex: u32,
	mask: u32,
	instanceShaderBindingTableRecordOffset: u32,
	flags: VkGeometryInstanceFlagsKHR,
	accelerationStructureReference: u64,
}


VkAccelerationStructureInstanceNV :: struct {
}


VkAccelerationStructureDeviceAddressInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	accelerationStructure: VkAccelerationStructureKHR,
}


VkAccelerationStructureVersionKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	versionData: ^u8,
}


VkCopyAccelerationStructureInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	src: VkAccelerationStructureKHR,
	dst: VkAccelerationStructureKHR,
	mode: VkCopyAccelerationStructureModeKHR,
}


VkCopyAccelerationStructureToMemoryInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	src: VkAccelerationStructureKHR,
	dst: VkDeviceOrHostAddressKHR,
	mode: VkCopyAccelerationStructureModeKHR,
}


VkCopyMemoryToAccelerationStructureInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	src: VkDeviceOrHostAddressConstKHR,
	dst: VkAccelerationStructureKHR,
	mode: VkCopyAccelerationStructureModeKHR,
}


VkRayTracingPipelineInterfaceCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	maxPayloadSize: u32,
	maxAttributeSize: u32,
	maxCallableSize: u32,
}


VkDeferredOperationInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	operationHandle: VkDeferredOperationKHR,
}


VkPipelineLibraryCreateInfoKHR :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	libraryCount: u32,
	pLibraries: ^VkPipeline,
}


VkPhysicalDeviceExtendedDynamicStateFeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	extendedDynamicState: VkBool32,
}


VkRenderPassTransformBeginInfoQCOM :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	transform: VkSurfaceTransformFlagBitsKHR,
}


VkCommandBufferInheritanceRenderPassTransformInfoQCOM :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	transform: VkSurfaceTransformFlagBitsKHR,
	renderArea: VkRect2D,
}


VkPhysicalDeviceDiagnosticsConfigFeaturesNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	diagnosticsConfig: VkBool32,
}


VkDeviceDiagnosticsConfigCreateInfoNV :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	flags: VkDeviceDiagnosticsConfigFlagsNV,
}


VkPhysicalDeviceRobustness2FeaturesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	robustBufferAccess2: VkBool32,
	robustImageAccess2: VkBool32,
	nullDescriptor: VkBool32,
}


VkPhysicalDeviceRobustness2PropertiesEXT :: struct {
	sType: VkStructureType,
	pNext: rawptr,
	robustStorageBufferAccessSizeAlignment: VkDeviceSize,
	robustUniformBufferAccessSizeAlignment: VkDeviceSize,
}
foreign import vk { "../../../../VulkanSDK/1.2.135.0/Lib/vulkan-1.lib" };

@(default_calling_convention="c")//, link_prefix="glfw")
foreign vk {
	vkCreateInstance :: proc(
		pCreateInfo: ^VkInstanceCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pInstance: ^VkInstance,
	) -> VkResult ---;

	vkDestroyInstance :: proc(
		instance: VkInstance,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkEnumeratePhysicalDevices :: proc(
		instance: VkInstance,
		pPhysicalDeviceCount: ^u32,
		pPhysicalDevices: ^VkPhysicalDevice,
	) -> VkResult ---;

	vkGetDeviceProcAddr :: proc(
		device: VkDevice,
		pName: cstring,
	) -> PFN_vkVoidFunction ---;

	vkGetInstanceProcAddr :: proc(
		instance: VkInstance,
		pName: cstring,
	) -> PFN_vkVoidFunction ---;

	vkGetPhysicalDeviceProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		pProperties: ^VkPhysicalDeviceProperties,
	) ---;

	vkGetPhysicalDeviceQueueFamilyProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		pQueueFamilyPropertyCount: ^u32,
		pQueueFamilyProperties: ^VkQueueFamilyProperties,
	) ---;

	vkGetPhysicalDeviceMemoryProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		pMemoryProperties: ^VkPhysicalDeviceMemoryProperties,
	) ---;

	vkGetPhysicalDeviceFeatures :: proc(
		physicalDevice: VkPhysicalDevice,
		pFeatures: ^VkPhysicalDeviceFeatures,
	) ---;

	vkGetPhysicalDeviceFormatProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		format: VkFormat,
		pFormatProperties: ^VkFormatProperties,
	) ---;

	vkGetPhysicalDeviceImageFormatProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		format: VkFormat,
		type: VkImageType,
		tiling: VkImageTiling,
		usage: VkImageUsageFlags,
		flags: VkImageCreateFlags,
		pImageFormatProperties: ^VkImageFormatProperties,
	) -> VkResult ---;

	vkCreateDevice :: proc(
		physicalDevice: VkPhysicalDevice,
		pCreateInfo: ^VkDeviceCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pDevice: ^VkDevice,
	) -> VkResult ---;

	vkDestroyDevice :: proc(
		device: VkDevice,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkEnumerateInstanceVersion :: proc(
		pApiVersion: ^u32,
	) -> VkResult ---;

	vkEnumerateInstanceLayerProperties :: proc(
		pPropertyCount: ^u32,
		pProperties: ^VkLayerProperties,
	) -> VkResult ---;

	vkEnumerateInstanceExtensionProperties :: proc(
		pLayerName: cstring,
		pPropertyCount: ^u32,
		pProperties: ^VkExtensionProperties,
	) -> VkResult ---;

	vkEnumerateDeviceLayerProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		pPropertyCount: ^u32,
		pProperties: ^VkLayerProperties,
	) -> VkResult ---;

	vkEnumerateDeviceExtensionProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		pLayerName: cstring,
		pPropertyCount: ^u32,
		pProperties: ^VkExtensionProperties,
	) -> VkResult ---;

	vkGetDeviceQueue :: proc(
		device: VkDevice,
		queueFamilyIndex: u32,
		queueIndex: u32,
		pQueue: ^VkQueue,
	) ---;

	vkQueueSubmit :: proc(
		queue: VkQueue,
		submitCount: u32,
		pSubmits: ^VkSubmitInfo,
		fence: VkFence,
	) -> VkResult ---;

	vkQueueWaitIdle :: proc(
		queue: VkQueue,
	) -> VkResult ---;

	vkDeviceWaitIdle :: proc(
		device: VkDevice,
	) -> VkResult ---;

	vkAllocateMemory :: proc(
		device: VkDevice,
		pAllocateInfo: ^VkMemoryAllocateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pMemory: ^VkDeviceMemory,
	) -> VkResult ---;

	vkFreeMemory :: proc(
		device: VkDevice,
		memory: VkDeviceMemory,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkMapMemory :: proc(
		device: VkDevice,
		memory: VkDeviceMemory,
		offset: VkDeviceSize,
		size: VkDeviceSize,
		flags: VkMemoryMapFlags,
		ppData: ^rawptr,
	) -> VkResult ---;

	vkUnmapMemory :: proc(
		device: VkDevice,
		memory: VkDeviceMemory,
	) ---;

	vkFlushMappedMemoryRanges :: proc(
		device: VkDevice,
		memoryRangeCount: u32,
		pMemoryRanges: ^VkMappedMemoryRange,
	) -> VkResult ---;

	vkInvalidateMappedMemoryRanges :: proc(
		device: VkDevice,
		memoryRangeCount: u32,
		pMemoryRanges: ^VkMappedMemoryRange,
	) -> VkResult ---;

	vkGetDeviceMemoryCommitment :: proc(
		device: VkDevice,
		memory: VkDeviceMemory,
		pCommittedMemoryInBytes: ^VkDeviceSize,
	) ---;

	vkGetBufferMemoryRequirements :: proc(
		device: VkDevice,
		buffer: VkBuffer,
		pMemoryRequirements: ^VkMemoryRequirements,
	) ---;

	vkBindBufferMemory :: proc(
		device: VkDevice,
		buffer: VkBuffer,
		memory: VkDeviceMemory,
		memoryOffset: VkDeviceSize,
	) -> VkResult ---;

	vkGetImageMemoryRequirements :: proc(
		device: VkDevice,
		image: VkImage,
		pMemoryRequirements: ^VkMemoryRequirements,
	) ---;

	vkBindImageMemory :: proc(
		device: VkDevice,
		image: VkImage,
		memory: VkDeviceMemory,
		memoryOffset: VkDeviceSize,
	) -> VkResult ---;

	vkGetImageSparseMemoryRequirements :: proc(
		device: VkDevice,
		image: VkImage,
		pSparseMemoryRequirementCount: ^u32,
		pSparseMemoryRequirements: ^VkSparseImageMemoryRequirements,
	) ---;

	vkGetPhysicalDeviceSparseImageFormatProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		format: VkFormat,
		type: VkImageType,
		samples: VkSampleCountFlagBits,
		usage: VkImageUsageFlags,
		tiling: VkImageTiling,
		pPropertyCount: ^u32,
		pProperties: ^VkSparseImageFormatProperties,
	) ---;

	vkQueueBindSparse :: proc(
		queue: VkQueue,
		bindInfoCount: u32,
		pBindInfo: ^VkBindSparseInfo,
		fence: VkFence,
	) -> VkResult ---;

	vkCreateFence :: proc(
		device: VkDevice,
		pCreateInfo: ^VkFenceCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pFence: ^VkFence,
	) -> VkResult ---;

	vkDestroyFence :: proc(
		device: VkDevice,
		fence: VkFence,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkResetFences :: proc(
		device: VkDevice,
		fenceCount: u32,
		pFences: ^VkFence,
	) -> VkResult ---;

	vkGetFenceStatus :: proc(
		device: VkDevice,
		fence: VkFence,
	) -> VkResult ---;

	vkWaitForFences :: proc(
		device: VkDevice,
		fenceCount: u32,
		pFences: ^VkFence,
		waitAll: VkBool32,
		timeout: u64,
	) -> VkResult ---;

	vkCreateSemaphore :: proc(
		device: VkDevice,
		pCreateInfo: ^VkSemaphoreCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pSemaphore: ^VkSemaphore,
	) -> VkResult ---;

	vkDestroySemaphore :: proc(
		device: VkDevice,
		semaphore: VkSemaphore,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkCreateEvent :: proc(
		device: VkDevice,
		pCreateInfo: ^VkEventCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pEvent: ^VkEvent,
	) -> VkResult ---;

	vkDestroyEvent :: proc(
		device: VkDevice,
		event: VkEvent,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetEventStatus :: proc(
		device: VkDevice,
		event: VkEvent,
	) -> VkResult ---;

	vkSetEvent :: proc(
		device: VkDevice,
		event: VkEvent,
	) -> VkResult ---;

	vkResetEvent :: proc(
		device: VkDevice,
		event: VkEvent,
	) -> VkResult ---;

	vkCreateQueryPool :: proc(
		device: VkDevice,
		pCreateInfo: ^VkQueryPoolCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pQueryPool: ^VkQueryPool,
	) -> VkResult ---;

	vkDestroyQueryPool :: proc(
		device: VkDevice,
		queryPool: VkQueryPool,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetQueryPoolResults :: proc(
		device: VkDevice,
		queryPool: VkQueryPool,
		firstQuery: u32,
		queryCount: u32,
		dataSize: u64,
		pData: rawptr,
		stride: VkDeviceSize,
		flags: VkQueryResultFlags,
	) -> VkResult ---;

	vkResetQueryPool :: proc(
		device: VkDevice,
		queryPool: VkQueryPool,
		firstQuery: u32,
		queryCount: u32,
	) ---;

	vkCreateBuffer :: proc(
		device: VkDevice,
		pCreateInfo: ^VkBufferCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pBuffer: ^VkBuffer,
	) -> VkResult ---;

	vkDestroyBuffer :: proc(
		device: VkDevice,
		buffer: VkBuffer,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkCreateBufferView :: proc(
		device: VkDevice,
		pCreateInfo: ^VkBufferViewCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pView: ^VkBufferView,
	) -> VkResult ---;

	vkDestroyBufferView :: proc(
		device: VkDevice,
		bufferView: VkBufferView,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkCreateImage :: proc(
		device: VkDevice,
		pCreateInfo: ^VkImageCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pImage: ^VkImage,
	) -> VkResult ---;

	vkDestroyImage :: proc(
		device: VkDevice,
		image: VkImage,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetImageSubresourceLayout :: proc(
		device: VkDevice,
		image: VkImage,
		pSubresource: ^VkImageSubresource,
		pLayout: ^VkSubresourceLayout,
	) ---;

	vkCreateImageView :: proc(
		device: VkDevice,
		pCreateInfo: ^VkImageViewCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pView: ^VkImageView,
	) -> VkResult ---;

	vkDestroyImageView :: proc(
		device: VkDevice,
		imageView: VkImageView,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkCreateShaderModule :: proc(
		device: VkDevice,
		pCreateInfo: ^VkShaderModuleCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pShaderModule: ^VkShaderModule,
	) -> VkResult ---;

	vkDestroyShaderModule :: proc(
		device: VkDevice,
		shaderModule: VkShaderModule,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkCreatePipelineCache :: proc(
		device: VkDevice,
		pCreateInfo: ^VkPipelineCacheCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pPipelineCache: ^VkPipelineCache,
	) -> VkResult ---;

	vkDestroyPipelineCache :: proc(
		device: VkDevice,
		pipelineCache: VkPipelineCache,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetPipelineCacheData :: proc(
		device: VkDevice,
		pipelineCache: VkPipelineCache,
		pDataSize: ^u64,
		pData: rawptr,
	) -> VkResult ---;

	vkMergePipelineCaches :: proc(
		device: VkDevice,
		dstCache: VkPipelineCache,
		srcCacheCount: u32,
		pSrcCaches: ^VkPipelineCache,
	) -> VkResult ---;

	vkCreateGraphicsPipelines :: proc(
		device: VkDevice,
		pipelineCache: VkPipelineCache,
		createInfoCount: u32,
		pCreateInfos: ^VkGraphicsPipelineCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pPipelines: ^VkPipeline,
	) -> VkResult ---;

	vkCreateComputePipelines :: proc(
		device: VkDevice,
		pipelineCache: VkPipelineCache,
		createInfoCount: u32,
		pCreateInfos: ^VkComputePipelineCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pPipelines: ^VkPipeline,
	) -> VkResult ---;

	vkDestroyPipeline :: proc(
		device: VkDevice,
		pipeline: VkPipeline,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkCreatePipelineLayout :: proc(
		device: VkDevice,
		pCreateInfo: ^VkPipelineLayoutCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pPipelineLayout: ^VkPipelineLayout,
	) -> VkResult ---;

	vkDestroyPipelineLayout :: proc(
		device: VkDevice,
		pipelineLayout: VkPipelineLayout,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkCreateSampler :: proc(
		device: VkDevice,
		pCreateInfo: ^VkSamplerCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pSampler: ^VkSampler,
	) -> VkResult ---;

	vkDestroySampler :: proc(
		device: VkDevice,
		sampler: VkSampler,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkCreateDescriptorSetLayout :: proc(
		device: VkDevice,
		pCreateInfo: ^VkDescriptorSetLayoutCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pSetLayout: ^VkDescriptorSetLayout,
	) -> VkResult ---;

	vkDestroyDescriptorSetLayout :: proc(
		device: VkDevice,
		descriptorSetLayout: VkDescriptorSetLayout,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkCreateDescriptorPool :: proc(
		device: VkDevice,
		pCreateInfo: ^VkDescriptorPoolCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pDescriptorPool: ^VkDescriptorPool,
	) -> VkResult ---;

	vkDestroyDescriptorPool :: proc(
		device: VkDevice,
		descriptorPool: VkDescriptorPool,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkResetDescriptorPool :: proc(
		device: VkDevice,
		descriptorPool: VkDescriptorPool,
		flags: VkDescriptorPoolResetFlags,
	) -> VkResult ---;

	vkAllocateDescriptorSets :: proc(
		device: VkDevice,
		pAllocateInfo: ^VkDescriptorSetAllocateInfo,
		pDescriptorSets: ^VkDescriptorSet,
	) -> VkResult ---;

	vkFreeDescriptorSets :: proc(
		device: VkDevice,
		descriptorPool: VkDescriptorPool,
		descriptorSetCount: u32,
		pDescriptorSets: ^VkDescriptorSet,
	) -> VkResult ---;

	vkUpdateDescriptorSets :: proc(
		device: VkDevice,
		descriptorWriteCount: u32,
		pDescriptorWrites: ^VkWriteDescriptorSet,
		descriptorCopyCount: u32,
		pDescriptorCopies: ^VkCopyDescriptorSet,
	) ---;

	vkCreateFramebuffer :: proc(
		device: VkDevice,
		pCreateInfo: ^VkFramebufferCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pFramebuffer: ^VkFramebuffer,
	) -> VkResult ---;

	vkDestroyFramebuffer :: proc(
		device: VkDevice,
		framebuffer: VkFramebuffer,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkCreateRenderPass :: proc(
		device: VkDevice,
		pCreateInfo: ^VkRenderPassCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pRenderPass: ^VkRenderPass,
	) -> VkResult ---;

	vkDestroyRenderPass :: proc(
		device: VkDevice,
		renderPass: VkRenderPass,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetRenderAreaGranularity :: proc(
		device: VkDevice,
		renderPass: VkRenderPass,
		pGranularity: ^VkExtent2D,
	) ---;

	vkCreateCommandPool :: proc(
		device: VkDevice,
		pCreateInfo: ^VkCommandPoolCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pCommandPool: ^VkCommandPool,
	) -> VkResult ---;

	vkDestroyCommandPool :: proc(
		device: VkDevice,
		commandPool: VkCommandPool,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkResetCommandPool :: proc(
		device: VkDevice,
		commandPool: VkCommandPool,
		flags: VkCommandPoolResetFlags,
	) -> VkResult ---;

	vkAllocateCommandBuffers :: proc(
		device: VkDevice,
		pAllocateInfo: ^VkCommandBufferAllocateInfo,
		pCommandBuffers: ^VkCommandBuffer,
	) -> VkResult ---;

	vkFreeCommandBuffers :: proc(
		device: VkDevice,
		commandPool: VkCommandPool,
		commandBufferCount: u32,
		pCommandBuffers: ^VkCommandBuffer,
	) ---;

	vkBeginCommandBuffer :: proc(
		commandBuffer: VkCommandBuffer,
		pBeginInfo: ^VkCommandBufferBeginInfo,
	) -> VkResult ---;

	vkEndCommandBuffer :: proc(
		commandBuffer: VkCommandBuffer,
	) -> VkResult ---;

	vkResetCommandBuffer :: proc(
		commandBuffer: VkCommandBuffer,
		flags: VkCommandBufferResetFlags,
	) -> VkResult ---;

	vkCmdBindPipeline :: proc(
		commandBuffer: VkCommandBuffer,
		pipelineBindPoint: VkPipelineBindPoint,
		pipeline: VkPipeline,
	) ---;

	vkCmdSetViewport :: proc(
		commandBuffer: VkCommandBuffer,
		firstViewport: u32,
		viewportCount: u32,
		pViewports: ^VkViewport,
	) ---;

	vkCmdSetScissor :: proc(
		commandBuffer: VkCommandBuffer,
		firstScissor: u32,
		scissorCount: u32,
		pScissors: ^VkRect2D,
	) ---;

	vkCmdSetLineWidth :: proc(
		commandBuffer: VkCommandBuffer,
		lineWidth: f32,
	) ---;

	vkCmdSetDepthBias :: proc(
		commandBuffer: VkCommandBuffer,
		depthBiasConstantFactor: f32,
		depthBiasClamp: f32,
		depthBiasSlopeFactor: f32,
	) ---;

	vkCmdSetBlendConstants :: proc(
		commandBuffer: VkCommandBuffer,
		blendConstants: f32,
	) ---;

	vkCmdSetDepthBounds :: proc(
		commandBuffer: VkCommandBuffer,
		minDepthBounds: f32,
		maxDepthBounds: f32,
	) ---;

	vkCmdSetStencilCompareMask :: proc(
		commandBuffer: VkCommandBuffer,
		faceMask: VkStencilFaceFlags,
		compareMask: u32,
	) ---;

	vkCmdSetStencilWriteMask :: proc(
		commandBuffer: VkCommandBuffer,
		faceMask: VkStencilFaceFlags,
		writeMask: u32,
	) ---;

	vkCmdSetStencilReference :: proc(
		commandBuffer: VkCommandBuffer,
		faceMask: VkStencilFaceFlags,
		reference: u32,
	) ---;

	vkCmdBindDescriptorSets :: proc(
		commandBuffer: VkCommandBuffer,
		pipelineBindPoint: VkPipelineBindPoint,
		layout: VkPipelineLayout,
		firstSet: u32,
		descriptorSetCount: u32,
		pDescriptorSets: ^VkDescriptorSet,
		dynamicOffsetCount: u32,
		pDynamicOffsets: ^u32,
	) ---;

	vkCmdBindIndexBuffer :: proc(
		commandBuffer: VkCommandBuffer,
		buffer: VkBuffer,
		offset: VkDeviceSize,
		indexType: VkIndexType,
	) ---;

	vkCmdBindVertexBuffers :: proc(
		commandBuffer: VkCommandBuffer,
		firstBinding: u32,
		bindingCount: u32,
		pBuffers: ^VkBuffer,
		pOffsets: ^VkDeviceSize,
	) ---;

	vkCmdDraw :: proc(
		commandBuffer: VkCommandBuffer,
		vertexCount: u32,
		instanceCount: u32,
		firstVertex: u32,
		firstInstance: u32,
	) ---;

	vkCmdDrawIndexed :: proc(
		commandBuffer: VkCommandBuffer,
		indexCount: u32,
		instanceCount: u32,
		firstIndex: u32,
		vertexOffset: i32,
		firstInstance: u32,
	) ---;

	vkCmdDrawIndirect :: proc(
		commandBuffer: VkCommandBuffer,
		buffer: VkBuffer,
		offset: VkDeviceSize,
		drawCount: u32,
		stride: u32,
	) ---;

	vkCmdDrawIndexedIndirect :: proc(
		commandBuffer: VkCommandBuffer,
		buffer: VkBuffer,
		offset: VkDeviceSize,
		drawCount: u32,
		stride: u32,
	) ---;

	vkCmdDispatch :: proc(
		commandBuffer: VkCommandBuffer,
		groupCountX: u32,
		groupCountY: u32,
		groupCountZ: u32,
	) ---;

	vkCmdDispatchIndirect :: proc(
		commandBuffer: VkCommandBuffer,
		buffer: VkBuffer,
		offset: VkDeviceSize,
	) ---;

	vkCmdCopyBuffer :: proc(
		commandBuffer: VkCommandBuffer,
		srcBuffer: VkBuffer,
		dstBuffer: VkBuffer,
		regionCount: u32,
		pRegions: ^VkBufferCopy,
	) ---;

	vkCmdCopyImage :: proc(
		commandBuffer: VkCommandBuffer,
		srcImage: VkImage,
		srcImageLayout: VkImageLayout,
		dstImage: VkImage,
		dstImageLayout: VkImageLayout,
		regionCount: u32,
		pRegions: ^VkImageCopy,
	) ---;

	vkCmdBlitImage :: proc(
		commandBuffer: VkCommandBuffer,
		srcImage: VkImage,
		srcImageLayout: VkImageLayout,
		dstImage: VkImage,
		dstImageLayout: VkImageLayout,
		regionCount: u32,
		pRegions: ^VkImageBlit,
		filter: VkFilter,
	) ---;

	vkCmdCopyBufferToImage :: proc(
		commandBuffer: VkCommandBuffer,
		srcBuffer: VkBuffer,
		dstImage: VkImage,
		dstImageLayout: VkImageLayout,
		regionCount: u32,
		pRegions: ^VkBufferImageCopy,
	) ---;

	vkCmdCopyImageToBuffer :: proc(
		commandBuffer: VkCommandBuffer,
		srcImage: VkImage,
		srcImageLayout: VkImageLayout,
		dstBuffer: VkBuffer,
		regionCount: u32,
		pRegions: ^VkBufferImageCopy,
	) ---;

	vkCmdUpdateBuffer :: proc(
		commandBuffer: VkCommandBuffer,
		dstBuffer: VkBuffer,
		dstOffset: VkDeviceSize,
		dataSize: VkDeviceSize,
		pData: rawptr,
	) ---;

	vkCmdFillBuffer :: proc(
		commandBuffer: VkCommandBuffer,
		dstBuffer: VkBuffer,
		dstOffset: VkDeviceSize,
		size: VkDeviceSize,
		data: u32,
	) ---;

	vkCmdClearColorImage :: proc(
		commandBuffer: VkCommandBuffer,
		image: VkImage,
		imageLayout: VkImageLayout,
		pColor: ^VkClearColorValue,
		rangeCount: u32,
		pRanges: ^VkImageSubresourceRange,
	) ---;

	vkCmdClearDepthStencilImage :: proc(
		commandBuffer: VkCommandBuffer,
		image: VkImage,
		imageLayout: VkImageLayout,
		pDepthStencil: ^VkClearDepthStencilValue,
		rangeCount: u32,
		pRanges: ^VkImageSubresourceRange,
	) ---;

	vkCmdClearAttachments :: proc(
		commandBuffer: VkCommandBuffer,
		attachmentCount: u32,
		pAttachments: ^VkClearAttachment,
		rectCount: u32,
		pRects: ^VkClearRect,
	) ---;

	vkCmdResolveImage :: proc(
		commandBuffer: VkCommandBuffer,
		srcImage: VkImage,
		srcImageLayout: VkImageLayout,
		dstImage: VkImage,
		dstImageLayout: VkImageLayout,
		regionCount: u32,
		pRegions: ^VkImageResolve,
	) ---;

	vkCmdSetEvent :: proc(
		commandBuffer: VkCommandBuffer,
		event: VkEvent,
		stageMask: VkPipelineStageFlags,
	) ---;

	vkCmdResetEvent :: proc(
		commandBuffer: VkCommandBuffer,
		event: VkEvent,
		stageMask: VkPipelineStageFlags,
	) ---;

	vkCmdWaitEvents :: proc(
		commandBuffer: VkCommandBuffer,
		eventCount: u32,
		pEvents: ^VkEvent,
		srcStageMask: VkPipelineStageFlags,
		dstStageMask: VkPipelineStageFlags,
		memoryBarrierCount: u32,
		pMemoryBarriers: ^VkMemoryBarrier,
		bufferMemoryBarrierCount: u32,
		pBufferMemoryBarriers: ^VkBufferMemoryBarrier,
		imageMemoryBarrierCount: u32,
		pImageMemoryBarriers: ^VkImageMemoryBarrier,
	) ---;

	vkCmdPipelineBarrier :: proc(
		commandBuffer: VkCommandBuffer,
		srcStageMask: VkPipelineStageFlags,
		dstStageMask: VkPipelineStageFlags,
		dependencyFlags: VkDependencyFlags,
		memoryBarrierCount: u32,
		pMemoryBarriers: ^VkMemoryBarrier,
		bufferMemoryBarrierCount: u32,
		pBufferMemoryBarriers: ^VkBufferMemoryBarrier,
		imageMemoryBarrierCount: u32,
		pImageMemoryBarriers: ^VkImageMemoryBarrier,
	) ---;

	vkCmdBeginQuery :: proc(
		commandBuffer: VkCommandBuffer,
		queryPool: VkQueryPool,
		query: u32,
		flags: VkQueryControlFlags,
	) ---;

	vkCmdEndQuery :: proc(
		commandBuffer: VkCommandBuffer,
		queryPool: VkQueryPool,
		query: u32,
	) ---;

	vkCmdBeginConditionalRenderingEXT :: proc(
		commandBuffer: VkCommandBuffer,
		pConditionalRenderingBegin: ^VkConditionalRenderingBeginInfoEXT,
	) ---;

	vkCmdEndConditionalRenderingEXT :: proc(
		commandBuffer: VkCommandBuffer,
	) ---;

	vkCmdResetQueryPool :: proc(
		commandBuffer: VkCommandBuffer,
		queryPool: VkQueryPool,
		firstQuery: u32,
		queryCount: u32,
	) ---;

	vkCmdWriteTimestamp :: proc(
		commandBuffer: VkCommandBuffer,
		pipelineStage: VkPipelineStageFlagBits,
		queryPool: VkQueryPool,
		query: u32,
	) ---;

	vkCmdCopyQueryPoolResults :: proc(
		commandBuffer: VkCommandBuffer,
		queryPool: VkQueryPool,
		firstQuery: u32,
		queryCount: u32,
		dstBuffer: VkBuffer,
		dstOffset: VkDeviceSize,
		stride: VkDeviceSize,
		flags: VkQueryResultFlags,
	) ---;

	vkCmdPushConstants :: proc(
		commandBuffer: VkCommandBuffer,
		layout: VkPipelineLayout,
		stageFlags: VkShaderStageFlags,
		offset: u32,
		size: u32,
		pValues: rawptr,
	) ---;

	vkCmdBeginRenderPass :: proc(
		commandBuffer: VkCommandBuffer,
		pRenderPassBegin: ^VkRenderPassBeginInfo,
		contents: VkSubpassContents,
	) ---;

	vkCmdNextSubpass :: proc(
		commandBuffer: VkCommandBuffer,
		contents: VkSubpassContents,
	) ---;

	vkCmdEndRenderPass :: proc(
		commandBuffer: VkCommandBuffer,
	) ---;

	vkCmdExecuteCommands :: proc(
		commandBuffer: VkCommandBuffer,
		commandBufferCount: u32,
		pCommandBuffers: ^VkCommandBuffer,
	) ---;

	vkCreateAndroidSurfaceKHR :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkAndroidSurfaceCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceDisplayPropertiesKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		pPropertyCount: ^u32,
		pProperties: ^VkDisplayPropertiesKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceDisplayPlanePropertiesKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		pPropertyCount: ^u32,
		pProperties: ^VkDisplayPlanePropertiesKHR,
	) -> VkResult ---;

	vkGetDisplayPlaneSupportedDisplaysKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		planeIndex: u32,
		pDisplayCount: ^u32,
		pDisplays: ^VkDisplayKHR,
	) -> VkResult ---;

	vkGetDisplayModePropertiesKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		display: VkDisplayKHR,
		pPropertyCount: ^u32,
		pProperties: ^VkDisplayModePropertiesKHR,
	) -> VkResult ---;

	vkCreateDisplayModeKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		display: VkDisplayKHR,
		pCreateInfo: ^VkDisplayModeCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pMode: ^VkDisplayModeKHR,
	) -> VkResult ---;

	vkGetDisplayPlaneCapabilitiesKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		mode: VkDisplayModeKHR,
		planeIndex: u32,
		pCapabilities: ^VkDisplayPlaneCapabilitiesKHR,
	) -> VkResult ---;

	vkCreateDisplayPlaneSurfaceKHR :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkDisplaySurfaceCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkCreateSharedSwapchainsKHR :: proc(
		device: VkDevice,
		swapchainCount: u32,
		pCreateInfos: ^VkSwapchainCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pSwapchains: ^VkSwapchainKHR,
	) -> VkResult ---;

	vkDestroySurfaceKHR :: proc(
		instance: VkInstance,
		surface: VkSurfaceKHR,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetPhysicalDeviceSurfaceSupportKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		queueFamilyIndex: u32,
		surface: VkSurfaceKHR,
		pSupported: ^VkBool32,
	) -> VkResult ---;

	vkGetPhysicalDeviceSurfaceCapabilitiesKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		surface: VkSurfaceKHR,
		pSurfaceCapabilities: ^VkSurfaceCapabilitiesKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceSurfaceFormatsKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		surface: VkSurfaceKHR,
		pSurfaceFormatCount: ^u32,
		pSurfaceFormats: ^VkSurfaceFormatKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceSurfacePresentModesKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		surface: VkSurfaceKHR,
		pPresentModeCount: ^u32,
		pPresentModes: ^VkPresentModeKHR,
	) -> VkResult ---;

	vkCreateSwapchainKHR :: proc(
		device: VkDevice,
		pCreateInfo: ^VkSwapchainCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pSwapchain: ^VkSwapchainKHR,
	) -> VkResult ---;

	vkDestroySwapchainKHR :: proc(
		device: VkDevice,
		swapchain: VkSwapchainKHR,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetSwapchainImagesKHR :: proc(
		device: VkDevice,
		swapchain: VkSwapchainKHR,
		pSwapchainImageCount: ^u32,
		pSwapchainImages: ^VkImage,
	) -> VkResult ---;

	vkAcquireNextImageKHR :: proc(
		device: VkDevice,
		swapchain: VkSwapchainKHR,
		timeout: u64,
		semaphore: VkSemaphore,
		fence: VkFence,
		pImageIndex: ^u32,
	) -> VkResult ---;

	vkQueuePresentKHR :: proc(
		queue: VkQueue,
		pPresentInfo: ^VkPresentInfoKHR,
	) -> VkResult ---;

	vkCreateViSurfaceNN :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkViSurfaceCreateInfoNN,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkCreateWaylandSurfaceKHR :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkWaylandSurfaceCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceWaylandPresentationSupportKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		queueFamilyIndex: u32,
		display: ^wl_display,
	) -> VkBool32 ---;

	vkCreateWin32SurfaceKHR :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkWin32SurfaceCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceWin32PresentationSupportKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		queueFamilyIndex: u32,
	) -> VkBool32 ---;

	vkCreateXlibSurfaceKHR :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkXlibSurfaceCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceXlibPresentationSupportKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		queueFamilyIndex: u32,
		dpy: ^Display,
		visualID: VisualID,
	) -> VkBool32 ---;

	vkCreateXcbSurfaceKHR :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkXcbSurfaceCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceXcbPresentationSupportKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		queueFamilyIndex: u32,
		connection: ^xcb_connection_t,
		visual_id: xcb_visualid_t,
	) -> VkBool32 ---;

	vkCreateDirectFBSurfaceEXT :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkDirectFBSurfaceCreateInfoEXT,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceDirectFBPresentationSupportEXT :: proc(
		physicalDevice: VkPhysicalDevice,
		queueFamilyIndex: u32,
		dfb: ^IDirectFB,
	) -> VkBool32 ---;

	vkCreateImagePipeSurfaceFUCHSIA :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkImagePipeSurfaceCreateInfoFUCHSIA,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkCreateStreamDescriptorSurfaceGGP :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkStreamDescriptorSurfaceCreateInfoGGP,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkCreateDebugReportCallbackEXT :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkDebugReportCallbackCreateInfoEXT,
		pAllocator: ^VkAllocationCallbacks,
		pCallback: ^VkDebugReportCallbackEXT,
	) -> VkResult ---;

	vkDestroyDebugReportCallbackEXT :: proc(
		instance: VkInstance,
		callback: VkDebugReportCallbackEXT,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkDebugReportMessageEXT :: proc(
		instance: VkInstance,
		flags: VkDebugReportFlagsEXT,
		objectType: VkDebugReportObjectTypeEXT,
		object: u64,
		location: u64,
		messageCode: i32,
		pLayerPrefix: cstring,
		pMessage: cstring,
	) ---;

	vkDebugMarkerSetObjectNameEXT :: proc(
		device: VkDevice,
		pNameInfo: ^VkDebugMarkerObjectNameInfoEXT,
	) -> VkResult ---;

	vkDebugMarkerSetObjectTagEXT :: proc(
		device: VkDevice,
		pTagInfo: ^VkDebugMarkerObjectTagInfoEXT,
	) -> VkResult ---;

	vkCmdDebugMarkerBeginEXT :: proc(
		commandBuffer: VkCommandBuffer,
		pMarkerInfo: ^VkDebugMarkerMarkerInfoEXT,
	) ---;

	vkCmdDebugMarkerEndEXT :: proc(
		commandBuffer: VkCommandBuffer,
	) ---;

	vkCmdDebugMarkerInsertEXT :: proc(
		commandBuffer: VkCommandBuffer,
		pMarkerInfo: ^VkDebugMarkerMarkerInfoEXT,
	) ---;

	vkGetPhysicalDeviceExternalImageFormatPropertiesNV :: proc(
		physicalDevice: VkPhysicalDevice,
		format: VkFormat,
		type: VkImageType,
		tiling: VkImageTiling,
		usage: VkImageUsageFlags,
		flags: VkImageCreateFlags,
		externalHandleType: VkExternalMemoryHandleTypeFlagsNV,
		pExternalImageFormatProperties: ^VkExternalImageFormatPropertiesNV,
	) -> VkResult ---;

	vkGetMemoryWin32HandleNV :: proc(
		device: VkDevice,
		memory: VkDeviceMemory,
		handleType: VkExternalMemoryHandleTypeFlagsNV,
		pHandle: ^HANDLE,
	) -> VkResult ---;

	vkCmdExecuteGeneratedCommandsNV :: proc(
		commandBuffer: VkCommandBuffer,
		isPreprocessed: VkBool32,
		pGeneratedCommandsInfo: ^VkGeneratedCommandsInfoNV,
	) ---;

	vkCmdPreprocessGeneratedCommandsNV :: proc(
		commandBuffer: VkCommandBuffer,
		pGeneratedCommandsInfo: ^VkGeneratedCommandsInfoNV,
	) ---;

	vkCmdBindPipelineShaderGroupNV :: proc(
		commandBuffer: VkCommandBuffer,
		pipelineBindPoint: VkPipelineBindPoint,
		pipeline: VkPipeline,
		groupIndex: u32,
	) ---;

	vkGetGeneratedCommandsMemoryRequirementsNV :: proc(
		device: VkDevice,
		pInfo: ^VkGeneratedCommandsMemoryRequirementsInfoNV,
		pMemoryRequirements: ^VkMemoryRequirements2,
	) ---;

	vkCreateIndirectCommandsLayoutNV :: proc(
		device: VkDevice,
		pCreateInfo: ^VkIndirectCommandsLayoutCreateInfoNV,
		pAllocator: ^VkAllocationCallbacks,
		pIndirectCommandsLayout: ^VkIndirectCommandsLayoutNV,
	) -> VkResult ---;

	vkDestroyIndirectCommandsLayoutNV :: proc(
		device: VkDevice,
		indirectCommandsLayout: VkIndirectCommandsLayoutNV,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetPhysicalDeviceFeatures2 :: proc(
		physicalDevice: VkPhysicalDevice,
		pFeatures: ^VkPhysicalDeviceFeatures2,
	) ---;

	vkGetPhysicalDeviceProperties2 :: proc(
		physicalDevice: VkPhysicalDevice,
		pProperties: ^VkPhysicalDeviceProperties2,
	) ---;

	vkGetPhysicalDeviceFormatProperties2 :: proc(
		physicalDevice: VkPhysicalDevice,
		format: VkFormat,
		pFormatProperties: ^VkFormatProperties2,
	) ---;

	vkGetPhysicalDeviceImageFormatProperties2 :: proc(
		physicalDevice: VkPhysicalDevice,
		pImageFormatInfo: ^VkPhysicalDeviceImageFormatInfo2,
		pImageFormatProperties: ^VkImageFormatProperties2,
	) -> VkResult ---;

	vkGetPhysicalDeviceQueueFamilyProperties2 :: proc(
		physicalDevice: VkPhysicalDevice,
		pQueueFamilyPropertyCount: ^u32,
		pQueueFamilyProperties: ^VkQueueFamilyProperties2,
	) ---;

	vkGetPhysicalDeviceMemoryProperties2 :: proc(
		physicalDevice: VkPhysicalDevice,
		pMemoryProperties: ^VkPhysicalDeviceMemoryProperties2,
	) ---;

	vkGetPhysicalDeviceSparseImageFormatProperties2 :: proc(
		physicalDevice: VkPhysicalDevice,
		pFormatInfo: ^VkPhysicalDeviceSparseImageFormatInfo2,
		pPropertyCount: ^u32,
		pProperties: ^VkSparseImageFormatProperties2,
	) ---;

	vkCmdPushDescriptorSetKHR :: proc(
		commandBuffer: VkCommandBuffer,
		pipelineBindPoint: VkPipelineBindPoint,
		layout: VkPipelineLayout,
		set: u32,
		descriptorWriteCount: u32,
		pDescriptorWrites: ^VkWriteDescriptorSet,
	) ---;

	vkTrimCommandPool :: proc(
		device: VkDevice,
		commandPool: VkCommandPool,
		flags: VkCommandPoolTrimFlags,
	) ---;

	vkGetPhysicalDeviceExternalBufferProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		pExternalBufferInfo: ^VkPhysicalDeviceExternalBufferInfo,
		pExternalBufferProperties: ^VkExternalBufferProperties,
	) ---;

	vkGetMemoryWin32HandleKHR :: proc(
		device: VkDevice,
		pGetWin32HandleInfo: ^VkMemoryGetWin32HandleInfoKHR,
		pHandle: ^HANDLE,
	) -> VkResult ---;

	vkGetMemoryWin32HandlePropertiesKHR :: proc(
		device: VkDevice,
		handleType: VkExternalMemoryHandleTypeFlagBits,
		handle: HANDLE,
		pMemoryWin32HandleProperties: ^VkMemoryWin32HandlePropertiesKHR,
	) -> VkResult ---;

	vkGetMemoryFdKHR :: proc(
		device: VkDevice,
		pGetFdInfo: ^VkMemoryGetFdInfoKHR,
		pFd: ^int,
	) -> VkResult ---;

	vkGetMemoryFdPropertiesKHR :: proc(
		device: VkDevice,
		handleType: VkExternalMemoryHandleTypeFlagBits,
		fd: int,
		pMemoryFdProperties: ^VkMemoryFdPropertiesKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceExternalSemaphoreProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		pExternalSemaphoreInfo: ^VkPhysicalDeviceExternalSemaphoreInfo,
		pExternalSemaphoreProperties: ^VkExternalSemaphoreProperties,
	) ---;

	vkGetSemaphoreWin32HandleKHR :: proc(
		device: VkDevice,
		pGetWin32HandleInfo: ^VkSemaphoreGetWin32HandleInfoKHR,
		pHandle: ^HANDLE,
	) -> VkResult ---;

	vkImportSemaphoreWin32HandleKHR :: proc(
		device: VkDevice,
		pImportSemaphoreWin32HandleInfo: ^VkImportSemaphoreWin32HandleInfoKHR,
	) -> VkResult ---;

	vkGetSemaphoreFdKHR :: proc(
		device: VkDevice,
		pGetFdInfo: ^VkSemaphoreGetFdInfoKHR,
		pFd: ^int,
	) -> VkResult ---;

	vkImportSemaphoreFdKHR :: proc(
		device: VkDevice,
		pImportSemaphoreFdInfo: ^VkImportSemaphoreFdInfoKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceExternalFenceProperties :: proc(
		physicalDevice: VkPhysicalDevice,
		pExternalFenceInfo: ^VkPhysicalDeviceExternalFenceInfo,
		pExternalFenceProperties: ^VkExternalFenceProperties,
	) ---;

	vkGetFenceWin32HandleKHR :: proc(
		device: VkDevice,
		pGetWin32HandleInfo: ^VkFenceGetWin32HandleInfoKHR,
		pHandle: ^HANDLE,
	) -> VkResult ---;

	vkImportFenceWin32HandleKHR :: proc(
		device: VkDevice,
		pImportFenceWin32HandleInfo: ^VkImportFenceWin32HandleInfoKHR,
	) -> VkResult ---;

	vkGetFenceFdKHR :: proc(
		device: VkDevice,
		pGetFdInfo: ^VkFenceGetFdInfoKHR,
		pFd: ^int,
	) -> VkResult ---;

	vkImportFenceFdKHR :: proc(
		device: VkDevice,
		pImportFenceFdInfo: ^VkImportFenceFdInfoKHR,
	) -> VkResult ---;

	vkReleaseDisplayEXT :: proc(
		physicalDevice: VkPhysicalDevice,
		display: VkDisplayKHR,
	) -> VkResult ---;

	vkAcquireXlibDisplayEXT :: proc(
		physicalDevice: VkPhysicalDevice,
		dpy: ^Display,
		display: VkDisplayKHR,
	) -> VkResult ---;

	vkGetRandROutputDisplayEXT :: proc(
		physicalDevice: VkPhysicalDevice,
		dpy: ^Display,
		rrOutput: RROutput,
		pDisplay: ^VkDisplayKHR,
	) -> VkResult ---;

	vkDisplayPowerControlEXT :: proc(
		device: VkDevice,
		display: VkDisplayKHR,
		pDisplayPowerInfo: ^VkDisplayPowerInfoEXT,
	) -> VkResult ---;

	vkRegisterDeviceEventEXT :: proc(
		device: VkDevice,
		pDeviceEventInfo: ^VkDeviceEventInfoEXT,
		pAllocator: ^VkAllocationCallbacks,
		pFence: ^VkFence,
	) -> VkResult ---;

	vkRegisterDisplayEventEXT :: proc(
		device: VkDevice,
		display: VkDisplayKHR,
		pDisplayEventInfo: ^VkDisplayEventInfoEXT,
		pAllocator: ^VkAllocationCallbacks,
		pFence: ^VkFence,
	) -> VkResult ---;

	vkGetSwapchainCounterEXT :: proc(
		device: VkDevice,
		swapchain: VkSwapchainKHR,
		counter: VkSurfaceCounterFlagBitsEXT,
		pCounterValue: ^u64,
	) -> VkResult ---;

	vkGetPhysicalDeviceSurfaceCapabilities2EXT :: proc(
		physicalDevice: VkPhysicalDevice,
		surface: VkSurfaceKHR,
		pSurfaceCapabilities: ^VkSurfaceCapabilities2EXT,
	) -> VkResult ---;

	vkEnumeratePhysicalDeviceGroups :: proc(
		instance: VkInstance,
		pPhysicalDeviceGroupCount: ^u32,
		pPhysicalDeviceGroupProperties: ^VkPhysicalDeviceGroupProperties,
	) -> VkResult ---;

	vkGetDeviceGroupPeerMemoryFeatures :: proc(
		device: VkDevice,
		heapIndex: u32,
		localDeviceIndex: u32,
		remoteDeviceIndex: u32,
		pPeerMemoryFeatures: ^VkPeerMemoryFeatureFlags,
	) ---;

	vkBindBufferMemory2 :: proc(
		device: VkDevice,
		bindInfoCount: u32,
		pBindInfos: ^VkBindBufferMemoryInfo,
	) -> VkResult ---;

	vkBindImageMemory2 :: proc(
		device: VkDevice,
		bindInfoCount: u32,
		pBindInfos: ^VkBindImageMemoryInfo,
	) -> VkResult ---;

	vkCmdSetDeviceMask :: proc(
		commandBuffer: VkCommandBuffer,
		deviceMask: u32,
	) ---;

	vkGetDeviceGroupPresentCapabilitiesKHR :: proc(
		device: VkDevice,
		pDeviceGroupPresentCapabilities: ^VkDeviceGroupPresentCapabilitiesKHR,
	) -> VkResult ---;

	vkGetDeviceGroupSurfacePresentModesKHR :: proc(
		device: VkDevice,
		surface: VkSurfaceKHR,
		pModes: ^VkDeviceGroupPresentModeFlagsKHR,
	) -> VkResult ---;

	vkAcquireNextImage2KHR :: proc(
		device: VkDevice,
		pAcquireInfo: ^VkAcquireNextImageInfoKHR,
		pImageIndex: ^u32,
	) -> VkResult ---;

	vkCmdDispatchBase :: proc(
		commandBuffer: VkCommandBuffer,
		baseGroupX: u32,
		baseGroupY: u32,
		baseGroupZ: u32,
		groupCountX: u32,
		groupCountY: u32,
		groupCountZ: u32,
	) ---;

	vkGetPhysicalDevicePresentRectanglesKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		surface: VkSurfaceKHR,
		pRectCount: ^u32,
		pRects: ^VkRect2D,
	) -> VkResult ---;

	vkCreateDescriptorUpdateTemplate :: proc(
		device: VkDevice,
		pCreateInfo: ^VkDescriptorUpdateTemplateCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pDescriptorUpdateTemplate: ^VkDescriptorUpdateTemplate,
	) -> VkResult ---;

	vkDestroyDescriptorUpdateTemplate :: proc(
		device: VkDevice,
		descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkUpdateDescriptorSetWithTemplate :: proc(
		device: VkDevice,
		descriptorSet: VkDescriptorSet,
		descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
		pData: rawptr,
	) ---;

	vkCmdPushDescriptorSetWithTemplateKHR :: proc(
		commandBuffer: VkCommandBuffer,
		descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
		layout: VkPipelineLayout,
		set: u32,
		pData: rawptr,
	) ---;

	vkSetHdrMetadataEXT :: proc(
		device: VkDevice,
		swapchainCount: u32,
		pSwapchains: ^VkSwapchainKHR,
		pMetadata: ^VkHdrMetadataEXT,
	) ---;

	vkGetSwapchainStatusKHR :: proc(
		device: VkDevice,
		swapchain: VkSwapchainKHR,
	) -> VkResult ---;

	vkGetRefreshCycleDurationGOOGLE :: proc(
		device: VkDevice,
		swapchain: VkSwapchainKHR,
		pDisplayTimingProperties: ^VkRefreshCycleDurationGOOGLE,
	) -> VkResult ---;

	vkGetPastPresentationTimingGOOGLE :: proc(
		device: VkDevice,
		swapchain: VkSwapchainKHR,
		pPresentationTimingCount: ^u32,
		pPresentationTimings: ^VkPastPresentationTimingGOOGLE,
	) -> VkResult ---;

	vkCreateIOSSurfaceMVK :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkIOSSurfaceCreateInfoMVK,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkCreateMacOSSurfaceMVK :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkMacOSSurfaceCreateInfoMVK,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkCreateMetalSurfaceEXT :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkMetalSurfaceCreateInfoEXT,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkCmdSetViewportWScalingNV :: proc(
		commandBuffer: VkCommandBuffer,
		firstViewport: u32,
		viewportCount: u32,
		pViewportWScalings: ^VkViewportWScalingNV,
	) ---;

	vkCmdSetDiscardRectangleEXT :: proc(
		commandBuffer: VkCommandBuffer,
		firstDiscardRectangle: u32,
		discardRectangleCount: u32,
		pDiscardRectangles: ^VkRect2D,
	) ---;

	vkCmdSetSampleLocationsEXT :: proc(
		commandBuffer: VkCommandBuffer,
		pSampleLocationsInfo: ^VkSampleLocationsInfoEXT,
	) ---;

	vkGetPhysicalDeviceMultisamplePropertiesEXT :: proc(
		physicalDevice: VkPhysicalDevice,
		samples: VkSampleCountFlagBits,
		pMultisampleProperties: ^VkMultisamplePropertiesEXT,
	) ---;

	vkGetPhysicalDeviceSurfaceCapabilities2KHR :: proc(
		physicalDevice: VkPhysicalDevice,
		pSurfaceInfo: ^VkPhysicalDeviceSurfaceInfo2KHR,
		pSurfaceCapabilities: ^VkSurfaceCapabilities2KHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceSurfaceFormats2KHR :: proc(
		physicalDevice: VkPhysicalDevice,
		pSurfaceInfo: ^VkPhysicalDeviceSurfaceInfo2KHR,
		pSurfaceFormatCount: ^u32,
		pSurfaceFormats: ^VkSurfaceFormat2KHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceDisplayProperties2KHR :: proc(
		physicalDevice: VkPhysicalDevice,
		pPropertyCount: ^u32,
		pProperties: ^VkDisplayProperties2KHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceDisplayPlaneProperties2KHR :: proc(
		physicalDevice: VkPhysicalDevice,
		pPropertyCount: ^u32,
		pProperties: ^VkDisplayPlaneProperties2KHR,
	) -> VkResult ---;

	vkGetDisplayModeProperties2KHR :: proc(
		physicalDevice: VkPhysicalDevice,
		display: VkDisplayKHR,
		pPropertyCount: ^u32,
		pProperties: ^VkDisplayModeProperties2KHR,
	) -> VkResult ---;

	vkGetDisplayPlaneCapabilities2KHR :: proc(
		physicalDevice: VkPhysicalDevice,
		pDisplayPlaneInfo: ^VkDisplayPlaneInfo2KHR,
		pCapabilities: ^VkDisplayPlaneCapabilities2KHR,
	) -> VkResult ---;

	vkGetBufferMemoryRequirements2 :: proc(
		device: VkDevice,
		pInfo: ^VkBufferMemoryRequirementsInfo2,
		pMemoryRequirements: ^VkMemoryRequirements2,
	) ---;

	vkGetImageMemoryRequirements2 :: proc(
		device: VkDevice,
		pInfo: ^VkImageMemoryRequirementsInfo2,
		pMemoryRequirements: ^VkMemoryRequirements2,
	) ---;

	vkGetImageSparseMemoryRequirements2 :: proc(
		device: VkDevice,
		pInfo: ^VkImageSparseMemoryRequirementsInfo2,
		pSparseMemoryRequirementCount: ^u32,
		pSparseMemoryRequirements: ^VkSparseImageMemoryRequirements2,
	) ---;

	vkCreateSamplerYcbcrConversion :: proc(
		device: VkDevice,
		pCreateInfo: ^VkSamplerYcbcrConversionCreateInfo,
		pAllocator: ^VkAllocationCallbacks,
		pYcbcrConversion: ^VkSamplerYcbcrConversion,
	) -> VkResult ---;

	vkDestroySamplerYcbcrConversion :: proc(
		device: VkDevice,
		ycbcrConversion: VkSamplerYcbcrConversion,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetDeviceQueue2 :: proc(
		device: VkDevice,
		pQueueInfo: ^VkDeviceQueueInfo2,
		pQueue: ^VkQueue,
	) ---;

	vkCreateValidationCacheEXT :: proc(
		device: VkDevice,
		pCreateInfo: ^VkValidationCacheCreateInfoEXT,
		pAllocator: ^VkAllocationCallbacks,
		pValidationCache: ^VkValidationCacheEXT,
	) -> VkResult ---;

	vkDestroyValidationCacheEXT :: proc(
		device: VkDevice,
		validationCache: VkValidationCacheEXT,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetValidationCacheDataEXT :: proc(
		device: VkDevice,
		validationCache: VkValidationCacheEXT,
		pDataSize: ^u64,
		pData: rawptr,
	) -> VkResult ---;

	vkMergeValidationCachesEXT :: proc(
		device: VkDevice,
		dstCache: VkValidationCacheEXT,
		srcCacheCount: u32,
		pSrcCaches: ^VkValidationCacheEXT,
	) -> VkResult ---;

	vkGetDescriptorSetLayoutSupport :: proc(
		device: VkDevice,
		pCreateInfo: ^VkDescriptorSetLayoutCreateInfo,
		pSupport: ^VkDescriptorSetLayoutSupport,
	) ---;

	vkGetSwapchainGrallocUsageANDROID :: proc(
		device: VkDevice,
		format: VkFormat,
		imageUsage: VkImageUsageFlags,
		grallocUsage: ^int,
	) -> VkResult ---;

	vkGetSwapchainGrallocUsage2ANDROID :: proc(
		device: VkDevice,
		format: VkFormat,
		imageUsage: VkImageUsageFlags,
		swapchainImageUsage: VkSwapchainImageUsageFlagsANDROID,
		grallocConsumerUsage: ^u64,
		grallocProducerUsage: ^u64,
	) -> VkResult ---;

	vkAcquireImageANDROID :: proc(
		device: VkDevice,
		image: VkImage,
		nativeFenceFd: int,
		semaphore: VkSemaphore,
		fence: VkFence,
	) -> VkResult ---;

	vkQueueSignalReleaseImageANDROID :: proc(
		queue: VkQueue,
		waitSemaphoreCount: u32,
		pWaitSemaphores: ^VkSemaphore,
		image: VkImage,
		pNativeFenceFd: ^int,
	) -> VkResult ---;

	vkGetShaderInfoAMD :: proc(
		device: VkDevice,
		pipeline: VkPipeline,
		shaderStage: VkShaderStageFlagBits,
		infoType: VkShaderInfoTypeAMD,
		pInfoSize: ^u64,
		pInfo: rawptr,
	) -> VkResult ---;

	vkSetLocalDimmingAMD :: proc(
		device: VkDevice,
		swapChain: VkSwapchainKHR,
		localDimmingEnable: VkBool32,
	) ---;

	vkGetPhysicalDeviceCalibrateableTimeDomainsEXT :: proc(
		physicalDevice: VkPhysicalDevice,
		pTimeDomainCount: ^u32,
		pTimeDomains: ^VkTimeDomainEXT,
	) -> VkResult ---;

	vkGetCalibratedTimestampsEXT :: proc(
		device: VkDevice,
		timestampCount: u32,
		pTimestampInfos: ^VkCalibratedTimestampInfoEXT,
		pTimestamps: ^u64,
		pMaxDeviation: ^u64,
	) -> VkResult ---;

	vkSetDebugUtilsObjectNameEXT :: proc(
		device: VkDevice,
		pNameInfo: ^VkDebugUtilsObjectNameInfoEXT,
	) -> VkResult ---;

	vkSetDebugUtilsObjectTagEXT :: proc(
		device: VkDevice,
		pTagInfo: ^VkDebugUtilsObjectTagInfoEXT,
	) -> VkResult ---;

	vkQueueBeginDebugUtilsLabelEXT :: proc(
		queue: VkQueue,
		pLabelInfo: ^VkDebugUtilsLabelEXT,
	) ---;

	vkQueueEndDebugUtilsLabelEXT :: proc(
		queue: VkQueue,
	) ---;

	vkQueueInsertDebugUtilsLabelEXT :: proc(
		queue: VkQueue,
		pLabelInfo: ^VkDebugUtilsLabelEXT,
	) ---;

	vkCmdBeginDebugUtilsLabelEXT :: proc(
		commandBuffer: VkCommandBuffer,
		pLabelInfo: ^VkDebugUtilsLabelEXT,
	) ---;

	vkCmdEndDebugUtilsLabelEXT :: proc(
		commandBuffer: VkCommandBuffer,
	) ---;

	vkCmdInsertDebugUtilsLabelEXT :: proc(
		commandBuffer: VkCommandBuffer,
		pLabelInfo: ^VkDebugUtilsLabelEXT,
	) ---;

	vkCreateDebugUtilsMessengerEXT :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkDebugUtilsMessengerCreateInfoEXT,
		pAllocator: ^VkAllocationCallbacks,
		pMessenger: ^VkDebugUtilsMessengerEXT,
	) -> VkResult ---;

	vkDestroyDebugUtilsMessengerEXT :: proc(
		instance: VkInstance,
		messenger: VkDebugUtilsMessengerEXT,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkSubmitDebugUtilsMessageEXT :: proc(
		instance: VkInstance,
		messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
		messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
		pCallbackData: ^VkDebugUtilsMessengerCallbackDataEXT,
	) ---;

	vkGetMemoryHostPointerPropertiesEXT :: proc(
		device: VkDevice,
		handleType: VkExternalMemoryHandleTypeFlagBits,
		pHostPointer: rawptr,
		pMemoryHostPointerProperties: ^VkMemoryHostPointerPropertiesEXT,
	) -> VkResult ---;

	vkCmdWriteBufferMarkerAMD :: proc(
		commandBuffer: VkCommandBuffer,
		pipelineStage: VkPipelineStageFlagBits,
		dstBuffer: VkBuffer,
		dstOffset: VkDeviceSize,
		marker: u32,
	) ---;

	vkCreateRenderPass2 :: proc(
		device: VkDevice,
		pCreateInfo: ^VkRenderPassCreateInfo2,
		pAllocator: ^VkAllocationCallbacks,
		pRenderPass: ^VkRenderPass,
	) -> VkResult ---;

	vkCmdBeginRenderPass2 :: proc(
		commandBuffer: VkCommandBuffer,
		pRenderPassBegin: ^VkRenderPassBeginInfo,
		pSubpassBeginInfo: ^VkSubpassBeginInfo,
	) ---;

	vkCmdNextSubpass2 :: proc(
		commandBuffer: VkCommandBuffer,
		pSubpassBeginInfo: ^VkSubpassBeginInfo,
		pSubpassEndInfo: ^VkSubpassEndInfo,
	) ---;

	vkCmdEndRenderPass2 :: proc(
		commandBuffer: VkCommandBuffer,
		pSubpassEndInfo: ^VkSubpassEndInfo,
	) ---;

	vkGetSemaphoreCounterValue :: proc(
		device: VkDevice,
		semaphore: VkSemaphore,
		pValue: ^u64,
	) -> VkResult ---;

	vkWaitSemaphores :: proc(
		device: VkDevice,
		pWaitInfo: ^VkSemaphoreWaitInfo,
		timeout: u64,
	) -> VkResult ---;

	vkSignalSemaphore :: proc(
		device: VkDevice,
		pSignalInfo: ^VkSemaphoreSignalInfo,
	) -> VkResult ---;

	vkGetAndroidHardwareBufferPropertiesANDROID :: proc(
		device: VkDevice,
		buffer: ^AHardwareBuffer,
		pProperties: ^VkAndroidHardwareBufferPropertiesANDROID,
	) -> VkResult ---;

	vkGetMemoryAndroidHardwareBufferANDROID :: proc(
		device: VkDevice,
		pInfo: ^VkMemoryGetAndroidHardwareBufferInfoANDROID,
		pBuffer: ^^AHardwareBuffer,
	) -> VkResult ---;

	vkCmdDrawIndirectCount :: proc(
		commandBuffer: VkCommandBuffer,
		buffer: VkBuffer,
		offset: VkDeviceSize,
		countBuffer: VkBuffer,
		countBufferOffset: VkDeviceSize,
		maxDrawCount: u32,
		stride: u32,
	) ---;

	vkCmdDrawIndexedIndirectCount :: proc(
		commandBuffer: VkCommandBuffer,
		buffer: VkBuffer,
		offset: VkDeviceSize,
		countBuffer: VkBuffer,
		countBufferOffset: VkDeviceSize,
		maxDrawCount: u32,
		stride: u32,
	) ---;

	vkCmdSetCheckpointNV :: proc(
		commandBuffer: VkCommandBuffer,
		pCheckpointMarker: rawptr,
	) ---;

	vkGetQueueCheckpointDataNV :: proc(
		queue: VkQueue,
		pCheckpointDataCount: ^u32,
		pCheckpointData: ^VkCheckpointDataNV,
	) ---;

	vkCmdBindTransformFeedbackBuffersEXT :: proc(
		commandBuffer: VkCommandBuffer,
		firstBinding: u32,
		bindingCount: u32,
		pBuffers: ^VkBuffer,
		pOffsets: ^VkDeviceSize,
		pSizes: ^VkDeviceSize,
	) ---;

	vkCmdBeginTransformFeedbackEXT :: proc(
		commandBuffer: VkCommandBuffer,
		firstCounterBuffer: u32,
		counterBufferCount: u32,
		pCounterBuffers: ^VkBuffer,
		pCounterBufferOffsets: ^VkDeviceSize,
	) ---;

	vkCmdEndTransformFeedbackEXT :: proc(
		commandBuffer: VkCommandBuffer,
		firstCounterBuffer: u32,
		counterBufferCount: u32,
		pCounterBuffers: ^VkBuffer,
		pCounterBufferOffsets: ^VkDeviceSize,
	) ---;

	vkCmdBeginQueryIndexedEXT :: proc(
		commandBuffer: VkCommandBuffer,
		queryPool: VkQueryPool,
		query: u32,
		flags: VkQueryControlFlags,
		index: u32,
	) ---;

	vkCmdEndQueryIndexedEXT :: proc(
		commandBuffer: VkCommandBuffer,
		queryPool: VkQueryPool,
		query: u32,
		index: u32,
	) ---;

	vkCmdDrawIndirectByteCountEXT :: proc(
		commandBuffer: VkCommandBuffer,
		instanceCount: u32,
		firstInstance: u32,
		counterBuffer: VkBuffer,
		counterBufferOffset: VkDeviceSize,
		counterOffset: u32,
		vertexStride: u32,
	) ---;

	vkCmdSetExclusiveScissorNV :: proc(
		commandBuffer: VkCommandBuffer,
		firstExclusiveScissor: u32,
		exclusiveScissorCount: u32,
		pExclusiveScissors: ^VkRect2D,
	) ---;

	vkCmdBindShadingRateImageNV :: proc(
		commandBuffer: VkCommandBuffer,
		imageView: VkImageView,
		imageLayout: VkImageLayout,
	) ---;

	vkCmdSetViewportShadingRatePaletteNV :: proc(
		commandBuffer: VkCommandBuffer,
		firstViewport: u32,
		viewportCount: u32,
		pShadingRatePalettes: ^VkShadingRatePaletteNV,
	) ---;

	vkCmdSetCoarseSampleOrderNV :: proc(
		commandBuffer: VkCommandBuffer,
		sampleOrderType: VkCoarseSampleOrderTypeNV,
		customSampleOrderCount: u32,
		pCustomSampleOrders: ^VkCoarseSampleOrderCustomNV,
	) ---;

	vkCmdDrawMeshTasksNV :: proc(
		commandBuffer: VkCommandBuffer,
		taskCount: u32,
		firstTask: u32,
	) ---;

	vkCmdDrawMeshTasksIndirectNV :: proc(
		commandBuffer: VkCommandBuffer,
		buffer: VkBuffer,
		offset: VkDeviceSize,
		drawCount: u32,
		stride: u32,
	) ---;

	vkCmdDrawMeshTasksIndirectCountNV :: proc(
		commandBuffer: VkCommandBuffer,
		buffer: VkBuffer,
		offset: VkDeviceSize,
		countBuffer: VkBuffer,
		countBufferOffset: VkDeviceSize,
		maxDrawCount: u32,
		stride: u32,
	) ---;

	vkCompileDeferredNV :: proc(
		device: VkDevice,
		pipeline: VkPipeline,
		shader: u32,
	) -> VkResult ---;

	vkCreateAccelerationStructureNV :: proc(
		device: VkDevice,
		pCreateInfo: ^VkAccelerationStructureCreateInfoNV,
		pAllocator: ^VkAllocationCallbacks,
		pAccelerationStructure: ^VkAccelerationStructureNV,
	) -> VkResult ---;

	vkDestroyAccelerationStructureKHR :: proc(
		device: VkDevice,
		accelerationStructure: VkAccelerationStructureKHR,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetAccelerationStructureMemoryRequirementsKHR :: proc(
		device: VkDevice,
		pInfo: ^VkAccelerationStructureMemoryRequirementsInfoKHR,
		pMemoryRequirements: ^VkMemoryRequirements2,
	) ---;

	vkGetAccelerationStructureMemoryRequirementsNV :: proc(
		device: VkDevice,
		pInfo: ^VkAccelerationStructureMemoryRequirementsInfoNV,
		pMemoryRequirements: ^VkMemoryRequirements2KHR,
	) ---;

	vkBindAccelerationStructureMemoryKHR :: proc(
		device: VkDevice,
		bindInfoCount: u32,
		pBindInfos: ^VkBindAccelerationStructureMemoryInfoKHR,
	) -> VkResult ---;

	vkCmdCopyAccelerationStructureNV :: proc(
		commandBuffer: VkCommandBuffer,
		dst: VkAccelerationStructureKHR,
		src: VkAccelerationStructureKHR,
		mode: VkCopyAccelerationStructureModeKHR,
	) ---;

	vkCmdCopyAccelerationStructureKHR :: proc(
		commandBuffer: VkCommandBuffer,
		pInfo: ^VkCopyAccelerationStructureInfoKHR,
	) ---;

	vkCopyAccelerationStructureKHR :: proc(
		device: VkDevice,
		pInfo: ^VkCopyAccelerationStructureInfoKHR,
	) -> VkResult ---;

	vkCmdCopyAccelerationStructureToMemoryKHR :: proc(
		commandBuffer: VkCommandBuffer,
		pInfo: ^VkCopyAccelerationStructureToMemoryInfoKHR,
	) ---;

	vkCopyAccelerationStructureToMemoryKHR :: proc(
		device: VkDevice,
		pInfo: ^VkCopyAccelerationStructureToMemoryInfoKHR,
	) -> VkResult ---;

	vkCmdCopyMemoryToAccelerationStructureKHR :: proc(
		commandBuffer: VkCommandBuffer,
		pInfo: ^VkCopyMemoryToAccelerationStructureInfoKHR,
	) ---;

	vkCopyMemoryToAccelerationStructureKHR :: proc(
		device: VkDevice,
		pInfo: ^VkCopyMemoryToAccelerationStructureInfoKHR,
	) -> VkResult ---;

	vkCmdWriteAccelerationStructuresPropertiesKHR :: proc(
		commandBuffer: VkCommandBuffer,
		accelerationStructureCount: u32,
		pAccelerationStructures: ^VkAccelerationStructureKHR,
		queryType: VkQueryType,
		queryPool: VkQueryPool,
		firstQuery: u32,
	) ---;

	vkCmdBuildAccelerationStructureNV :: proc(
		commandBuffer: VkCommandBuffer,
		pInfo: ^VkAccelerationStructureInfoNV,
		instanceData: VkBuffer,
		instanceOffset: VkDeviceSize,
		update: VkBool32,
		dst: VkAccelerationStructureKHR,
		src: VkAccelerationStructureKHR,
		scratch: VkBuffer,
		scratchOffset: VkDeviceSize,
	) ---;

	vkWriteAccelerationStructuresPropertiesKHR :: proc(
		device: VkDevice,
		accelerationStructureCount: u32,
		pAccelerationStructures: ^VkAccelerationStructureKHR,
		queryType: VkQueryType,
		dataSize: u64,
		pData: rawptr,
		stride: u64,
	) -> VkResult ---;

	vkCmdTraceRaysKHR :: proc(
		commandBuffer: VkCommandBuffer,
		pRaygenShaderBindingTable: ^VkStridedBufferRegionKHR,
		pMissShaderBindingTable: ^VkStridedBufferRegionKHR,
		pHitShaderBindingTable: ^VkStridedBufferRegionKHR,
		pCallableShaderBindingTable: ^VkStridedBufferRegionKHR,
		width: u32,
		height: u32,
		depth: u32,
	) ---;

	vkCmdTraceRaysNV :: proc(
		commandBuffer: VkCommandBuffer,
		raygenShaderBindingTableBuffer: VkBuffer,
		raygenShaderBindingOffset: VkDeviceSize,
		missShaderBindingTableBuffer: VkBuffer,
		missShaderBindingOffset: VkDeviceSize,
		missShaderBindingStride: VkDeviceSize,
		hitShaderBindingTableBuffer: VkBuffer,
		hitShaderBindingOffset: VkDeviceSize,
		hitShaderBindingStride: VkDeviceSize,
		callableShaderBindingTableBuffer: VkBuffer,
		callableShaderBindingOffset: VkDeviceSize,
		callableShaderBindingStride: VkDeviceSize,
		width: u32,
		height: u32,
		depth: u32,
	) ---;

	vkGetRayTracingShaderGroupHandlesKHR :: proc(
		device: VkDevice,
		pipeline: VkPipeline,
		firstGroup: u32,
		groupCount: u32,
		dataSize: u64,
		pData: rawptr,
	) -> VkResult ---;

	vkGetRayTracingCaptureReplayShaderGroupHandlesKHR :: proc(
		device: VkDevice,
		pipeline: VkPipeline,
		firstGroup: u32,
		groupCount: u32,
		dataSize: u64,
		pData: rawptr,
	) -> VkResult ---;

	vkGetAccelerationStructureHandleNV :: proc(
		device: VkDevice,
		accelerationStructure: VkAccelerationStructureKHR,
		dataSize: u64,
		pData: rawptr,
	) -> VkResult ---;

	vkCreateRayTracingPipelinesNV :: proc(
		device: VkDevice,
		pipelineCache: VkPipelineCache,
		createInfoCount: u32,
		pCreateInfos: ^VkRayTracingPipelineCreateInfoNV,
		pAllocator: ^VkAllocationCallbacks,
		pPipelines: ^VkPipeline,
	) -> VkResult ---;

	vkCreateRayTracingPipelinesKHR :: proc(
		device: VkDevice,
		pipelineCache: VkPipelineCache,
		createInfoCount: u32,
		pCreateInfos: ^VkRayTracingPipelineCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pPipelines: ^VkPipeline,
	) -> VkResult ---;

	vkGetPhysicalDeviceCooperativeMatrixPropertiesNV :: proc(
		physicalDevice: VkPhysicalDevice,
		pPropertyCount: ^u32,
		pProperties: ^VkCooperativeMatrixPropertiesNV,
	) -> VkResult ---;

	vkCmdTraceRaysIndirectKHR :: proc(
		commandBuffer: VkCommandBuffer,
		pRaygenShaderBindingTable: ^VkStridedBufferRegionKHR,
		pMissShaderBindingTable: ^VkStridedBufferRegionKHR,
		pHitShaderBindingTable: ^VkStridedBufferRegionKHR,
		pCallableShaderBindingTable: ^VkStridedBufferRegionKHR,
		buffer: VkBuffer,
		offset: VkDeviceSize,
	) ---;

	vkGetDeviceAccelerationStructureCompatibilityKHR :: proc(
		device: VkDevice,
		version: ^VkAccelerationStructureVersionKHR,
	) -> VkResult ---;

	vkGetImageViewHandleNVX :: proc(
		device: VkDevice,
		pInfo: ^VkImageViewHandleInfoNVX,
	) -> u32 ---;

	vkGetImageViewAddressNVX :: proc(
		device: VkDevice,
		imageView: VkImageView,
		pProperties: ^VkImageViewAddressPropertiesNVX,
	) -> VkResult ---;

	vkGetPhysicalDeviceSurfacePresentModes2EXT :: proc(
		physicalDevice: VkPhysicalDevice,
		pSurfaceInfo: ^VkPhysicalDeviceSurfaceInfo2KHR,
		pPresentModeCount: ^u32,
		pPresentModes: ^VkPresentModeKHR,
	) -> VkResult ---;

	vkGetDeviceGroupSurfacePresentModes2EXT :: proc(
		device: VkDevice,
		pSurfaceInfo: ^VkPhysicalDeviceSurfaceInfo2KHR,
		pModes: ^VkDeviceGroupPresentModeFlagsKHR,
	) -> VkResult ---;

	vkAcquireFullScreenExclusiveModeEXT :: proc(
		device: VkDevice,
		swapchain: VkSwapchainKHR,
	) -> VkResult ---;

	vkReleaseFullScreenExclusiveModeEXT :: proc(
		device: VkDevice,
		swapchain: VkSwapchainKHR,
	) -> VkResult ---;

	vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		queueFamilyIndex: u32,
		pCounterCount: ^u32,
		pCounters: ^VkPerformanceCounterKHR,
		pCounterDescriptions: ^VkPerformanceCounterDescriptionKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR :: proc(
		physicalDevice: VkPhysicalDevice,
		pPerformanceQueryCreateInfo: ^VkQueryPoolPerformanceCreateInfoKHR,
		pNumPasses: ^u32,
	) ---;

	vkAcquireProfilingLockKHR :: proc(
		device: VkDevice,
		pInfo: ^VkAcquireProfilingLockInfoKHR,
	) -> VkResult ---;

	vkReleaseProfilingLockKHR :: proc(
		device: VkDevice,
	) ---;

	vkGetImageDrmFormatModifierPropertiesEXT :: proc(
		device: VkDevice,
		image: VkImage,
		pProperties: ^VkImageDrmFormatModifierPropertiesEXT,
	) -> VkResult ---;

	vkGetBufferOpaqueCaptureAddress :: proc(
		device: VkDevice,
		pInfo: ^VkBufferDeviceAddressInfo,
	) -> u64 ---;

	vkGetBufferDeviceAddress :: proc(
		device: VkDevice,
		pInfo: ^VkBufferDeviceAddressInfo,
	) -> VkDeviceAddress ---;

	vkCreateHeadlessSurfaceEXT :: proc(
		instance: VkInstance,
		pCreateInfo: ^VkHeadlessSurfaceCreateInfoEXT,
		pAllocator: ^VkAllocationCallbacks,
		pSurface: ^VkSurfaceKHR,
	) -> VkResult ---;

	vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV :: proc(
		physicalDevice: VkPhysicalDevice,
		pCombinationCount: ^u32,
		pCombinations: ^VkFramebufferMixedSamplesCombinationNV,
	) -> VkResult ---;

	vkInitializePerformanceApiINTEL :: proc(
		device: VkDevice,
		pInitializeInfo: ^VkInitializePerformanceApiInfoINTEL,
	) -> VkResult ---;

	vkUninitializePerformanceApiINTEL :: proc(
		device: VkDevice,
	) ---;

	vkCmdSetPerformanceMarkerINTEL :: proc(
		commandBuffer: VkCommandBuffer,
		pMarkerInfo: ^VkPerformanceMarkerInfoINTEL,
	) -> VkResult ---;

	vkCmdSetPerformanceStreamMarkerINTEL :: proc(
		commandBuffer: VkCommandBuffer,
		pMarkerInfo: ^VkPerformanceStreamMarkerInfoINTEL,
	) -> VkResult ---;

	vkCmdSetPerformanceOverrideINTEL :: proc(
		commandBuffer: VkCommandBuffer,
		pOverrideInfo: ^VkPerformanceOverrideInfoINTEL,
	) -> VkResult ---;

	vkAcquirePerformanceConfigurationINTEL :: proc(
		device: VkDevice,
		pAcquireInfo: ^VkPerformanceConfigurationAcquireInfoINTEL,
		pConfiguration: ^VkPerformanceConfigurationINTEL,
	) -> VkResult ---;

	vkReleasePerformanceConfigurationINTEL :: proc(
		device: VkDevice,
		configuration: VkPerformanceConfigurationINTEL,
	) -> VkResult ---;

	vkQueueSetPerformanceConfigurationINTEL :: proc(
		queue: VkQueue,
		configuration: VkPerformanceConfigurationINTEL,
	) -> VkResult ---;

	vkGetPerformanceParameterINTEL :: proc(
		device: VkDevice,
		parameter: VkPerformanceParameterTypeINTEL,
		pValue: ^VkPerformanceValueINTEL,
	) -> VkResult ---;

	vkGetDeviceMemoryOpaqueCaptureAddress :: proc(
		device: VkDevice,
		pInfo: ^VkDeviceMemoryOpaqueCaptureAddressInfo,
	) -> u64 ---;

	vkGetPipelineExecutablePropertiesKHR :: proc(
		device: VkDevice,
		pPipelineInfo: ^VkPipelineInfoKHR,
		pExecutableCount: ^u32,
		pProperties: ^VkPipelineExecutablePropertiesKHR,
	) -> VkResult ---;

	vkGetPipelineExecutableStatisticsKHR :: proc(
		device: VkDevice,
		pExecutableInfo: ^VkPipelineExecutableInfoKHR,
		pStatisticCount: ^u32,
		pStatistics: ^VkPipelineExecutableStatisticKHR,
	) -> VkResult ---;

	vkGetPipelineExecutableInternalRepresentationsKHR :: proc(
		device: VkDevice,
		pExecutableInfo: ^VkPipelineExecutableInfoKHR,
		pInternalRepresentationCount: ^u32,
		pInternalRepresentations: ^VkPipelineExecutableInternalRepresentationKHR,
	) -> VkResult ---;

	vkCmdSetLineStippleEXT :: proc(
		commandBuffer: VkCommandBuffer,
		lineStippleFactor: u32,
		lineStipplePattern: u16,
	) ---;

	vkGetPhysicalDeviceToolPropertiesEXT :: proc(
		physicalDevice: VkPhysicalDevice,
		pToolCount: ^u32,
		pToolProperties: ^VkPhysicalDeviceToolPropertiesEXT,
	) -> VkResult ---;

	vkCreateAccelerationStructureKHR :: proc(
		device: VkDevice,
		pCreateInfo: ^VkAccelerationStructureCreateInfoKHR,
		pAllocator: ^VkAllocationCallbacks,
		pAccelerationStructure: ^VkAccelerationStructureKHR,
	) -> VkResult ---;

	vkCmdBuildAccelerationStructureKHR :: proc(
		commandBuffer: VkCommandBuffer,
		infoCount: u32,
		pInfos: ^VkAccelerationStructureBuildGeometryInfoKHR,
		ppOffsetInfos: ^^VkAccelerationStructureBuildOffsetInfoKHR,
	) ---;

	vkCmdBuildAccelerationStructureIndirectKHR :: proc(
		commandBuffer: VkCommandBuffer,
		pInfo: ^VkAccelerationStructureBuildGeometryInfoKHR,
		indirectBuffer: VkBuffer,
		indirectOffset: VkDeviceSize,
		indirectStride: u32,
	) ---;

	vkBuildAccelerationStructureKHR :: proc(
		device: VkDevice,
		infoCount: u32,
		pInfos: ^VkAccelerationStructureBuildGeometryInfoKHR,
		ppOffsetInfos: ^^VkAccelerationStructureBuildOffsetInfoKHR,
	) -> VkResult ---;

	vkGetAccelerationStructureDeviceAddressKHR :: proc(
		device: VkDevice,
		pInfo: ^VkAccelerationStructureDeviceAddressInfoKHR,
	) -> VkDeviceAddress ---;

	vkCreateDeferredOperationKHR :: proc(
		device: VkDevice,
		pAllocator: ^VkAllocationCallbacks,
		pDeferredOperation: ^VkDeferredOperationKHR,
	) -> VkResult ---;

	vkDestroyDeferredOperationKHR :: proc(
		device: VkDevice,
		operation: VkDeferredOperationKHR,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkGetDeferredOperationMaxConcurrencyKHR :: proc(
		device: VkDevice,
		operation: VkDeferredOperationKHR,
	) -> u32 ---;

	vkGetDeferredOperationResultKHR :: proc(
		device: VkDevice,
		operation: VkDeferredOperationKHR,
	) -> VkResult ---;

	vkDeferredOperationJoinKHR :: proc(
		device: VkDevice,
		operation: VkDeferredOperationKHR,
	) -> VkResult ---;

	vkCmdSetCullModeEXT :: proc(
		commandBuffer: VkCommandBuffer,
		cullMode: VkCullModeFlags,
	) ---;

	vkCmdSetFrontFaceEXT :: proc(
		commandBuffer: VkCommandBuffer,
		frontFace: VkFrontFace,
	) ---;

	vkCmdSetPrimitiveTopologyEXT :: proc(
		commandBuffer: VkCommandBuffer,
		primitiveTopology: VkPrimitiveTopology,
	) ---;

	vkCmdSetViewportWithCountEXT :: proc(
		commandBuffer: VkCommandBuffer,
		viewportCount: u32,
		pViewports: ^VkViewport,
	) ---;

	vkCmdSetScissorWithCountEXT :: proc(
		commandBuffer: VkCommandBuffer,
		scissorCount: u32,
		pScissors: ^VkRect2D,
	) ---;

	vkCmdBindVertexBuffers2EXT :: proc(
		commandBuffer: VkCommandBuffer,
		firstBinding: u32,
		bindingCount: u32,
		pBuffers: ^VkBuffer,
		pOffsets: ^VkDeviceSize,
		pSizes: ^VkDeviceSize,
		pStrides: ^VkDeviceSize,
	) ---;

	vkCmdSetDepthTestEnableEXT :: proc(
		commandBuffer: VkCommandBuffer,
		depthTestEnable: VkBool32,
	) ---;

	vkCmdSetDepthWriteEnableEXT :: proc(
		commandBuffer: VkCommandBuffer,
		depthWriteEnable: VkBool32,
	) ---;

	vkCmdSetDepthCompareOpEXT :: proc(
		commandBuffer: VkCommandBuffer,
		depthCompareOp: VkCompareOp,
	) ---;

	vkCmdSetDepthBoundsTestEnableEXT :: proc(
		commandBuffer: VkCommandBuffer,
		depthBoundsTestEnable: VkBool32,
	) ---;

	vkCmdSetStencilTestEnableEXT :: proc(
		commandBuffer: VkCommandBuffer,
		stencilTestEnable: VkBool32,
	) ---;

	vkCmdSetStencilOpEXT :: proc(
		commandBuffer: VkCommandBuffer,
		faceMask: VkStencilFaceFlags,
		failOp: VkStencilOp,
		passOp: VkStencilOp,
		depthFailOp: VkStencilOp,
		compareOp: VkCompareOp,
	) ---;

	vkCreatePrivateDataSlotEXT :: proc(
		device: VkDevice,
		pCreateInfo: ^VkPrivateDataSlotCreateInfoEXT,
		pAllocator: ^VkAllocationCallbacks,
		pPrivateDataSlot: ^VkPrivateDataSlotEXT,
	) -> VkResult ---;

	vkDestroyPrivateDataSlotEXT :: proc(
		device: VkDevice,
		privateDataSlot: VkPrivateDataSlotEXT,
		pAllocator: ^VkAllocationCallbacks,
	) ---;

	vkSetPrivateDataEXT :: proc(
		device: VkDevice,
		objectType: VkObjectType,
		objectHandle: u64,
		privateDataSlot: VkPrivateDataSlotEXT,
		data: u64,
	) -> VkResult ---;

	vkGetPrivateDataEXT :: proc(
		device: VkDevice,
		objectType: VkObjectType,
		objectHandle: u64,
		privateDataSlot: VkPrivateDataSlotEXT,
		pData: ^u64,
	) ---;

}
